
serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008964  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08008a78  08008a78  00009a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e78  08008e78  0000a33c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e78  08008e78  00009e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e80  08008e80  0000a33c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e80  08008e80  00009e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e84  08008e84  00009e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000033c  20000000  08008e88  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000033c  080091c4  0000a33c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  080091c4  0000a634  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a33c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff6e  00000000  00000000  0000a365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d80  00000000  00000000  0001a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c40  00000000  00000000  0001e048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adbb  00000000  00000000  0001ec88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a41  00000000  00000000  00039a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009313a  00000000  00000000  0004f484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e25be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d4  00000000  00000000  000e2604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000e78d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000033c 	.word	0x2000033c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a5c 	.word	0x08008a5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000340 	.word	0x20000340
 800014c:	08008a5c 	.word	0x08008a5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <Beep_Alarm_Sample>:
  * @param  None
  * @retval None
  */

void Beep_Alarm_Sample(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2108      	movs	r1, #8
 80010d8:	4808      	ldr	r0, [pc, #32]	@ (80010fc <Beep_Alarm_Sample+0x2c>)
 80010da:	f002 fad2 	bl	8003682 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010e2:	f001 f813 	bl	800210c <HAL_Delay>
	HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4804      	ldr	r0, [pc, #16]	@ (80010fc <Beep_Alarm_Sample+0x2c>)
 80010ec:	f002 fac9 	bl	8003682 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010f4:	f001 f80a 	bl	800210c <HAL_Delay>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010800 	.word	0x40010800

08001100 <Beep_Alarm_Temp>:

void Beep_Alarm_Temp(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2108      	movs	r1, #8
 8001108:	4809      	ldr	r0, [pc, #36]	@ (8001130 <Beep_Alarm_Temp+0x30>)
 800110a:	f002 faba 	bl	8003682 <HAL_GPIO_WritePin>
	LED_ON_Red();
 800110e:	f000 f811 	bl	8001134 <LED_ON_Red>
	HAL_Delay(250);
 8001112:	20fa      	movs	r0, #250	@ 0xfa
 8001114:	f000 fffa 	bl	800210c <HAL_Delay>
	HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2108      	movs	r1, #8
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <Beep_Alarm_Temp+0x30>)
 800111e:	f002 fab0 	bl	8003682 <HAL_GPIO_WritePin>
	LED_OFF_Red();
 8001122:	f000 f813 	bl	800114c <LED_OFF_Red>
	HAL_Delay(250);
 8001126:	20fa      	movs	r0, #250	@ 0xfa
 8001128:	f000 fff0 	bl	800210c <HAL_Delay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40010800 	.word	0x40010800

08001134 <LED_ON_Red>:
  * @param  None
  * @retval None
  */

void LED_ON_Red(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2120      	movs	r1, #32
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <LED_ON_Red+0x14>)
 800113e:	f002 faa0 	bl	8003682 <HAL_GPIO_WritePin>
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40010c00 	.word	0x40010c00

0800114c <LED_OFF_Red>:

void LED_OFF_Red(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2120      	movs	r1, #32
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <LED_OFF_Red+0x14>)
 8001156:	f002 fa94 	bl	8003682 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40010c00 	.word	0x40010c00

08001164 <LED_ON_Yellow>:

void LED_ON_Yellow(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2110      	movs	r1, #16
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <LED_ON_Yellow+0x14>)
 800116e:	f002 fa88 	bl	8003682 <HAL_GPIO_WritePin>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40010c00 	.word	0x40010c00

0800117c <LED_OFF_ALL>:
{
	HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_RESET);
}

void LED_OFF_ALL(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Yellow_GPIO_Port, LED_Yellow_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <LED_OFF_ALL+0x1c>)
 8001186:	f002 fa7c 	bl	8003682 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2120      	movs	r1, #32
 800118e:	4802      	ldr	r0, [pc, #8]	@ (8001198 <LED_OFF_ALL+0x1c>)
 8001190:	f002 fa77 	bl	8003682 <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010c00 	.word	0x40010c00

0800119c <MIC_MODE_NOMAL>:

char sampleHigh[50] = "\r\n**--警报!!警报!!光照强度过高!--**\r\n";
char tempHigh[50] = "\r\n**--警报!!警报!!温度过高!--**\r\n";

void MIC_MODE_NOMAL(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	PWM_LED_Green_UP();
 80011a0:	f000 f88c 	bl	80012bc <PWM_LED_Green_UP>
	Tamp_And_Sample_ADCPrint();
 80011a4:	f000 f95c 	bl	8001460 <Tamp_And_Sample_ADCPrint>
	PWM_LED_Green_DROP();
 80011a8:	f000 f8a6 	bl	80012f8 <PWM_LED_Green_DROP>
	Tamp_And_Sample_ADCPrint();
 80011ac:	f000 f958 	bl	8001460 <Tamp_And_Sample_ADCPrint>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <MIC_MODE_ALARM_Sample>:

void MIC_MODE_ALARM_Sample(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	LED_ON_Yellow();
 80011b8:	f7ff ffd4 	bl	8001164 <LED_ON_Yellow>
	Beep_Alarm_Sample();
 80011bc:	f7ff ff88 	bl	80010d0 <Beep_Alarm_Sample>
	send_str_uart((uint8_t*)sampleHigh, strlen(sampleHigh));
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MIC_MODE_ALARM_Sample+0x24>)
 80011c2:	f7fe ffc5 	bl	8000150 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <MIC_MODE_ALARM_Sample+0x24>)
 80011ce:	f000 fa0f 	bl	80015f0 <send_str_uart>
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000

080011dc <MIC_MODE_ALARM_Temp>:

void MIC_MODE_ALARM_Temp(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	Beep_Alarm_Temp();
 80011e0:	f7ff ff8e 	bl	8001100 <Beep_Alarm_Temp>
	send_str_uart((uint8_t*)tempHigh, strlen(tempHigh));
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MIC_MODE_ALARM_Temp+0x20>)
 80011e6:	f7fe ffb3 	bl	8000150 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <MIC_MODE_ALARM_Temp+0x20>)
 80011f2:	f000 f9fd 	bl	80015f0 <send_str_uart>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000034 	.word	0x20000034

08001200 <Operation_code>:
	Alarm_TEMP
};
enum MIC mic = Nomal;

void Operation_code(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	  if (KeyNumber == 1)
 8001204:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <Operation_code+0xa0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d142      	bne.n	8001292 <Operation_code+0x92>
	  {
		  switch (mic) {
 800120c:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <Operation_code+0xa4>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d021      	beq.n	8001258 <Operation_code+0x58>
 8001214:	2b02      	cmp	r3, #2
 8001216:	dc22      	bgt.n	800125e <Operation_code+0x5e>
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <Operation_code+0x22>
 800121c:	2b01      	cmp	r3, #1
 800121e:	d018      	beq.n	8001252 <Operation_code+0x52>
 8001220:	e01d      	b.n	800125e <Operation_code+0x5e>
			case Nomal:
				MIC_MODE_NOMAL();
 8001222:	f7ff ffbb 	bl	800119c <MIC_MODE_NOMAL>
				if (sample_Main < 10)mic = Alarm_SMAPLE;
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <Operation_code+0xa8>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	2b09      	cmp	r3, #9
 800122c:	d803      	bhi.n	8001236 <Operation_code+0x36>
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <Operation_code+0xa4>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
				else if (temperature_Main > 24.00)mic = Alarm_TEMP;
				break;
 8001234:	e013      	b.n	800125e <Operation_code+0x5e>
				else if (temperature_Main > 24.00)mic = Alarm_TEMP;
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <Operation_code+0xac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	491d      	ldr	r1, [pc, #116]	@ (80012b0 <Operation_code+0xb0>)
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff3d 	bl	80010bc <__aeabi_fcmpgt>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d100      	bne.n	800124a <Operation_code+0x4a>
				break;
 8001248:	e009      	b.n	800125e <Operation_code+0x5e>
				else if (temperature_Main > 24.00)mic = Alarm_TEMP;
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <Operation_code+0xa4>)
 800124c:	2202      	movs	r2, #2
 800124e:	701a      	strb	r2, [r3, #0]
				break;
 8001250:	e005      	b.n	800125e <Operation_code+0x5e>
			case Alarm_SMAPLE:
				MIC_MODE_ALARM_Sample();
 8001252:	f7ff ffaf 	bl	80011b4 <MIC_MODE_ALARM_Sample>
				break;
 8001256:	e002      	b.n	800125e <Operation_code+0x5e>
			case Alarm_TEMP:
				MIC_MODE_ALARM_Temp();
 8001258:	f7ff ffc0 	bl	80011dc <MIC_MODE_ALARM_Temp>
				break;
 800125c:	bf00      	nop
		}
		  if (alarmState == 0){ alarmState = 1; mic = Nomal; LED_OFF_ALL(); }
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <Operation_code+0xb4>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d107      	bne.n	8001276 <Operation_code+0x76>
 8001266:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <Operation_code+0xb4>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <Operation_code+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	f7ff ff83 	bl	800117c <LED_OFF_ALL>
		  if (KeyNumber == 0)send_str_uart((uint8_t*)shutDown, strlen(shutDown));
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <Operation_code+0xa0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10e      	bne.n	800129c <Operation_code+0x9c>
 800127e:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <Operation_code+0xb8>)
 8001280:	f7fe ff66 	bl	8000150 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29b      	uxth	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	480b      	ldr	r0, [pc, #44]	@ (80012b8 <Operation_code+0xb8>)
 800128c:	f000 f9b0 	bl	80015f0 <send_str_uart>
	  else
	  {
		  LED_OFF_ALL();
		  mic = Nomal;
	  }
}
 8001290:	e004      	b.n	800129c <Operation_code+0x9c>
		  LED_OFF_ALL();
 8001292:	f7ff ff73 	bl	800117c <LED_OFF_ALL>
		  mic = Nomal;
 8001296:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <Operation_code+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200004dc 	.word	0x200004dc
 80012a4:	20000358 	.word	0x20000358
 80012a8:	200004de 	.word	0x200004de
 80012ac:	200004d4 	.word	0x200004d4
 80012b0:	41c00000 	.word	0x41c00000
 80012b4:	200000fe 	.word	0x200000fe
 80012b8:	200000cc 	.word	0x200000cc

080012bc <PWM_LED_Green_UP>:
uint16_t pwmVal = 0;

extern TIM_HandleTypeDef htim2;

void PWM_LED_Green_UP(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	while(pwmVal < 300)
 80012c0:	e00d      	b.n	80012de <PWM_LED_Green_UP+0x22>
	{
		pwmVal++;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <PWM_LED_Green_UP+0x34>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <PWM_LED_Green_UP+0x34>)
 80012cc:	801a      	strh	r2, [r3, #0]
		 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwmVal);
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <PWM_LED_Green_UP+0x34>)
 80012d0:	881a      	ldrh	r2, [r3, #0]
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <PWM_LED_Green_UP+0x38>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	639a      	str	r2, [r3, #56]	@ 0x38
		 HAL_Delay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f000 ff17 	bl	800210c <HAL_Delay>
	while(pwmVal < 300)
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <PWM_LED_Green_UP+0x34>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80012e6:	d3ec      	bcc.n	80012c2 <PWM_LED_Green_UP+0x6>
	}

}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000035a 	.word	0x2000035a
 80012f4:	20000444 	.word	0x20000444

080012f8 <PWM_LED_Green_DROP>:

void PWM_LED_Green_DROP(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
		while(pwmVal)
 80012fc:	e00d      	b.n	800131a <PWM_LED_Green_DROP+0x22>
	{
		pwmVal--;
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <PWM_LED_Green_DROP+0x30>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	3b01      	subs	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <PWM_LED_Green_DROP+0x30>)
 8001308:	801a      	strh	r2, [r3, #0]
		 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwmVal);
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <PWM_LED_Green_DROP+0x30>)
 800130c:	881a      	ldrh	r2, [r3, #0]
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <PWM_LED_Green_DROP+0x34>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	639a      	str	r2, [r3, #56]	@ 0x38
		 HAL_Delay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f000 fef9 	bl	800210c <HAL_Delay>
		while(pwmVal)
 800131a:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <PWM_LED_Green_DROP+0x30>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ed      	bne.n	80012fe <PWM_LED_Green_DROP+0x6>
	}
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000035a 	.word	0x2000035a
 800132c:	20000444 	.word	0x20000444

08001330 <Tamp_And_Sample_ADCCount>:
uint16_t sampleVolt = 0;
float TEMP_R = 0.0;
float temperature = 0.0;

void Tamp_And_Sample_ADCCount(void)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af02      	add	r7, sp, #8
	  HAL_Delay(100);
 8001336:	2064      	movs	r0, #100	@ 0x64
 8001338:	f000 fee8 	bl	800210c <HAL_Delay>
	  sample = ADC_Values[0] * 100 / 4095;
 800133c:	4b3c      	ldr	r3, [pc, #240]	@ (8001430 <Tamp_And_Sample_ADCCount+0x100>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	2364      	movs	r3, #100	@ 0x64
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	4a3a      	ldr	r2, [pc, #232]	@ (8001434 <Tamp_And_Sample_ADCCount+0x104>)
 800134a:	fb82 1203 	smull	r1, r2, r2, r3
 800134e:	441a      	add	r2, r3
 8001350:	12d2      	asrs	r2, r2, #11
 8001352:	17db      	asrs	r3, r3, #31
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <Tamp_And_Sample_ADCCount+0x108>)
 800135a:	801a      	strh	r2, [r3, #0]
	  sampleVolt = ADC_Values[0] * 330 / 4096;
 800135c:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <Tamp_And_Sample_ADCCount+0x100>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	da01      	bge.n	8001372 <Tamp_And_Sample_ADCCount+0x42>
 800136e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001372:	131b      	asrs	r3, r3, #12
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b31      	ldr	r3, [pc, #196]	@ (800143c <Tamp_And_Sample_ADCCount+0x10c>)
 8001378:	801a      	strh	r2, [r3, #0]
	  TEMP_R = ADC2Resistance(ADC_Values[1]);
 800137a:	4b2d      	ldr	r3, [pc, #180]	@ (8001430 <Tamp_And_Sample_ADCCount+0x100>)
 800137c:	885b      	ldrh	r3, [r3, #2]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f8a6 	bl	80014d0 <ADC2Resistance>
 8001384:	4603      	mov	r3, r0
 8001386:	4a2e      	ldr	r2, [pc, #184]	@ (8001440 <Tamp_And_Sample_ADCCount+0x110>)
 8001388:	6013      	str	r3, [r2, #0]
	  temperature = resistance2Temperature(TEMP_R);
 800138a:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <Tamp_And_Sample_ADCCount+0x110>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f8c2 	bl	8001518 <resistance2Temperature>
 8001394:	4603      	mov	r3, r0
 8001396:	4a2b      	ldr	r2, [pc, #172]	@ (8001444 <Tamp_And_Sample_ADCCount+0x114>)
 8001398:	6013      	str	r3, [r2, #0]
	  sprintf(ADC_sampleMessage, "光照强度：%d，电压值：%d.%d%dV\r\n", sample, sampleVolt / 100,  (sampleVolt/10)%10, sampleVolt%10);
 800139a:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <Tamp_And_Sample_ADCCount+0x108>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	461c      	mov	r4, r3
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <Tamp_And_Sample_ADCCount+0x10c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	4a28      	ldr	r2, [pc, #160]	@ (8001448 <Tamp_And_Sample_ADCCount+0x118>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	461d      	mov	r5, r3
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <Tamp_And_Sample_ADCCount+0x10c>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4a25      	ldr	r2, [pc, #148]	@ (800144c <Tamp_And_Sample_ADCCount+0x11c>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	08db      	lsrs	r3, r3, #3
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b23      	ldr	r3, [pc, #140]	@ (800144c <Tamp_And_Sample_ADCCount+0x11c>)
 80013c0:	fba3 1302 	umull	r1, r3, r3, r2
 80013c4:	08d9      	lsrs	r1, r3, #3
 80013c6:	460b      	mov	r3, r1
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <Tamp_And_Sample_ADCCount+0x10c>)
 80013d6:	881a      	ldrh	r2, [r3, #0]
 80013d8:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <Tamp_And_Sample_ADCCount+0x11c>)
 80013da:	fba3 1302 	umull	r1, r3, r3, r2
 80013de:	08d9      	lsrs	r1, r3, #3
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	9000      	str	r0, [sp, #0]
 80013f0:	462b      	mov	r3, r5
 80013f2:	4622      	mov	r2, r4
 80013f4:	4916      	ldr	r1, [pc, #88]	@ (8001450 <Tamp_And_Sample_ADCCount+0x120>)
 80013f6:	4817      	ldr	r0, [pc, #92]	@ (8001454 <Tamp_And_Sample_ADCCount+0x124>)
 80013f8:	f005 f810 	bl	800641c <siprintf>
	  sprintf(ADC_tempMessage, "温度：%.2f°C，电阻值：%.2fΩ\r\n", temperature, TEMP_R);
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <Tamp_And_Sample_ADCCount+0x114>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f811 	bl	8000428 <__aeabi_f2d>
 8001406:	4604      	mov	r4, r0
 8001408:	460d      	mov	r5, r1
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <Tamp_And_Sample_ADCCount+0x110>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f80a 	bl	8000428 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9cd 2300 	strd	r2, r3, [sp]
 800141c:	4622      	mov	r2, r4
 800141e:	462b      	mov	r3, r5
 8001420:	490d      	ldr	r1, [pc, #52]	@ (8001458 <Tamp_And_Sample_ADCCount+0x128>)
 8001422:	480e      	ldr	r0, [pc, #56]	@ (800145c <Tamp_And_Sample_ADCCount+0x12c>)
 8001424:	f004 fffa 	bl	800641c <siprintf>
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bdb0      	pop	{r4, r5, r7, pc}
 800142e:	bf00      	nop
 8001430:	200004d8 	.word	0x200004d8
 8001434:	80080081 	.word	0x80080081
 8001438:	200003c2 	.word	0x200003c2
 800143c:	200003c4 	.word	0x200003c4
 8001440:	200003c8 	.word	0x200003c8
 8001444:	200003cc 	.word	0x200003cc
 8001448:	51eb851f 	.word	0x51eb851f
 800144c:	cccccccd 	.word	0xcccccccd
 8001450:	08008a78 	.word	0x08008a78
 8001454:	20000390 	.word	0x20000390
 8001458:	08008aa4 	.word	0x08008aa4
 800145c:	2000035c 	.word	0x2000035c

08001460 <Tamp_And_Sample_ADCPrint>:

void Tamp_And_Sample_ADCPrint(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	Tamp_And_Sample_ADCCount();
 8001464:	f7ff ff64 	bl	8001330 <Tamp_And_Sample_ADCCount>
	send_str_uart((uint8_t*)line, strlen(line));
 8001468:	4812      	ldr	r0, [pc, #72]	@ (80014b4 <Tamp_And_Sample_ADCPrint+0x54>)
 800146a:	f7fe fe71 	bl	8000150 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29b      	uxth	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	480f      	ldr	r0, [pc, #60]	@ (80014b4 <Tamp_And_Sample_ADCPrint+0x54>)
 8001476:	f000 f8bb 	bl	80015f0 <send_str_uart>
	send_str_uart((uint8_t *)ADC_sampleMessage, strlen(ADC_sampleMessage));
 800147a:	480f      	ldr	r0, [pc, #60]	@ (80014b8 <Tamp_And_Sample_ADCPrint+0x58>)
 800147c:	f7fe fe68 	bl	8000150 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29b      	uxth	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <Tamp_And_Sample_ADCPrint+0x58>)
 8001488:	f000 f8b2 	bl	80015f0 <send_str_uart>
	send_str_uart((uint8_t *)ADC_tempMessage, strlen(ADC_tempMessage));
 800148c:	480b      	ldr	r0, [pc, #44]	@ (80014bc <Tamp_And_Sample_ADCPrint+0x5c>)
 800148e:	f7fe fe5f 	bl	8000150 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29b      	uxth	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	4808      	ldr	r0, [pc, #32]	@ (80014bc <Tamp_And_Sample_ADCPrint+0x5c>)
 800149a:	f000 f8a9 	bl	80015f0 <send_str_uart>
	sample_Main = sample;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <Tamp_And_Sample_ADCPrint+0x60>)
 80014a0:	881a      	ldrh	r2, [r3, #0]
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <Tamp_And_Sample_ADCPrint+0x64>)
 80014a4:	801a      	strh	r2, [r3, #0]
	temperature_Main = temperature;
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <Tamp_And_Sample_ADCPrint+0x68>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <Tamp_And_Sample_ADCPrint+0x6c>)
 80014ac:	6013      	str	r3, [r2, #0]
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000068 	.word	0x20000068
 80014b8:	20000390 	.word	0x20000390
 80014bc:	2000035c 	.word	0x2000035c
 80014c0:	200003c2 	.word	0x200003c2
 80014c4:	200004de 	.word	0x200004de
 80014c8:	200003cc 	.word	0x200003cc
 80014cc:	200004d4 	.word	0x200004d4

080014d0 <ADC2Resistance>:

#include "Temp.h"
#include "math.h"

/*将ADC的值转换为电阻值*/
float ADC2Resistance(uint32_t adc_value) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return (adc_value / (4095.0f - adc_value)) * 10000.0f;
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fbdb 	bl	8000c94 <__aeabi_ui2f>
 80014de:	4604      	mov	r4, r0
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fbd7 	bl	8000c94 <__aeabi_ui2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4809      	ldr	r0, [pc, #36]	@ (8001510 <ADC2Resistance+0x40>)
 80014ec:	f7ff fb20 	bl	8000b30 <__aeabi_fsub>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff fcd9 	bl	8000eac <__aeabi_fdiv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4905      	ldr	r1, [pc, #20]	@ (8001514 <ADC2Resistance+0x44>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc20 	bl	8000d44 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	457ff000 	.word	0x457ff000
 8001514:	461c4000 	.word	0x461c4000

08001518 <resistance2Temperature>:

/*将电阻值转换为温度为华摄氏度的温度值*/
float resistance2Temperature(float R1) {
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  float B = 3950.0f;
 8001520:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <resistance2Temperature+0xc8>)
 8001522:	617b      	str	r3, [r7, #20]
  float R2 = 10000.0f;
 8001524:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <resistance2Temperature+0xcc>)
 8001526:	613b      	str	r3, [r7, #16]
  float T2 = 25.0f;
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <resistance2Temperature+0xd0>)
 800152a:	60fb      	str	r3, [r7, #12]
  return (1.0 / ((1.0 / B) * log(R1 / R2) + (1.0 / (T2 + 273.15))) - 273.15);
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7fe ff7b 	bl	8000428 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	f04f 0000 	mov.w	r0, #0
 800153a:	492c      	ldr	r1, [pc, #176]	@ (80015ec <resistance2Temperature+0xd4>)
 800153c:	f7ff f8f6 	bl	800072c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4614      	mov	r4, r2
 8001546:	461d      	mov	r5, r3
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fcae 	bl	8000eac <__aeabi_fdiv>
 8001550:	4603      	mov	r3, r0
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ff68 	bl	8000428 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f007 f890 	bl	8008684 <log>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7fe ffb4 	bl	80004d8 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4614      	mov	r4, r2
 8001576:	461d      	mov	r5, r3
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7fe ff55 	bl	8000428 <__aeabi_f2d>
 800157e:	a316      	add	r3, pc, #88	@ (adr r3, 80015d8 <resistance2Temperature+0xc0>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe fdf2 	bl	800016c <__adddf3>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	f04f 0000 	mov.w	r0, #0
 8001590:	4916      	ldr	r1, [pc, #88]	@ (80015ec <resistance2Temperature+0xd4>)
 8001592:	f7ff f8cb 	bl	800072c <__aeabi_ddiv>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe fde5 	bl	800016c <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	4910      	ldr	r1, [pc, #64]	@ (80015ec <resistance2Temperature+0xd4>)
 80015ac:	f7ff f8be 	bl	800072c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	a307      	add	r3, pc, #28	@ (adr r3, 80015d8 <resistance2Temperature+0xc0>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7fe fdd3 	bl	8000168 <__aeabi_dsub>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa5d 	bl	8000a88 <__aeabi_d2f>
 80015ce:	4603      	mov	r3, r0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bdb0      	pop	{r4, r5, r7, pc}
 80015d8:	66666666 	.word	0x66666666
 80015dc:	40711266 	.word	0x40711266
 80015e0:	4576e000 	.word	0x4576e000
 80015e4:	461c4000 	.word	0x461c4000
 80015e8:	41c80000 	.word	0x41c80000
 80015ec:	3ff00000 	.word	0x3ff00000

080015f0 <send_str_uart>:
#include <inttypes.h>

extern UART_HandleTypeDef huart1;

HAL_StatusTypeDef send_str_uart(uint8_t *pData, uint16_t size)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
	return (HAL_UART_Transmit(&huart1, pData, size, HAL_MAX_DELAY));
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <send_str_uart+0x24>)
 8001606:	f003 fc25 	bl	8004e54 <HAL_UART_Transmit>
 800160a:	4603      	mov	r3, r0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2000048c 	.word	0x2000048c

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161c:	f000 fd14 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001620:	f000 f820 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001624:	f000 f986 	bl	8001934 <MX_GPIO_Init>
  MX_DMA_Init();
 8001628:	f000 f966 	bl	80018f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800162c:	f000 f93a 	bl	80018a4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001630:	f000 f874 	bl	800171c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001634:	f000 f8c0 	bl	80017b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <main+0x40>)
 800163a:	f001 fa1f 	bl	8002a7c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Values, 2);
 800163e:	2202      	movs	r2, #2
 8001640:	4906      	ldr	r1, [pc, #24]	@ (800165c <main+0x44>)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <main+0x40>)
 8001644:	f000 fe5e 	bl	8002304 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001648:	2104      	movs	r1, #4
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <main+0x48>)
 800164c:	f002 fe78 	bl	8004340 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Operation_code();
 8001650:	f7ff fdd6 	bl	8001200 <Operation_code>
 8001654:	e7fc      	b.n	8001650 <main+0x38>
 8001656:	bf00      	nop
 8001658:	200003d0 	.word	0x200003d0
 800165c:	200004d8 	.word	0x200004d8
 8001660:	20000444 	.word	0x20000444

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	@ 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800166e:	2228      	movs	r2, #40	@ 0x28
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f004 ff35 	bl	80064e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001694:	2301      	movs	r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a2:	2301      	movs	r3, #1
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a6:	2302      	movs	r3, #2
 80016a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 f81c 	bl	80036f8 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016c6:	f000 f9d7 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fa88 	bl	8003bfc <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016f2:	f000 f9c1 	bl	8001a78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016f6:	2302      	movs	r3, #2
 80016f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80016fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fc08 	bl	8003f18 <HAL_RCCEx_PeriphCLKConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800170e:	f000 f9b3 	bl	8001a78 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3750      	adds	r7, #80	@ 0x50
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800172c:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <MX_ADC1_Init+0x94>)
 800172e:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001730:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <MX_ADC1_Init+0x94>)
 8001734:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001738:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800173a:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <MX_ADC1_Init+0x94>)
 800173c:	2201      	movs	r2, #1
 800173e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_ADC1_Init+0x94>)
 8001742:	2200      	movs	r2, #0
 8001744:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_ADC1_Init+0x94>)
 8001748:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800174c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174e:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_ADC1_Init+0x94>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_ADC1_Init+0x94>)
 8001756:	2202      	movs	r2, #2
 8001758:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800175a:	4815      	ldr	r0, [pc, #84]	@ (80017b0 <MX_ADC1_Init+0x94>)
 800175c:	f000 fcfa 	bl	8002154 <HAL_ADC_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001766:	f000 f987 	bl	8001a78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800176a:	2301      	movs	r3, #1
 800176c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800176e:	2301      	movs	r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001772:	2306      	movs	r3, #6
 8001774:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4619      	mov	r1, r3
 800177a:	480d      	ldr	r0, [pc, #52]	@ (80017b0 <MX_ADC1_Init+0x94>)
 800177c:	f000 ff84 	bl	8002688 <HAL_ADC_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001786:	f000 f977 	bl	8001a78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800178a:	2302      	movs	r3, #2
 800178c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800178e:	2302      	movs	r3, #2
 8001790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	@ (80017b0 <MX_ADC1_Init+0x94>)
 8001798:	f000 ff76 	bl	8002688 <HAL_ADC_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80017a2:	f000 f969 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003d0 	.word	0x200003d0
 80017b4:	40012400 	.word	0x40012400

080017b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	@ 0x38
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e8:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 80017ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 80017f2:	2247      	movs	r2, #71	@ 0x47
 80017f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80017fc:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 80017fe:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001804:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001810:	4823      	ldr	r0, [pc, #140]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 8001812:	f002 fced 	bl	80041f0 <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800181c:	f000 f92c 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800182a:	4619      	mov	r1, r3
 800182c:	481c      	ldr	r0, [pc, #112]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 800182e:	f002 feeb 	bl	8004608 <HAL_TIM_ConfigClockSource>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001838:	f000 f91e 	bl	8001a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800183c:	4818      	ldr	r0, [pc, #96]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 800183e:	f002 fd26 	bl	800428e <HAL_TIM_PWM_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001848:	f000 f916 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	4619      	mov	r1, r3
 800185a:	4811      	ldr	r0, [pc, #68]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 800185c:	f003 fa4c 	bl	8004cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001866:	f000 f907 	bl	8001a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186a:	2360      	movs	r3, #96	@ 0x60
 800186c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2204      	movs	r2, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 8001882:	f002 fdff 	bl	8004484 <HAL_TIM_PWM_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800188c:	f000 f8f4 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <MX_TIM2_Init+0xe8>)
 8001892:	f000 f9b5 	bl	8001c00 <HAL_TIM_MspPostInit>

}
 8001896:	bf00      	nop
 8001898:	3738      	adds	r7, #56	@ 0x38
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000444 	.word	0x20000444

080018a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <MX_USART1_UART_Init+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018dc:	f003 fa6a 	bl	8004db4 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e6:	f000 f8c7 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000048c 	.word	0x2000048c
 80018f4:	40013800 	.word	0x40013800

080018f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <MX_DMA_Init+0x38>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <MX_DMA_Init+0x38>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6153      	str	r3, [r2, #20]
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <MX_DMA_Init+0x38>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2101      	movs	r1, #1
 800191a:	200b      	movs	r0, #11
 800191c:	f001 fa3d 	bl	8002d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001920:	200b      	movs	r0, #11
 8001922:	f001 fa56 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	4b47      	ldr	r3, [pc, #284]	@ (8001a68 <MX_GPIO_Init+0x134>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a46      	ldr	r2, [pc, #280]	@ (8001a68 <MX_GPIO_Init+0x134>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b44      	ldr	r3, [pc, #272]	@ (8001a68 <MX_GPIO_Init+0x134>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <MX_GPIO_Init+0x134>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a40      	ldr	r2, [pc, #256]	@ (8001a68 <MX_GPIO_Init+0x134>)
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a68 <MX_GPIO_Init+0x134>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <MX_GPIO_Init+0x134>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a68 <MX_GPIO_Init+0x134>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <MX_GPIO_Init+0x134>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <MX_GPIO_Init+0x134>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a34      	ldr	r2, [pc, #208]	@ (8001a68 <MX_GPIO_Init+0x134>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <MX_GPIO_Init+0x134>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2108      	movs	r1, #8
 80019ac:	482f      	ldr	r0, [pc, #188]	@ (8001a6c <MX_GPIO_Init+0x138>)
 80019ae:	f001 fe68 	bl	8003682 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Yellow_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2130      	movs	r1, #48	@ 0x30
 80019b6:	482e      	ldr	r0, [pc, #184]	@ (8001a70 <MX_GPIO_Init+0x13c>)
 80019b8:	f001 fe63 	bl	8003682 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Beep_Pin */
  GPIO_InitStruct.Pin = Beep_Pin;
 80019bc:	2308      	movs	r3, #8
 80019be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	4826      	ldr	r0, [pc, #152]	@ (8001a6c <MX_GPIO_Init+0x138>)
 80019d4:	f001 fcba 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : Key_Beep_Pin Key_Turn_Pin */
  GPIO_InitStruct.Pin = Key_Beep_Pin|Key_Turn_Pin;
 80019d8:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80019dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019de:	4b25      	ldr	r3, [pc, #148]	@ (8001a74 <MX_GPIO_Init+0x140>)
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	4619      	mov	r1, r3
 80019ec:	4820      	ldr	r0, [pc, #128]	@ (8001a70 <MX_GPIO_Init+0x13c>)
 80019ee:	f001 fcad 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f8:	2303      	movs	r3, #3
 80019fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	481b      	ldr	r0, [pc, #108]	@ (8001a70 <MX_GPIO_Init+0x13c>)
 8001a04:	f001 fca2 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4813      	ldr	r0, [pc, #76]	@ (8001a6c <MX_GPIO_Init+0x138>)
 8001a1e:	f001 fc95 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Yellow_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Yellow_Pin|LED_Red_Pin;
 8001a22:	2330      	movs	r3, #48	@ 0x30
 8001a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4619      	mov	r1, r3
 8001a38:	480d      	ldr	r0, [pc, #52]	@ (8001a70 <MX_GPIO_Init+0x13c>)
 8001a3a:	f001 fc87 	bl	800334c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 9, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2109      	movs	r1, #9
 8001a42:	2017      	movs	r0, #23
 8001a44:	f001 f9a9 	bl	8002d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a48:	2017      	movs	r0, #23
 8001a4a:	f001 f9c2 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	210c      	movs	r1, #12
 8001a52:	2028      	movs	r0, #40	@ 0x28
 8001a54:	f001 f9a1 	bl	8002d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a58:	2028      	movs	r0, #40	@ 0x28
 8001a5a:	f001 f9ba 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	10210000 	.word	0x10210000

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <Error_Handler+0x8>

08001a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_MspInit+0x5c>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <HAL_MspInit+0x5c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_MspInit+0x5c>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <HAL_MspInit+0x5c>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <HAL_MspInit+0x5c>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <HAL_MspInit+0x5c>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_MspInit+0x60>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_MspInit+0x60>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000

08001ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb4 <HAL_ADC_MspInit+0xcc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d151      	bne.n	8001bac <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b08:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <HAL_ADC_MspInit+0xd0>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb8 <HAL_ADC_MspInit+0xd0>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <HAL_ADC_MspInit+0xd0>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <HAL_ADC_MspInit+0xd0>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <HAL_ADC_MspInit+0xd0>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b22      	ldr	r3, [pc, #136]	@ (8001bb8 <HAL_ADC_MspInit+0xd0>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b38:	2306      	movs	r3, #6
 8001b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4619      	mov	r1, r3
 8001b46:	481d      	ldr	r0, [pc, #116]	@ (8001bbc <HAL_ADC_MspInit+0xd4>)
 8001b48:	f001 fc00 	bl	800334c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc4 <HAL_ADC_MspInit+0xdc>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b58:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b60:	2280      	movs	r2, #128	@ 0x80
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b64:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b76:	2220      	movs	r2, #32
 8001b78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b80:	480f      	ldr	r0, [pc, #60]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b82:	f001 f941 	bl	8002e08 <HAL_DMA_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b8c:	f7ff ff74 	bl	8001a78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b94:	621a      	str	r2, [r3, #32]
 8001b96:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <HAL_ADC_MspInit+0xd8>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2012      	movs	r0, #18
 8001ba2:	f001 f8fa 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ba6:	2012      	movs	r0, #18
 8001ba8:	f001 f913 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40012400 	.word	0x40012400
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	20000400 	.word	0x20000400
 8001bc4:	40020008 	.word	0x40020008

08001bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_TIM_Base_MspInit+0x34>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_TIM_Base_MspInit+0x34>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_TIM_Base_MspInit+0x34>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40021000 	.word	0x40021000

08001c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c1e:	d129      	bne.n	8001c74 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <HAL_TIM_MspPostInit+0x7c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <HAL_TIM_MspPostInit+0x7c>)
 8001c26:	f043 0308 	orr.w	r3, r3, #8
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_TIM_MspPostInit+0x7c>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_Green_Pin;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <HAL_TIM_MspPostInit+0x80>)
 8001c4c:	f001 fb7e 	bl	800334c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <HAL_TIM_MspPostInit+0x84>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <HAL_TIM_MspPostInit+0x84>)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	40010000 	.word	0x40010000

08001c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a20      	ldr	r2, [pc, #128]	@ (8001d24 <HAL_UART_MspInit+0x9c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d139      	bne.n	8001d1c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <HAL_UART_MspInit+0xa0>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a1e      	ldr	r2, [pc, #120]	@ (8001d28 <HAL_UART_MspInit+0xa0>)
 8001cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <HAL_UART_MspInit+0xa0>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <HAL_UART_MspInit+0xa0>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a18      	ldr	r2, [pc, #96]	@ (8001d28 <HAL_UART_MspInit+0xa0>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <HAL_UART_MspInit+0xa0>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4619      	mov	r1, r3
 8001cec:	480f      	ldr	r0, [pc, #60]	@ (8001d2c <HAL_UART_MspInit+0xa4>)
 8001cee:	f001 fb2d 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4619      	mov	r1, r3
 8001d06:	4809      	ldr	r0, [pc, #36]	@ (8001d2c <HAL_UART_MspInit+0xa4>)
 8001d08:	f001 fb20 	bl	800334c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2025      	movs	r0, #37	@ 0x25
 8001d12:	f001 f842 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d16:	2025      	movs	r0, #37	@ 0x25
 8001d18:	f001 f85b 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d1c:	bf00      	nop
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010800 	.word	0x40010800

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <NMI_Handler+0x4>

08001d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <MemManage_Handler+0x4>

08001d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 f9a8 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <DMA1_Channel1_IRQHandler+0x10>)
 8001d8e:	f001 f9a9 	bl	80030e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000400 	.word	0x20000400

08001d9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <ADC1_2_IRQHandler+0x10>)
 8001da2:	f000 fb8d 	bl	80024c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200003d0 	.word	0x200003d0

08001db0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	HAL_Delay(10);
 8001db4:	200a      	movs	r0, #10
 8001db6:	f000 f9a9 	bl	800210c <HAL_Delay>
	if (HAL_GPIO_ReadPin(Key_Turn_GPIO_Port, Key_Turn_Pin) == GPIO_PIN_RESET)
 8001dba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dbe:	4810      	ldr	r0, [pc, #64]	@ (8001e00 <EXTI9_5_IRQHandler+0x50>)
 8001dc0:	f001 fc48 	bl	8003654 <HAL_GPIO_ReadPin>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d113      	bne.n	8001df2 <EXTI9_5_IRQHandler+0x42>
	{
		KeyNumber = 1 - KeyNumber;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <EXTI9_5_IRQHandler+0x54>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f1c3 0301 	rsb	r3, r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <EXTI9_5_IRQHandler+0x54>)
 8001dd6:	701a      	strb	r2, [r3, #0]
		if (KeyNumber == 1)
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <EXTI9_5_IRQHandler+0x54>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <EXTI9_5_IRQHandler+0x42>
		{
			send_str_uart((uint8_t*)acTion, strlen(acTion));
 8001de0:	4809      	ldr	r0, [pc, #36]	@ (8001e08 <EXTI9_5_IRQHandler+0x58>)
 8001de2:	f7fe f9b5 	bl	8000150 <strlen>
 8001de6:	4603      	mov	r3, r0
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	4806      	ldr	r0, [pc, #24]	@ (8001e08 <EXTI9_5_IRQHandler+0x58>)
 8001dee:	f7ff fbff 	bl	80015f0 <send_str_uart>
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_Turn_Pin);
 8001df2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001df6:	f001 fc5d 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40010c00 	.word	0x40010c00
 8001e04:	200004dc 	.word	0x200004dc
 8001e08:	20000100 	.word	0x20000100

08001e0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <USART1_IRQHandler+0x10>)
 8001e12:	f003 f8ab 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000048c 	.word	0x2000048c

08001e20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_Delay(10);
 8001e24:	200a      	movs	r0, #10
 8001e26:	f000 f971 	bl	800210c <HAL_Delay>
	if (HAL_GPIO_ReadPin(Key_Beep_GPIO_Port, Key_Beep_Pin) == GPIO_PIN_RESET)
 8001e2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e2e:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <EXTI15_10_IRQHandler+0x40>)
 8001e30:	f001 fc10 	bl	8003654 <HAL_GPIO_ReadPin>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10b      	bne.n	8001e52 <EXTI15_10_IRQHandler+0x32>
	{
		alarmState = 0;
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <EXTI15_10_IRQHandler+0x44>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
		send_str_uart((uint8_t*)offAlarm, strlen(offAlarm));
 8001e40:	4809      	ldr	r0, [pc, #36]	@ (8001e68 <EXTI15_10_IRQHandler+0x48>)
 8001e42:	f7fe f985 	bl	8000150 <strlen>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4806      	ldr	r0, [pc, #24]	@ (8001e68 <EXTI15_10_IRQHandler+0x48>)
 8001e4e:	f7ff fbcf 	bl	80015f0 <send_str_uart>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_Beep_Pin);
 8001e52:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e56:	f001 fc2d 	bl	80036b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010c00 	.word	0x40010c00
 8001e64:	200000fe 	.word	0x200000fe
 8001e68:	20000134 	.word	0x20000134

08001e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return 1;
 8001e70:	2301      	movs	r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <_kill>:

int _kill(int pid, int sig)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e84:	f004 fb80 	bl	8006588 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2216      	movs	r2, #22
 8001e8c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_exit>:

void _exit (int status)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffe7 	bl	8001e7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <_exit+0x12>

08001eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e00a      	b.n	8001ed8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec2:	f3af 8000 	nop.w
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbf0      	blt.n	8001ec2 <_read+0x12>
  }

  return len;
 8001ee0:	687b      	ldr	r3, [r7, #4]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e009      	b.n	8001f10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbf1      	blt.n	8001efc <_write+0x12>
  }
  return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_close>:

int _close(int file)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f48:	605a      	str	r2, [r3, #4]
  return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <_isatty>:

int _isatty(int file)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
	...

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	@ (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f004 fae8 	bl	8006588 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20005000 	.word	0x20005000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	200004e0 	.word	0x200004e0
 8001fec:	20000638 	.word	0x20000638

08001ff0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ffc:	f7ff fff8 	bl	8001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002000:	480b      	ldr	r0, [pc, #44]	@ (8002030 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002002:	490c      	ldr	r1, [pc, #48]	@ (8002034 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002004:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a09      	ldr	r2, [pc, #36]	@ (800203c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002018:	4c09      	ldr	r4, [pc, #36]	@ (8002040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002026:	f004 fab5 	bl	8006594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202a:	f7ff faf5 	bl	8001618 <main>
  bx lr
 800202e:	4770      	bx	lr
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8002038:	08008e88 	.word	0x08008e88
  ldr r2, =_sbss
 800203c:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8002040:	20000634 	.word	0x20000634

08002044 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <CAN1_RX1_IRQHandler>
	...

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <HAL_Init+0x28>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	@ (8002070 <HAL_Init+0x28>)
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 fe93 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fd0e 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 feab 	bl	8002dee <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 fe73 	bl	8002d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000168 	.word	0x20000168
 80020cc:	20000170 	.word	0x20000170
 80020d0:	2000016c 	.word	0x2000016c

080020d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_IncTick+0x1c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_IncTick+0x20>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a03      	ldr	r2, [pc, #12]	@ (80020f4 <HAL_IncTick+0x20>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000170 	.word	0x20000170
 80020f4:	200004e4 	.word	0x200004e4

080020f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b02      	ldr	r3, [pc, #8]	@ (8002108 <HAL_GetTick+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	200004e4 	.word	0x200004e4

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff fff0 	bl	80020f8 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002126:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffe0 	bl	80020f8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000170 	.word	0x20000170

08002154 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0be      	b.n	80022f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fca8 	bl	8001ae8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fbc7 	bl	800292c <ADC_ConversionStop_Disable>
 800219e:	4603      	mov	r3, r0
 80021a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8099 	bne.w	80022e2 <HAL_ADC_Init+0x18e>
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 8095 	bne.w	80022e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021c0:	f023 0302 	bic.w	r3, r3, #2
 80021c4:	f043 0202 	orr.w	r2, r3, #2
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7b1b      	ldrb	r3, [r3, #12]
 80021da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ec:	d003      	beq.n	80021f6 <HAL_ADC_Init+0xa2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_ADC_Init+0xa8>
 80021f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fa:	e000      	b.n	80021fe <HAL_ADC_Init+0xaa>
 80021fc:	2300      	movs	r3, #0
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7d1b      	ldrb	r3, [r3, #20]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d119      	bne.n	8002240 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7b1b      	ldrb	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	3b01      	subs	r3, #1
 800221a:	035a      	lsls	r2, r3, #13
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	e00b      	b.n	8002240 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b28      	ldr	r3, [pc, #160]	@ (80022fc <HAL_ADC_Init+0x1a8>)
 800225c:	4013      	ands	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	430b      	orrs	r3, r1
 8002266:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002270:	d003      	beq.n	800227a <HAL_ADC_Init+0x126>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d104      	bne.n	8002284 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	3b01      	subs	r3, #1
 8002280:	051b      	lsls	r3, r3, #20
 8002282:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	430a      	orrs	r2, r1
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_ADC_Init+0x1ac>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	f023 0303 	bic.w	r3, r3, #3
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022be:	e018      	b.n	80022f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	f023 0312 	bic.w	r3, r3, #18
 80022c8:	f043 0210 	orr.w	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e0:	e007      	b.n	80022f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	ffe1f7fd 	.word	0xffe1f7fd
 8002300:	ff1f0efe 	.word	0xff1f0efe

08002304 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a64      	ldr	r2, [pc, #400]	@ (80024ac <HAL_ADC_Start_DMA+0x1a8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_ADC_Start_DMA+0x24>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a63      	ldr	r2, [pc, #396]	@ (80024b0 <HAL_ADC_Start_DMA+0x1ac>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d106      	bne.n	8002336 <HAL_ADC_Start_DMA+0x32>
 8002328:	4b60      	ldr	r3, [pc, #384]	@ (80024ac <HAL_ADC_Start_DMA+0x1a8>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 80b3 	bne.w	800249c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_ADC_Start_DMA+0x40>
 8002340:	2302      	movs	r3, #2
 8002342:	e0ae      	b.n	80024a2 <HAL_ADC_Start_DMA+0x19e>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fa93 	bl	8002878 <ADC_Enable>
 8002352:	4603      	mov	r3, r0
 8002354:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 809a 	bne.w	8002492 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a4e      	ldr	r2, [pc, #312]	@ (80024b0 <HAL_ADC_Start_DMA+0x1ac>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d105      	bne.n	8002388 <HAL_ADC_Start_DMA+0x84>
 800237c:	4b4b      	ldr	r3, [pc, #300]	@ (80024ac <HAL_ADC_Start_DMA+0x1a8>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d115      	bne.n	80023b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d026      	beq.n	80023f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b2:	e01d      	b.n	80023f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a39      	ldr	r2, [pc, #228]	@ (80024ac <HAL_ADC_Start_DMA+0x1a8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d004      	beq.n	80023d4 <HAL_ADC_Start_DMA+0xd0>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a38      	ldr	r2, [pc, #224]	@ (80024b0 <HAL_ADC_Start_DMA+0x1ac>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d10d      	bne.n	80023f0 <HAL_ADC_Start_DMA+0xec>
 80023d4:	4b35      	ldr	r3, [pc, #212]	@ (80024ac <HAL_ADC_Start_DMA+0x1a8>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	f023 0206 	bic.w	r2, r3, #6
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002408:	e002      	b.n	8002410 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a25      	ldr	r2, [pc, #148]	@ (80024b4 <HAL_ADC_Start_DMA+0x1b0>)
 800241e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <HAL_ADC_Start_DMA+0x1b4>)
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a23      	ldr	r2, [pc, #140]	@ (80024bc <HAL_ADC_Start_DMA+0x1b8>)
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0202 	mvn.w	r2, #2
 8002438:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002448:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a18      	ldr	r0, [r3, #32]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	334c      	adds	r3, #76	@ 0x4c
 8002454:	4619      	mov	r1, r3
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f000 fd2f 	bl	8002ebc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002468:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800246c:	d108      	bne.n	8002480 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800247c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800247e:	e00f      	b.n	80024a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800248e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002490:	e006      	b.n	80024a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800249a:	e001      	b.n	80024a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40012400 	.word	0x40012400
 80024b0:	40012800 	.word	0x40012800
 80024b4:	080029af 	.word	0x080029af
 80024b8:	08002a2b 	.word	0x08002a2b
 80024bc:	08002a47 	.word	0x08002a47

080024c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03e      	beq.n	8002560 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d039      	beq.n	8002560 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800250e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002512:	d11d      	bne.n	8002550 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002518:	2b00      	cmp	r3, #0
 800251a:	d119      	bne.n	8002550 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0220 	bic.w	r2, r2, #32
 800252a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f874 	bl	800263e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f06f 0212 	mvn.w	r2, #18
 800255e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d04d      	beq.n	8002606 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d048      	beq.n	8002606 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002596:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800259a:	d012      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d125      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025b4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025b8:	d11d      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 faee 	bl	8002bd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 020c 	mvn.w	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d012      	beq.n	8002636 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f81b 	bl	8002662 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0201 	mvn.w	r2, #1
 8002634:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x20>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e0dc      	b.n	8002862 <HAL_ADC_ConfigChannel+0x1da>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b06      	cmp	r3, #6
 80026b6:	d81c      	bhi.n	80026f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	3b05      	subs	r3, #5
 80026ca:	221f      	movs	r2, #31
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	4019      	ands	r1, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b05      	subs	r3, #5
 80026e4:	fa00 f203 	lsl.w	r2, r0, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80026f0:	e03c      	b.n	800276c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d81c      	bhi.n	8002734 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	3b23      	subs	r3, #35	@ 0x23
 800270c:	221f      	movs	r2, #31
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	4019      	ands	r1, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b23      	subs	r3, #35	@ 0x23
 8002726:	fa00 f203 	lsl.w	r2, r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	631a      	str	r2, [r3, #48]	@ 0x30
 8002732:	e01b      	b.n	800276c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	3b41      	subs	r3, #65	@ 0x41
 8002746:	221f      	movs	r2, #31
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	4019      	ands	r1, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	3b41      	subs	r3, #65	@ 0x41
 8002760:	fa00 f203 	lsl.w	r2, r0, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b09      	cmp	r3, #9
 8002772:	d91c      	bls.n	80027ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68d9      	ldr	r1, [r3, #12]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	3b1e      	subs	r3, #30
 8002786:	2207      	movs	r2, #7
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	4019      	ands	r1, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6898      	ldr	r0, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	3b1e      	subs	r3, #30
 80027a0:	fa00 f203 	lsl.w	r2, r0, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	e019      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6919      	ldr	r1, [r3, #16]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	2207      	movs	r2, #7
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4019      	ands	r1, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6898      	ldr	r0, [r3, #8]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	fa00 f203 	lsl.w	r2, r0, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d003      	beq.n	80027f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ee:	2b11      	cmp	r3, #17
 80027f0:	d132      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_ADC_ConfigChannel+0x1e4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d125      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d126      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002818:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b10      	cmp	r3, #16
 8002820:	d11a      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <HAL_ADC_ConfigChannel+0x1e8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a13      	ldr	r2, [pc, #76]	@ (8002874 <HAL_ADC_ConfigChannel+0x1ec>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9a      	lsrs	r2, r3, #18
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002838:	e002      	b.n	8002840 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3b01      	subs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_ConfigChannel+0x1b2>
 8002846:	e007      	b.n	8002858 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40012400 	.word	0x40012400
 8002870:	20000168 	.word	0x20000168
 8002874:	431bde83 	.word	0x431bde83

08002878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d040      	beq.n	8002918 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002924 <ADC_Enable+0xac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <ADC_Enable+0xb0>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	0c9b      	lsrs	r3, r3, #18
 80028b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028b4:	e002      	b.n	80028bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f9      	bne.n	80028b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028c2:	f7ff fc19 	bl	80020f8 <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028c8:	e01f      	b.n	800290a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ca:	f7ff fc15 	bl	80020f8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d918      	bls.n	800290a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d011      	beq.n	800290a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e007      	b.n	800291a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b01      	cmp	r3, #1
 8002916:	d1d8      	bne.n	80028ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000168 	.word	0x20000168
 8002928:	431bde83 	.word	0x431bde83

0800292c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d12e      	bne.n	80029a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002956:	f7ff fbcf 	bl	80020f8 <HAL_GetTick>
 800295a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800295c:	e01b      	b.n	8002996 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800295e:	f7ff fbcb 	bl	80020f8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d914      	bls.n	8002996 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b01      	cmp	r3, #1
 8002978:	d10d      	bne.n	8002996 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e007      	b.n	80029a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d0dc      	beq.n	800295e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d127      	bne.n	8002a18 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80029de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029e2:	d115      	bne.n	8002a10 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d111      	bne.n	8002a10 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff fe14 	bl	800263e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a16:	e004      	b.n	8002a22 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff fe09 	bl	8002650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	f043 0204 	orr.w	r2, r3, #4
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff fe01 	bl	8002674 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e097      	b.n	8002bca <HAL_ADCEx_Calibration_Start+0x14e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ff42 	bl	800292c <ADC_ConversionStop_Disable>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff fee3 	bl	8002878 <ADC_Enable>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 8081 	bne.w	8002bc0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ac6:	f023 0302 	bic.w	r3, r3, #2
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ad2:	4b40      	ldr	r3, [pc, #256]	@ (8002bd4 <HAL_ADCEx_Calibration_Start+0x158>)
 8002ad4:	681c      	ldr	r4, [r3, #0]
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f001 fad4 	bl	8004084 <HAL_RCCEx_GetPeriphCLKFreq>
 8002adc:	4603      	mov	r3, r0
 8002ade:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002ae2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002ae4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002ae6:	e002      	b.n	8002aee <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0208 	orr.w	r2, r2, #8
 8002b02:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b04:	f7ff faf8 	bl	80020f8 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b0a:	e01b      	b.n	8002b44 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b0c:	f7ff faf4 	bl	80020f8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b0a      	cmp	r3, #10
 8002b18:	d914      	bls.n	8002b44 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	f023 0312 	bic.w	r3, r3, #18
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e042      	b.n	8002bca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1dc      	bne.n	8002b0c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0204 	orr.w	r2, r2, #4
 8002b60:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b62:	f7ff fac9 	bl	80020f8 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b68:	e01b      	b.n	8002ba2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b6a:	f7ff fac5 	bl	80020f8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b0a      	cmp	r3, #10
 8002b76:	d914      	bls.n	8002ba2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	f023 0312 	bic.w	r3, r3, #18
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e013      	b.n	8002bca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1dc      	bne.n	8002b6a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	f023 0303 	bic.w	r3, r3, #3
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd90      	pop	{r4, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000168 	.word	0x20000168

08002bd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
	...

08002bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <__NVIC_GetPriorityGrouping+0x18>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0307 	and.w	r3, r3, #7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db0b      	blt.n	8002c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4906      	ldr	r1, [pc, #24]	@ (8002c84 <__NVIC_EnableIRQ+0x34>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2001      	movs	r0, #1
 8002c72:	fa00 f202 	lsl.w	r2, r0, r2
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	@ (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	@ (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	@ 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d50:	d301      	bcc.n	8002d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00f      	b.n	8002d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d56:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <SysTick_Config+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5e:	210f      	movs	r1, #15
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f7ff ff90 	bl	8002c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <SysTick_Config+0x40>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6e:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <SysTick_Config+0x40>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff2d 	bl	8002bec <__NVIC_SetPriorityGrouping>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dac:	f7ff ff42 	bl	8002c34 <__NVIC_GetPriorityGrouping>
 8002db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff90 	bl	8002cdc <NVIC_EncodePriority>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff5f 	bl	8002c88 <__NVIC_SetPriority>
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff35 	bl	8002c50 <__NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffa2 	bl	8002d40 <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e043      	b.n	8002ea6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b22      	ldr	r3, [pc, #136]	@ (8002eb0 <HAL_DMA_Init+0xa8>)
 8002e26:	4413      	add	r3, r2
 8002e28:	4a22      	ldr	r2, [pc, #136]	@ (8002eb4 <HAL_DMA_Init+0xac>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	009a      	lsls	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb8 <HAL_DMA_Init+0xb0>)
 8002e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e52:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	bffdfff8 	.word	0xbffdfff8
 8002eb4:	cccccccd 	.word	0xcccccccd
 8002eb8:	40020000 	.word	0x40020000

08002ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_DMA_Start_IT+0x20>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e04b      	b.n	8002f74 <HAL_DMA_Start_IT+0xb8>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d13a      	bne.n	8002f66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f9eb 	bl	80032f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 020e 	orr.w	r2, r2, #14
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e00f      	b.n	8002f54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 020a 	orr.w	r2, r2, #10
 8002f52:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e005      	b.n	8002f72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2204      	movs	r2, #4
 8002f98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e020      	b.n	8002fe8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 020e 	bic.w	r2, r2, #14
 8002fb4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d005      	beq.n	8003018 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2204      	movs	r2, #4
 8003010:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e051      	b.n	80030bc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 020e 	bic.w	r2, r2, #14
 8003026:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <HAL_DMA_Abort_IT+0xd4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d029      	beq.n	8003096 <HAL_DMA_Abort_IT+0xa2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a21      	ldr	r2, [pc, #132]	@ (80030cc <HAL_DMA_Abort_IT+0xd8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_Abort_IT+0x9e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1f      	ldr	r2, [pc, #124]	@ (80030d0 <HAL_DMA_Abort_IT+0xdc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01a      	beq.n	800308c <HAL_DMA_Abort_IT+0x98>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1e      	ldr	r2, [pc, #120]	@ (80030d4 <HAL_DMA_Abort_IT+0xe0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d012      	beq.n	8003086 <HAL_DMA_Abort_IT+0x92>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <HAL_DMA_Abort_IT+0xe4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00a      	beq.n	8003080 <HAL_DMA_Abort_IT+0x8c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_DMA_Abort_IT+0xe8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d102      	bne.n	800307a <HAL_DMA_Abort_IT+0x86>
 8003074:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003078:	e00e      	b.n	8003098 <HAL_DMA_Abort_IT+0xa4>
 800307a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800307e:	e00b      	b.n	8003098 <HAL_DMA_Abort_IT+0xa4>
 8003080:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003084:	e008      	b.n	8003098 <HAL_DMA_Abort_IT+0xa4>
 8003086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800308a:	e005      	b.n	8003098 <HAL_DMA_Abort_IT+0xa4>
 800308c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003090:	e002      	b.n	8003098 <HAL_DMA_Abort_IT+0xa4>
 8003092:	2310      	movs	r3, #16
 8003094:	e000      	b.n	8003098 <HAL_DMA_Abort_IT+0xa4>
 8003096:	2301      	movs	r3, #1
 8003098:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_DMA_Abort_IT+0xec>)
 800309a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
    } 
  }
  return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40020008 	.word	0x40020008
 80030cc:	4002001c 	.word	0x4002001c
 80030d0:	40020030 	.word	0x40020030
 80030d4:	40020044 	.word	0x40020044
 80030d8:	40020058 	.word	0x40020058
 80030dc:	4002006c 	.word	0x4002006c
 80030e0:	40020000 	.word	0x40020000

080030e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d04f      	beq.n	80031ac <HAL_DMA_IRQHandler+0xc8>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04a      	beq.n	80031ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a66      	ldr	r2, [pc, #408]	@ (80032d4 <HAL_DMA_IRQHandler+0x1f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d029      	beq.n	8003192 <HAL_DMA_IRQHandler+0xae>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a65      	ldr	r2, [pc, #404]	@ (80032d8 <HAL_DMA_IRQHandler+0x1f4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_IRQHandler+0xaa>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a63      	ldr	r2, [pc, #396]	@ (80032dc <HAL_DMA_IRQHandler+0x1f8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01a      	beq.n	8003188 <HAL_DMA_IRQHandler+0xa4>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a62      	ldr	r2, [pc, #392]	@ (80032e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d012      	beq.n	8003182 <HAL_DMA_IRQHandler+0x9e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a60      	ldr	r2, [pc, #384]	@ (80032e4 <HAL_DMA_IRQHandler+0x200>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00a      	beq.n	800317c <HAL_DMA_IRQHandler+0x98>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a5f      	ldr	r2, [pc, #380]	@ (80032e8 <HAL_DMA_IRQHandler+0x204>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d102      	bne.n	8003176 <HAL_DMA_IRQHandler+0x92>
 8003170:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003174:	e00e      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 8003176:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800317a:	e00b      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 800317c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003180:	e008      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 8003182:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003186:	e005      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 8003188:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800318c:	e002      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 800318e:	2340      	movs	r3, #64	@ 0x40
 8003190:	e000      	b.n	8003194 <HAL_DMA_IRQHandler+0xb0>
 8003192:	2304      	movs	r3, #4
 8003194:	4a55      	ldr	r2, [pc, #340]	@ (80032ec <HAL_DMA_IRQHandler+0x208>)
 8003196:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8094 	beq.w	80032ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031aa:	e08e      	b.n	80032ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	2202      	movs	r2, #2
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d056      	beq.n	800326a <HAL_DMA_IRQHandler+0x186>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d051      	beq.n	800326a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 020a 	bic.w	r2, r2, #10
 80031e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a38      	ldr	r2, [pc, #224]	@ (80032d4 <HAL_DMA_IRQHandler+0x1f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d029      	beq.n	800324a <HAL_DMA_IRQHandler+0x166>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a37      	ldr	r2, [pc, #220]	@ (80032d8 <HAL_DMA_IRQHandler+0x1f4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_IRQHandler+0x162>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a35      	ldr	r2, [pc, #212]	@ (80032dc <HAL_DMA_IRQHandler+0x1f8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01a      	beq.n	8003240 <HAL_DMA_IRQHandler+0x15c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a34      	ldr	r2, [pc, #208]	@ (80032e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d012      	beq.n	800323a <HAL_DMA_IRQHandler+0x156>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a32      	ldr	r2, [pc, #200]	@ (80032e4 <HAL_DMA_IRQHandler+0x200>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00a      	beq.n	8003234 <HAL_DMA_IRQHandler+0x150>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a31      	ldr	r2, [pc, #196]	@ (80032e8 <HAL_DMA_IRQHandler+0x204>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <HAL_DMA_IRQHandler+0x14a>
 8003228:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800322c:	e00e      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 800322e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003232:	e00b      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 8003234:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003238:	e008      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 800323a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800323e:	e005      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 8003240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003244:	e002      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 8003246:	2320      	movs	r3, #32
 8003248:	e000      	b.n	800324c <HAL_DMA_IRQHandler+0x168>
 800324a:	2302      	movs	r3, #2
 800324c:	4a27      	ldr	r2, [pc, #156]	@ (80032ec <HAL_DMA_IRQHandler+0x208>)
 800324e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	d034      	beq.n	80032ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003268:	e02f      	b.n	80032ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	2208      	movs	r2, #8
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d028      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e8>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d023      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 020e 	bic.w	r2, r2, #14
 8003292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
    }
  }
  return;
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
}
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40020008 	.word	0x40020008
 80032d8:	4002001c 	.word	0x4002001c
 80032dc:	40020030 	.word	0x40020030
 80032e0:	40020044 	.word	0x40020044
 80032e4:	40020058 	.word	0x40020058
 80032e8:	4002006c 	.word	0x4002006c
 80032ec:	40020000 	.word	0x40020000

080032f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f202 	lsl.w	r2, r1, r2
 800330c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b10      	cmp	r3, #16
 800331c:	d108      	bne.n	8003330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800332e:	e007      	b.n	8003340 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	60da      	str	r2, [r3, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr
	...

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b08b      	sub	sp, #44	@ 0x2c
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800335a:	2300      	movs	r3, #0
 800335c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800335e:	e169      	b.n	8003634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003360:	2201      	movs	r2, #1
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	429a      	cmp	r2, r3
 800337a:	f040 8158 	bne.w	800362e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4a9a      	ldr	r2, [pc, #616]	@ (80035ec <HAL_GPIO_Init+0x2a0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d05e      	beq.n	8003446 <HAL_GPIO_Init+0xfa>
 8003388:	4a98      	ldr	r2, [pc, #608]	@ (80035ec <HAL_GPIO_Init+0x2a0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d875      	bhi.n	800347a <HAL_GPIO_Init+0x12e>
 800338e:	4a98      	ldr	r2, [pc, #608]	@ (80035f0 <HAL_GPIO_Init+0x2a4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d058      	beq.n	8003446 <HAL_GPIO_Init+0xfa>
 8003394:	4a96      	ldr	r2, [pc, #600]	@ (80035f0 <HAL_GPIO_Init+0x2a4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d86f      	bhi.n	800347a <HAL_GPIO_Init+0x12e>
 800339a:	4a96      	ldr	r2, [pc, #600]	@ (80035f4 <HAL_GPIO_Init+0x2a8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d052      	beq.n	8003446 <HAL_GPIO_Init+0xfa>
 80033a0:	4a94      	ldr	r2, [pc, #592]	@ (80035f4 <HAL_GPIO_Init+0x2a8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d869      	bhi.n	800347a <HAL_GPIO_Init+0x12e>
 80033a6:	4a94      	ldr	r2, [pc, #592]	@ (80035f8 <HAL_GPIO_Init+0x2ac>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d04c      	beq.n	8003446 <HAL_GPIO_Init+0xfa>
 80033ac:	4a92      	ldr	r2, [pc, #584]	@ (80035f8 <HAL_GPIO_Init+0x2ac>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d863      	bhi.n	800347a <HAL_GPIO_Init+0x12e>
 80033b2:	4a92      	ldr	r2, [pc, #584]	@ (80035fc <HAL_GPIO_Init+0x2b0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d046      	beq.n	8003446 <HAL_GPIO_Init+0xfa>
 80033b8:	4a90      	ldr	r2, [pc, #576]	@ (80035fc <HAL_GPIO_Init+0x2b0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d85d      	bhi.n	800347a <HAL_GPIO_Init+0x12e>
 80033be:	2b12      	cmp	r3, #18
 80033c0:	d82a      	bhi.n	8003418 <HAL_GPIO_Init+0xcc>
 80033c2:	2b12      	cmp	r3, #18
 80033c4:	d859      	bhi.n	800347a <HAL_GPIO_Init+0x12e>
 80033c6:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <HAL_GPIO_Init+0x80>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	08003447 	.word	0x08003447
 80033d0:	08003421 	.word	0x08003421
 80033d4:	08003433 	.word	0x08003433
 80033d8:	08003475 	.word	0x08003475
 80033dc:	0800347b 	.word	0x0800347b
 80033e0:	0800347b 	.word	0x0800347b
 80033e4:	0800347b 	.word	0x0800347b
 80033e8:	0800347b 	.word	0x0800347b
 80033ec:	0800347b 	.word	0x0800347b
 80033f0:	0800347b 	.word	0x0800347b
 80033f4:	0800347b 	.word	0x0800347b
 80033f8:	0800347b 	.word	0x0800347b
 80033fc:	0800347b 	.word	0x0800347b
 8003400:	0800347b 	.word	0x0800347b
 8003404:	0800347b 	.word	0x0800347b
 8003408:	0800347b 	.word	0x0800347b
 800340c:	0800347b 	.word	0x0800347b
 8003410:	08003429 	.word	0x08003429
 8003414:	0800343d 	.word	0x0800343d
 8003418:	4a79      	ldr	r2, [pc, #484]	@ (8003600 <HAL_GPIO_Init+0x2b4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800341e:	e02c      	b.n	800347a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	623b      	str	r3, [r7, #32]
          break;
 8003426:	e029      	b.n	800347c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	623b      	str	r3, [r7, #32]
          break;
 8003430:	e024      	b.n	800347c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	3308      	adds	r3, #8
 8003438:	623b      	str	r3, [r7, #32]
          break;
 800343a:	e01f      	b.n	800347c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	330c      	adds	r3, #12
 8003442:	623b      	str	r3, [r7, #32]
          break;
 8003444:	e01a      	b.n	800347c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800344e:	2304      	movs	r3, #4
 8003450:	623b      	str	r3, [r7, #32]
          break;
 8003452:	e013      	b.n	800347c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800345c:	2308      	movs	r3, #8
 800345e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	611a      	str	r2, [r3, #16]
          break;
 8003466:	e009      	b.n	800347c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003468:	2308      	movs	r3, #8
 800346a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	615a      	str	r2, [r3, #20]
          break;
 8003472:	e003      	b.n	800347c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003474:	2300      	movs	r3, #0
 8003476:	623b      	str	r3, [r7, #32]
          break;
 8003478:	e000      	b.n	800347c <HAL_GPIO_Init+0x130>
          break;
 800347a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2bff      	cmp	r3, #255	@ 0xff
 8003480:	d801      	bhi.n	8003486 <HAL_GPIO_Init+0x13a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	e001      	b.n	800348a <HAL_GPIO_Init+0x13e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2bff      	cmp	r3, #255	@ 0xff
 8003490:	d802      	bhi.n	8003498 <HAL_GPIO_Init+0x14c>
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	e002      	b.n	800349e <HAL_GPIO_Init+0x152>
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	3b08      	subs	r3, #8
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	210f      	movs	r1, #15
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	6a39      	ldr	r1, [r7, #32]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	431a      	orrs	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80b1 	beq.w	800362e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003604 <HAL_GPIO_Init+0x2b8>)
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003604 <HAL_GPIO_Init+0x2b8>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6193      	str	r3, [r2, #24]
 80034d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003604 <HAL_GPIO_Init+0x2b8>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034e4:	4a48      	ldr	r2, [pc, #288]	@ (8003608 <HAL_GPIO_Init+0x2bc>)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	3302      	adds	r3, #2
 80034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	220f      	movs	r2, #15
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a40      	ldr	r2, [pc, #256]	@ (800360c <HAL_GPIO_Init+0x2c0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_GPIO_Init+0x1ec>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3f      	ldr	r2, [pc, #252]	@ (8003610 <HAL_GPIO_Init+0x2c4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00d      	beq.n	8003534 <HAL_GPIO_Init+0x1e8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3e      	ldr	r2, [pc, #248]	@ (8003614 <HAL_GPIO_Init+0x2c8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <HAL_GPIO_Init+0x1e4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3d      	ldr	r2, [pc, #244]	@ (8003618 <HAL_GPIO_Init+0x2cc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_GPIO_Init+0x1e0>
 8003528:	2303      	movs	r3, #3
 800352a:	e006      	b.n	800353a <HAL_GPIO_Init+0x1ee>
 800352c:	2304      	movs	r3, #4
 800352e:	e004      	b.n	800353a <HAL_GPIO_Init+0x1ee>
 8003530:	2302      	movs	r3, #2
 8003532:	e002      	b.n	800353a <HAL_GPIO_Init+0x1ee>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_GPIO_Init+0x1ee>
 8003538:	2300      	movs	r3, #0
 800353a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353c:	f002 0203 	and.w	r2, r2, #3
 8003540:	0092      	lsls	r2, r2, #2
 8003542:	4093      	lsls	r3, r2
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800354a:	492f      	ldr	r1, [pc, #188]	@ (8003608 <HAL_GPIO_Init+0x2bc>)
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003564:	4b2d      	ldr	r3, [pc, #180]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	492c      	ldr	r1, [pc, #176]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	608b      	str	r3, [r1, #8]
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003572:	4b2a      	ldr	r3, [pc, #168]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	43db      	mvns	r3, r3
 800357a:	4928      	ldr	r1, [pc, #160]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 800357c:	4013      	ands	r3, r2
 800357e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800358c:	4b23      	ldr	r3, [pc, #140]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	4922      	ldr	r1, [pc, #136]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	60cb      	str	r3, [r1, #12]
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800359a:	4b20      	ldr	r3, [pc, #128]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	491e      	ldr	r1, [pc, #120]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035b4:	4b19      	ldr	r3, [pc, #100]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4918      	ldr	r1, [pc, #96]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
 80035c0:	e006      	b.n	80035d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035c2:	4b16      	ldr	r3, [pc, #88]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	4914      	ldr	r1, [pc, #80]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d021      	beq.n	8003620 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035dc:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	490e      	ldr	r1, [pc, #56]	@ (800361c <HAL_GPIO_Init+0x2d0>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
 80035e8:	e021      	b.n	800362e <HAL_GPIO_Init+0x2e2>
 80035ea:	bf00      	nop
 80035ec:	10320000 	.word	0x10320000
 80035f0:	10310000 	.word	0x10310000
 80035f4:	10220000 	.word	0x10220000
 80035f8:	10210000 	.word	0x10210000
 80035fc:	10120000 	.word	0x10120000
 8003600:	10110000 	.word	0x10110000
 8003604:	40021000 	.word	0x40021000
 8003608:	40010000 	.word	0x40010000
 800360c:	40010800 	.word	0x40010800
 8003610:	40010c00 	.word	0x40010c00
 8003614:	40011000 	.word	0x40011000
 8003618:	40011400 	.word	0x40011400
 800361c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <HAL_GPIO_Init+0x304>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	43db      	mvns	r3, r3
 8003628:	4909      	ldr	r1, [pc, #36]	@ (8003650 <HAL_GPIO_Init+0x304>)
 800362a:	4013      	ands	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	3301      	adds	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	f47f ae8e 	bne.w	8003360 <HAL_GPIO_Init+0x14>
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	372c      	adds	r7, #44	@ 0x2c
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	40010400 	.word	0x40010400

08003654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	887b      	ldrh	r3, [r7, #2]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e001      	b.n	8003676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	807b      	strh	r3, [r7, #2]
 800368e:	4613      	mov	r3, r2
 8003690:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003692:	787b      	ldrb	r3, [r7, #1]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003698:	887a      	ldrh	r2, [r7, #2]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800369e:	e003      	b.n	80036a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	041a      	lsls	r2, r3, #16
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	611a      	str	r2, [r3, #16]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036be:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ca:	4a05      	ldr	r2, [pc, #20]	@ (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f806 	bl	80036e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40010400 	.word	0x40010400

080036e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e272      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8087 	beq.w	8003826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003718:	4b92      	ldr	r3, [pc, #584]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b04      	cmp	r3, #4
 8003722:	d00c      	beq.n	800373e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003724:	4b8f      	ldr	r3, [pc, #572]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d112      	bne.n	8003756 <HAL_RCC_OscConfig+0x5e>
 8003730:	4b8c      	ldr	r3, [pc, #560]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800373c:	d10b      	bne.n	8003756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373e:	4b89      	ldr	r3, [pc, #548]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d06c      	beq.n	8003824 <HAL_RCC_OscConfig+0x12c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d168      	bne.n	8003824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e24c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x76>
 8003760:	4b80      	ldr	r3, [pc, #512]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7f      	ldr	r2, [pc, #508]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e02e      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x98>
 8003776:	4b7b      	ldr	r3, [pc, #492]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7a      	ldr	r2, [pc, #488]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b78      	ldr	r3, [pc, #480]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a77      	ldr	r2, [pc, #476]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e01d      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0xbc>
 800379a:	4b72      	ldr	r3, [pc, #456]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a71      	ldr	r2, [pc, #452]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 80037b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b68      	ldr	r3, [pc, #416]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a67      	ldr	r2, [pc, #412]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe fc90 	bl	80020f8 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fe fc8c 	bl	80020f8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e200      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0xe4>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe fc7c 	bl	80020f8 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe fc78 	bl	80020f8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e1ec      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003816:	4b53      	ldr	r3, [pc, #332]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x10c>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d063      	beq.n	80038fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003832:	4b4c      	ldr	r3, [pc, #304]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800383e:	4b49      	ldr	r3, [pc, #292]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b08      	cmp	r3, #8
 8003848:	d11c      	bne.n	8003884 <HAL_RCC_OscConfig+0x18c>
 800384a:	4b46      	ldr	r3, [pc, #280]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d116      	bne.n	8003884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	4b43      	ldr	r3, [pc, #268]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x176>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d001      	beq.n	800386e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1c0      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4b3d      	ldr	r3, [pc, #244]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4939      	ldr	r1, [pc, #228]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	e03a      	b.n	80038fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800388c:	4b36      	ldr	r3, [pc, #216]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fe fc31 	bl	80020f8 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389a:	f7fe fc2d 	bl	80020f8 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1a1      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4927      	ldr	r1, [pc, #156]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]
 80038cc:	e015      	b.n	80038fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ce:	4b26      	ldr	r3, [pc, #152]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fe fc10 	bl	80020f8 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fe fc0c 	bl	80020f8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e180      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d03a      	beq.n	800397c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d019      	beq.n	8003942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390e:	4b17      	ldr	r3, [pc, #92]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003914:	f7fe fbf0 	bl	80020f8 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7fe fbec 	bl	80020f8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e160      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800393a:	2001      	movs	r0, #1
 800393c:	f000 face 	bl	8003edc <RCC_Delay>
 8003940:	e01c      	b.n	800397c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003948:	f7fe fbd6 	bl	80020f8 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394e:	e00f      	b.n	8003970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003950:	f7fe fbd2 	bl	80020f8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d908      	bls.n	8003970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e146      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	42420000 	.word	0x42420000
 800396c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003970:	4b92      	ldr	r3, [pc, #584]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e9      	bne.n	8003950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80a6 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	4b88      	ldr	r3, [pc, #544]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4a87      	ldr	r2, [pc, #540]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a4:	61d3      	str	r3, [r2, #28]
 80039a6:	4b85      	ldr	r3, [pc, #532]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b82      	ldr	r3, [pc, #520]	@ (8003bc0 <HAL_RCC_OscConfig+0x4c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d118      	bne.n	80039f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc0 <HAL_RCC_OscConfig+0x4c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7e      	ldr	r2, [pc, #504]	@ (8003bc0 <HAL_RCC_OscConfig+0x4c8>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fe fb93 	bl	80020f8 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d6:	f7fe fb8f 	bl	80020f8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	@ 0x64
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e103      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b75      	ldr	r3, [pc, #468]	@ (8003bc0 <HAL_RCC_OscConfig+0x4c8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x312>
 80039fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6213      	str	r3, [r2, #32]
 8003a08:	e02d      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x334>
 8003a12:	4b6a      	ldr	r3, [pc, #424]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a69      	ldr	r2, [pc, #420]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	4b67      	ldr	r3, [pc, #412]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a66      	ldr	r2, [pc, #408]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	6213      	str	r3, [r2, #32]
 8003a2a:	e01c      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCC_OscConfig+0x356>
 8003a34:	4b61      	ldr	r3, [pc, #388]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a60      	ldr	r2, [pc, #384]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	4b5e      	ldr	r3, [pc, #376]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a5d      	ldr	r2, [pc, #372]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	e00b      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a5a      	ldr	r2, [pc, #360]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6213      	str	r3, [r2, #32]
 8003a5a:	4b58      	ldr	r3, [pc, #352]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a57      	ldr	r2, [pc, #348]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d015      	beq.n	8003a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fe fb43 	bl	80020f8 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fe fb3f 	bl	80020f8 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e0b1      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ee      	beq.n	8003a76 <HAL_RCC_OscConfig+0x37e>
 8003a98:	e014      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fb2d 	bl	80020f8 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fe fb29 	bl	80020f8 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e09b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab8:	4b40      	ldr	r3, [pc, #256]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ee      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aca:	4b3c      	ldr	r3, [pc, #240]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4a3b      	ldr	r2, [pc, #236]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8087 	beq.w	8003bee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae0:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d061      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d146      	bne.n	8003b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b33      	ldr	r3, [pc, #204]	@ (8003bc4 <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fe fafd 	bl	80020f8 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fe faf9 	bl	80020f8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e06d      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b14:	4b29      	ldr	r3, [pc, #164]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b2a:	4b24      	ldr	r3, [pc, #144]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4921      	ldr	r1, [pc, #132]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a19      	ldr	r1, [r3, #32]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	491b      	ldr	r1, [pc, #108]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fe facd 	bl	80020f8 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fe fac9 	bl	80020f8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e03d      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b74:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x46a>
 8003b80:	e035      	b.n	8003bee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fe fab6 	bl	80020f8 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fe fab2 	bl	80020f8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e026      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba2:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x498>
 8003bae:	e01e      	b.n	8003bee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e019      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_OscConfig+0x500>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000

08003bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0d0      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b6a      	ldr	r3, [pc, #424]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d910      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b67      	ldr	r3, [pc, #412]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 0207 	bic.w	r2, r3, #7
 8003c26:	4965      	ldr	r1, [pc, #404]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b63      	ldr	r3, [pc, #396]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0b8      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c58:	4b59      	ldr	r3, [pc, #356]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a58      	ldr	r2, [pc, #352]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c70:	4b53      	ldr	r3, [pc, #332]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a52      	ldr	r2, [pc, #328]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b50      	ldr	r3, [pc, #320]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	494d      	ldr	r1, [pc, #308]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d040      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b47      	ldr	r3, [pc, #284]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d115      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e07f      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	4b41      	ldr	r3, [pc, #260]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e073      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cca:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e06b      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b39      	ldr	r3, [pc, #228]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4936      	ldr	r1, [pc, #216]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cec:	f7fe fa04 	bl	80020f8 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7fe fa00 	bl	80020f8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e053      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d210      	bcs.n	8003d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b24      	ldr	r3, [pc, #144]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 0207 	bic.w	r2, r3, #7
 8003d32:	4922      	ldr	r1, [pc, #136]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b20      	ldr	r3, [pc, #128]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e032      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d58:	4b19      	ldr	r3, [pc, #100]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4916      	ldr	r1, [pc, #88]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d76:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	490e      	ldr	r1, [pc, #56]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d8a:	f000 f821 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	490a      	ldr	r1, [pc, #40]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9c:	5ccb      	ldrb	r3, [r1, r3]
 8003d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003da2:	4a09      	ldr	r2, [pc, #36]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8003da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003da6:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <HAL_RCC_ClockConfig+0x1d0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe f962 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40022000 	.word	0x40022000
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	08008acc 	.word	0x08008acc
 8003dc8:	20000168 	.word	0x20000168
 8003dcc:	2000016c 	.word	0x2000016c

08003dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dea:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d002      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x30>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x36>
 8003dfe:	e027      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e00:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e02:	613b      	str	r3, [r7, #16]
      break;
 8003e04:	e027      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	4a17      	ldr	r2, [pc, #92]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e10:	5cd3      	ldrb	r3, [r2, r3]
 8003e12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d010      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	0c5b      	lsrs	r3, r3, #17
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	4a11      	ldr	r2, [pc, #68]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a0d      	ldr	r2, [pc, #52]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e32:	fb03 f202 	mul.w	r2, r3, r2
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e004      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a0c      	ldr	r2, [pc, #48]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e44:	fb02 f303 	mul.w	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	613b      	str	r3, [r7, #16]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e52:	613b      	str	r3, [r7, #16]
      break;
 8003e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e56:	693b      	ldr	r3, [r7, #16]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	007a1200 	.word	0x007a1200
 8003e6c:	08008ae4 	.word	0x08008ae4
 8003e70:	08008af4 	.word	0x08008af4
 8003e74:	003d0900 	.word	0x003d0900

08003e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b02      	ldr	r3, [pc, #8]	@ (8003e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	20000168 	.word	0x20000168

08003e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e90:	f7ff fff2 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4903      	ldr	r1, [pc, #12]	@ (8003eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	08008adc 	.word	0x08008adc

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eb8:	f7ff ffde 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	0adb      	lsrs	r3, r3, #11
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	@ (8003ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	08008adc 	.word	0x08008adc

08003edc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <RCC_Delay+0x34>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f14 <RCC_Delay+0x38>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0a5b      	lsrs	r3, r3, #9
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ef8:	bf00      	nop
  }
  while (Delay --);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	60fa      	str	r2, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f9      	bne.n	8003ef8 <RCC_Delay+0x1c>
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	20000168 	.word	0x20000168
 8003f14:	10624dd3 	.word	0x10624dd3

08003f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d07d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f38:	4b4f      	ldr	r3, [pc, #316]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	4b4c      	ldr	r3, [pc, #304]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	4a4b      	ldr	r2, [pc, #300]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	61d3      	str	r3, [r2, #28]
 8003f50:	4b49      	ldr	r3, [pc, #292]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	4b46      	ldr	r3, [pc, #280]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d118      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6c:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a42      	ldr	r2, [pc, #264]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f78:	f7fe f8be 	bl	80020f8 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	e008      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f80:	f7fe f8ba 	bl	80020f8 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	@ 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e06d      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b3a      	ldr	r3, [pc, #232]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f9e:	4b36      	ldr	r3, [pc, #216]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02e      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d027      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fd2:	4a29      	ldr	r2, [pc, #164]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d014      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fe f889 	bl	80020f8 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fe f885 	bl	80020f8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e036      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	4b1d      	ldr	r3, [pc, #116]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ee      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400c:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4917      	ldr	r1, [pc, #92]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	4313      	orrs	r3, r2
 800401c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004024:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	4a13      	ldr	r2, [pc, #76]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800402e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800403c:	4b0e      	ldr	r3, [pc, #56]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	490b      	ldr	r1, [pc, #44]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800405a:	4b07      	ldr	r3, [pc, #28]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4904      	ldr	r1, [pc, #16]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004068:	4313      	orrs	r3, r2
 800406a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	40007000 	.word	0x40007000
 8004080:	42420440 	.word	0x42420440

08004084 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	2300      	movs	r3, #0
 800409e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	f200 808a 	bhi.w	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d045      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d075      	beq.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80040ba:	e082      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80040bc:	4b46      	ldr	r3, [pc, #280]	@ (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040c2:	4b45      	ldr	r3, [pc, #276]	@ (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d07b      	beq.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0c9b      	lsrs	r3, r3, #18
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	4a41      	ldr	r2, [pc, #260]	@ (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80040d8:	5cd3      	ldrb	r3, [r2, r3]
 80040da:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d015      	beq.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040e6:	4b3c      	ldr	r3, [pc, #240]	@ (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	0c5b      	lsrs	r3, r3, #17
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	4a3b      	ldr	r2, [pc, #236]	@ (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80040f2:	5cd3      	ldrb	r3, [r2, r3]
 80040f4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004100:	4a38      	ldr	r2, [pc, #224]	@ (80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fbb2 f2f3 	udiv	r2, r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e004      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4a34      	ldr	r2, [pc, #208]	@ (80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800411c:	4b2e      	ldr	r3, [pc, #184]	@ (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004128:	d102      	bne.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	61bb      	str	r3, [r7, #24]
      break;
 800412e:	e04a      	b.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4a2d      	ldr	r2, [pc, #180]	@ (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
      break;
 800413e:	e042      	b.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004140:	4b25      	ldr	r3, [pc, #148]	@ (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004150:	d108      	bne.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800415c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	e01f      	b.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800416e:	d109      	bne.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004170:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800417c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	e00f      	b.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800418e:	d11c      	bne.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004190:	4b11      	ldr	r3, [pc, #68]	@ (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d016      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800419c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80041a0:	61bb      	str	r3, [r7, #24]
      break;
 80041a2:	e012      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041a4:	e011      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041a6:	f7ff fe85 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 80041aa:	4602      	mov	r2, r0
 80041ac:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	0b9b      	lsrs	r3, r3, #14
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	61bb      	str	r3, [r7, #24]
      break;
 80041c0:	e004      	b.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041ca:	bf00      	nop
    }
  }
  return (frequency);
 80041cc:	69bb      	ldr	r3, [r7, #24]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	08008af8 	.word	0x08008af8
 80041e0:	08008b08 	.word	0x08008b08
 80041e4:	007a1200 	.word	0x007a1200
 80041e8:	003d0900 	.word	0x003d0900
 80041ec:	aaaaaaab 	.word	0xaaaaaaab

080041f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e041      	b.n	8004286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd fcd6 	bl	8001bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 fab2 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e041      	b.n	8004324 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f839 	bl	800432c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f000 fa63 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr
	...

08004340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_TIM_PWM_Start+0x24>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e022      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b04      	cmp	r3, #4
 8004368:	d109      	bne.n	800437e <HAL_TIM_PWM_Start+0x3e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	bf14      	ite	ne
 8004376:	2301      	movne	r3, #1
 8004378:	2300      	moveq	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	e015      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d109      	bne.n	8004398 <HAL_TIM_PWM_Start+0x58>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e008      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e05e      	b.n	8004470 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_PWM_Start+0x82>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c0:	e013      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_PWM_Start+0x92>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d0:	e00b      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start+0xa2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e0:	e003      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2201      	movs	r2, #1
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fc5c 	bl	8004cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <HAL_TIM_PWM_Start+0x138>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d107      	bne.n	8004412 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a18      	ldr	r2, [pc, #96]	@ (8004478 <HAL_TIM_PWM_Start+0x138>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00e      	beq.n	800443a <HAL_TIM_PWM_Start+0xfa>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004424:	d009      	beq.n	800443a <HAL_TIM_PWM_Start+0xfa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a14      	ldr	r2, [pc, #80]	@ (800447c <HAL_TIM_PWM_Start+0x13c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <HAL_TIM_PWM_Start+0xfa>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a12      	ldr	r2, [pc, #72]	@ (8004480 <HAL_TIM_PWM_Start+0x140>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b06      	cmp	r3, #6
 800444a:	d010      	beq.n	800446e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	e007      	b.n	800446e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800

08004484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800449e:	2302      	movs	r3, #2
 80044a0:	e0ae      	b.n	8004600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	f200 809f 	bhi.w	80045f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044b2:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	080045f1 	.word	0x080045f1
 80044c0:	080045f1 	.word	0x080045f1
 80044c4:	080045f1 	.word	0x080045f1
 80044c8:	0800452d 	.word	0x0800452d
 80044cc:	080045f1 	.word	0x080045f1
 80044d0:	080045f1 	.word	0x080045f1
 80044d4:	080045f1 	.word	0x080045f1
 80044d8:	0800456f 	.word	0x0800456f
 80044dc:	080045f1 	.word	0x080045f1
 80044e0:	080045f1 	.word	0x080045f1
 80044e4:	080045f1 	.word	0x080045f1
 80044e8:	080045af 	.word	0x080045af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f9be 	bl	8004874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0208 	orr.w	r2, r2, #8
 8004506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0204 	bic.w	r2, r2, #4
 8004516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	619a      	str	r2, [r3, #24]
      break;
 800452a:	e064      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fa04 	bl	8004940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6999      	ldr	r1, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	021a      	lsls	r2, r3, #8
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	619a      	str	r2, [r3, #24]
      break;
 800456c:	e043      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa4d 	bl	8004a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0208 	orr.w	r2, r2, #8
 8004588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0204 	bic.w	r2, r2, #4
 8004598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69d9      	ldr	r1, [r3, #28]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	61da      	str	r2, [r3, #28]
      break;
 80045ac:	e023      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fa97 	bl	8004ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69d9      	ldr	r1, [r3, #28]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	021a      	lsls	r2, r3, #8
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	61da      	str	r2, [r3, #28]
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	75fb      	strb	r3, [r7, #23]
      break;
 80045f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIM_ConfigClockSource+0x1c>
 8004620:	2302      	movs	r3, #2
 8004622:	e0b4      	b.n	800478e <HAL_TIM_ConfigClockSource+0x186>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800464a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800465c:	d03e      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0xd4>
 800465e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004662:	f200 8087 	bhi.w	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466a:	f000 8086 	beq.w	800477a <HAL_TIM_ConfigClockSource+0x172>
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004672:	d87f      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b70      	cmp	r3, #112	@ 0x70
 8004676:	d01a      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0xa6>
 8004678:	2b70      	cmp	r3, #112	@ 0x70
 800467a:	d87b      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b60      	cmp	r3, #96	@ 0x60
 800467e:	d050      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x11a>
 8004680:	2b60      	cmp	r3, #96	@ 0x60
 8004682:	d877      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b50      	cmp	r3, #80	@ 0x50
 8004686:	d03c      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0xfa>
 8004688:	2b50      	cmp	r3, #80	@ 0x50
 800468a:	d873      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b40      	cmp	r3, #64	@ 0x40
 800468e:	d058      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x13a>
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	d86f      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b30      	cmp	r3, #48	@ 0x30
 8004696:	d064      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x15a>
 8004698:	2b30      	cmp	r3, #48	@ 0x30
 800469a:	d86b      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b20      	cmp	r3, #32
 800469e:	d060      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d867      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d05c      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x15a>
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d05a      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x15a>
 80046ac:	e062      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046be:	f000 fad8 	bl	8004c72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	609a      	str	r2, [r3, #8]
      break;
 80046da:	e04f      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046ec:	f000 fac1 	bl	8004c72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046fe:	609a      	str	r2, [r3, #8]
      break;
 8004700:	e03c      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800470e:	461a      	mov	r2, r3
 8004710:	f000 fa38 	bl	8004b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2150      	movs	r1, #80	@ 0x50
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fa8f 	bl	8004c3e <TIM_ITRx_SetConfig>
      break;
 8004720:	e02c      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800472e:	461a      	mov	r2, r3
 8004730:	f000 fa56 	bl	8004be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2160      	movs	r1, #96	@ 0x60
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fa7f 	bl	8004c3e <TIM_ITRx_SetConfig>
      break;
 8004740:	e01c      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800474e:	461a      	mov	r2, r3
 8004750:	f000 fa18 	bl	8004b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2140      	movs	r1, #64	@ 0x40
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fa6f 	bl	8004c3e <TIM_ITRx_SetConfig>
      break;
 8004760:	e00c      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f000 fa66 	bl	8004c3e <TIM_ITRx_SetConfig>
      break;
 8004772:	e003      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      break;
 8004778:	e000      	b.n	800477c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800477a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004868 <TIM_Base_SetConfig+0xd0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <TIM_Base_SetConfig+0x30>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b6:	d007      	beq.n	80047c8 <TIM_Base_SetConfig+0x30>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	@ (800486c <TIM_Base_SetConfig+0xd4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_Base_SetConfig+0x30>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004870 <TIM_Base_SetConfig+0xd8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d108      	bne.n	80047da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a22      	ldr	r2, [pc, #136]	@ (8004868 <TIM_Base_SetConfig+0xd0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00b      	beq.n	80047fa <TIM_Base_SetConfig+0x62>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e8:	d007      	beq.n	80047fa <TIM_Base_SetConfig+0x62>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	@ (800486c <TIM_Base_SetConfig+0xd4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <TIM_Base_SetConfig+0x62>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004870 <TIM_Base_SetConfig+0xd8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d108      	bne.n	800480c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a0d      	ldr	r2, [pc, #52]	@ (8004868 <TIM_Base_SetConfig+0xd0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d103      	bne.n	8004840 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f023 0201 	bic.w	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	611a      	str	r2, [r3, #16]
  }
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800

08004874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f023 0201 	bic.w	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 0302 	bic.w	r3, r3, #2
 80048bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a1c      	ldr	r2, [pc, #112]	@ (800493c <TIM_OC1_SetConfig+0xc8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d10c      	bne.n	80048ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0308 	bic.w	r3, r3, #8
 80048d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a13      	ldr	r2, [pc, #76]	@ (800493c <TIM_OC1_SetConfig+0xc8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d111      	bne.n	8004916 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40012c00 	.word	0x40012c00

08004940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f023 0210 	bic.w	r2, r3, #16
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800496e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f023 0320 	bic.w	r3, r3, #32
 800498a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <TIM_OC2_SetConfig+0xd0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10d      	bne.n	80049bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a14      	ldr	r2, [pc, #80]	@ (8004a10 <TIM_OC2_SetConfig+0xd0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d113      	bne.n	80049ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	40012c00 	.word	0x40012c00

08004a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae4 <TIM_OC3_SetConfig+0xd0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d10d      	bne.n	8004a8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a14      	ldr	r2, [pc, #80]	@ (8004ae4 <TIM_OC3_SetConfig+0xd0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d113      	bne.n	8004abe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40012c00 	.word	0x40012c00

08004ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	031b      	lsls	r3, r3, #12
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a0f      	ldr	r2, [pc, #60]	@ (8004b80 <TIM_OC4_SetConfig+0x98>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d109      	bne.n	8004b5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	019b      	lsls	r3, r3, #6
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	40012c00 	.word	0x40012c00

08004b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f023 030a 	bic.w	r3, r3, #10
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f023 0210 	bic.w	r2, r3, #16
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	031b      	lsls	r3, r3, #12
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	621a      	str	r2, [r3, #32]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr

08004c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f043 0307 	orr.w	r3, r3, #7
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	609a      	str	r2, [r3, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b087      	sub	sp, #28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	021a      	lsls	r2, r3, #8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	609a      	str	r2, [r3, #8]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a1a      	ldr	r2, [r3, #32]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e046      	b.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a16      	ldr	r2, [pc, #88]	@ (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5c:	d009      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a12      	ldr	r2, [pc, #72]	@ (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d004      	beq.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a10      	ldr	r2, [pc, #64]	@ (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10c      	bne.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800

08004db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e042      	b.n	8004e4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc ff54 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2224      	movs	r2, #36	@ 0x24
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fd63 	bl	80058c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	@ 0x28
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d175      	bne.n	8004f60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Transmit+0x2c>
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e06e      	b.n	8004f62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2221      	movs	r2, #33	@ 0x21
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e92:	f7fd f931 	bl	80020f8 <HAL_GetTick>
 8004e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	88fa      	ldrh	r2, [r7, #6]
 8004ea2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eac:	d108      	bne.n	8004ec0 <HAL_UART_Transmit+0x6c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	e003      	b.n	8004ec8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ec8:	e02e      	b.n	8004f28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2180      	movs	r1, #128	@ 0x80
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fb01 	bl	80054dc <UART_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e03a      	b.n	8004f62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	3302      	adds	r3, #2
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e007      	b.n	8004f1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1cb      	bne.n	8004eca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2140      	movs	r1, #64	@ 0x40
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 facd 	bl	80054dc <UART_WaitOnFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e006      	b.n	8004f62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e000      	b.n	8004f62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x66>
 8004fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fbbc 	bl	8005748 <UART_Receive_IT>
      return;
 8004fd0:	e25b      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80de 	beq.w	8005198 <HAL_UART_IRQHandler+0x22c>
 8004fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80d1 	beq.w	8005198 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_UART_IRQHandler+0xae>
 8005002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
 8005026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005036:	f043 0202 	orr.w	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0xf6>
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <HAL_UART_IRQHandler+0x126>
 800506e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d105      	bne.n	8005086 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800507a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	f043 0208 	orr.w	r2, r3, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 81f2 	beq.w	8005480 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_UART_IRQHandler+0x14e>
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb47 	bl	8005748 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <HAL_UART_IRQHandler+0x17a>
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04f      	beq.n	8005186 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa51 	bl	800558e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d041      	beq.n	800517e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005126:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800512a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800513e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1d9      	bne.n	80050fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d013      	beq.n	8005176 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	4a7e      	ldr	r2, [pc, #504]	@ (800534c <HAL_UART_IRQHandler+0x3e0>)
 8005154:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd ff4a 	bl	8002ff4 <HAL_DMA_Abort_IT>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005170:	4610      	mov	r0, r2
 8005172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e00e      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f99c 	bl	80054b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00a      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f998 	bl	80054b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e006      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f994 	bl	80054b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005192:	e175      	b.n	8005480 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	bf00      	nop
    return;
 8005196:	e173      	b.n	8005480 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519c:	2b01      	cmp	r3, #1
 800519e:	f040 814f 	bne.w	8005440 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8148 	beq.w	8005440 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8141 	beq.w	8005440 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80b6 	beq.w	8005350 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8145 	beq.w	8005484 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005202:	429a      	cmp	r2, r3
 8005204:	f080 813e 	bcs.w	8005484 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800520e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b20      	cmp	r3, #32
 8005218:	f000 8088 	beq.w	800532c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005232:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005236:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800523a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005248:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800524c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005254:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005260:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1d9      	bne.n	800521c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3314      	adds	r3, #20
 8005288:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800528c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005290:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005294:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800529e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e1      	bne.n	8005268 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3314      	adds	r3, #20
 80052c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e3      	bne.n	80052a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052fc:	f023 0310 	bic.w	r3, r3, #16
 8005300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800530e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005310:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005314:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800531c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e3      	bne.n	80052ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fe28 	bl	8002f7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800533a:	b29b      	uxth	r3, r3
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	b29b      	uxth	r3, r3
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8bf 	bl	80054c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005348:	e09c      	b.n	8005484 <HAL_UART_IRQHandler+0x518>
 800534a:	bf00      	nop
 800534c:	08005653 	.word	0x08005653
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005358:	b29b      	uxth	r3, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 808e 	beq.w	8005488 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800536c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8089 	beq.w	8005488 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800538c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800539a:	647a      	str	r2, [r7, #68]	@ 0x44
 800539c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e3      	bne.n	8005376 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	623b      	str	r3, [r7, #32]
   return(result);
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80053d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	60fb      	str	r3, [r7, #12]
   return(result);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0310 	bic.w	r3, r3, #16
 800540a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005418:	61fa      	str	r2, [r7, #28]
 800541a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	617b      	str	r3, [r7, #20]
   return(result);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e3      	bne.n	80053f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005432:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f844 	bl	80054c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543e:	e023      	b.n	8005488 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <HAL_UART_IRQHandler+0x4f4>
 800544c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f90e 	bl	800567a <UART_Transmit_IT>
    return;
 800545e:	e014      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <HAL_UART_IRQHandler+0x51e>
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f94d 	bl	8005718 <UART_EndTransmit_IT>
    return;
 800547e:	e004      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
    return;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
      return;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
      return;
 8005488:	bf00      	nop
  }
}
 800548a:	37e8      	adds	r7, #232	@ 0xe8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	460b      	mov	r3, r1
 80054d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ec:	e03b      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d037      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f6:	f7fc fdff 	bl	80020f8 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	6a3a      	ldr	r2, [r7, #32]
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <UART_WaitOnFlagUntilTimeout+0x30>
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e03a      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d023      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0x8a>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b80      	cmp	r3, #128	@ 0x80
 8005522:	d020      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b40      	cmp	r3, #64	@ 0x40
 8005528:	d01d      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b08      	cmp	r3, #8
 8005536:	d116      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f81d 	bl	800558e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2208      	movs	r2, #8
 8005558:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e00f      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	429a      	cmp	r2, r3
 8005582:	d0b4      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800558e:	b480      	push	{r7}
 8005590:	b095      	sub	sp, #84	@ 0x54
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80055b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3314      	adds	r3, #20
 80055d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3314      	adds	r3, #20
 80055e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	2b01      	cmp	r3, #1
 8005604:	d119      	bne.n	800563a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	60bb      	str	r3, [r7, #8]
   return(result);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 0310 	bic.w	r3, r3, #16
 800561c:	647b      	str	r3, [r7, #68]	@ 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005626:	61ba      	str	r2, [r7, #24]
 8005628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6979      	ldr	r1, [r7, #20]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	613b      	str	r3, [r7, #16]
   return(result);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005648:	bf00      	nop
 800564a:	3754      	adds	r7, #84	@ 0x54
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff ff21 	bl	80054b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b21      	cmp	r3, #33	@ 0x21
 800568c:	d13e      	bne.n	800570c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005696:	d114      	bne.n	80056c2 <UART_Transmit_IT+0x48>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d110      	bne.n	80056c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	1c9a      	adds	r2, r3, #2
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	621a      	str	r2, [r3, #32]
 80056c0:	e008      	b.n	80056d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	1c59      	adds	r1, r3, #1
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6211      	str	r1, [r2, #32]
 80056cc:	781a      	ldrb	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4619      	mov	r1, r3
 80056e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10f      	bne.n	8005708 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005706:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800572e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff fea9 	bl	8005490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08c      	sub	sp, #48	@ 0x30
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b22      	cmp	r3, #34	@ 0x22
 800575a:	f040 80ae 	bne.w	80058ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005766:	d117      	bne.n	8005798 <UART_Receive_IT+0x50>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d113      	bne.n	8005798 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005778:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005786:	b29a      	uxth	r2, r3
 8005788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	1c9a      	adds	r2, r3, #2
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	629a      	str	r2, [r3, #40]	@ 0x28
 8005796:	e026      	b.n	80057e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057aa:	d007      	beq.n	80057bc <UART_Receive_IT+0x74>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <UART_Receive_IT+0x82>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	e008      	b.n	80057dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4619      	mov	r1, r3
 80057f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d15d      	bne.n	80058b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0220 	bic.w	r2, r2, #32
 8005808:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583c:	2b01      	cmp	r3, #1
 800583e:	d135      	bne.n	80058ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	613b      	str	r3, [r7, #16]
   return(result);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f023 0310 	bic.w	r3, r3, #16
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005866:	623a      	str	r2, [r7, #32]
 8005868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	69f9      	ldr	r1, [r7, #28]
 800586c:	6a3a      	ldr	r2, [r7, #32]
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	61bb      	str	r3, [r7, #24]
   return(result);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b10      	cmp	r3, #16
 8005886:	d10a      	bne.n	800589e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fe0e 	bl	80054c6 <HAL_UARTEx_RxEventCallback>
 80058aa:	e002      	b.n	80058b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fdf8 	bl	80054a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e002      	b.n	80058bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058ba:	2302      	movs	r3, #2
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3730      	adds	r7, #48	@ 0x30
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80058fe:	f023 030c 	bic.w	r3, r3, #12
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	430b      	orrs	r3, r1
 800590a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2c      	ldr	r2, [pc, #176]	@ (80059d8 <UART_SetConfig+0x114>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d103      	bne.n	8005934 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800592c:	f7fe fac2 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	e002      	b.n	800593a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005934:	f7fe faaa 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8005938:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009a      	lsls	r2, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	4a22      	ldr	r2, [pc, #136]	@ (80059dc <UART_SetConfig+0x118>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	0119      	lsls	r1, r3, #4
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009a      	lsls	r2, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005970:	4b1a      	ldr	r3, [pc, #104]	@ (80059dc <UART_SetConfig+0x118>)
 8005972:	fba3 0302 	umull	r0, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2064      	movs	r0, #100	@ 0x64
 800597a:	fb00 f303 	mul.w	r3, r0, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	3332      	adds	r3, #50	@ 0x32
 8005984:	4a15      	ldr	r2, [pc, #84]	@ (80059dc <UART_SetConfig+0x118>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005990:	4419      	add	r1, r3
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009a      	lsls	r2, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a8:	4b0c      	ldr	r3, [pc, #48]	@ (80059dc <UART_SetConfig+0x118>)
 80059aa:	fba3 0302 	umull	r0, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2064      	movs	r0, #100	@ 0x64
 80059b2:	fb00 f303 	mul.w	r3, r0, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	@ 0x32
 80059bc:	4a07      	ldr	r2, [pc, #28]	@ (80059dc <UART_SetConfig+0x118>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	440a      	add	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40013800 	.word	0x40013800
 80059dc:	51eb851f 	.word	0x51eb851f

080059e0 <__cvt>:
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e6:	461d      	mov	r5, r3
 80059e8:	bfbb      	ittet	lt
 80059ea:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80059ee:	461d      	movlt	r5, r3
 80059f0:	2300      	movge	r3, #0
 80059f2:	232d      	movlt	r3, #45	@ 0x2d
 80059f4:	b088      	sub	sp, #32
 80059f6:	4614      	mov	r4, r2
 80059f8:	bfb8      	it	lt
 80059fa:	4614      	movlt	r4, r2
 80059fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80059fe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a00:	7013      	strb	r3, [r2, #0]
 8005a02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a04:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005a08:	f023 0820 	bic.w	r8, r3, #32
 8005a0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a10:	d005      	beq.n	8005a1e <__cvt+0x3e>
 8005a12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a16:	d100      	bne.n	8005a1a <__cvt+0x3a>
 8005a18:	3601      	adds	r6, #1
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e000      	b.n	8005a20 <__cvt+0x40>
 8005a1e:	2303      	movs	r3, #3
 8005a20:	aa07      	add	r2, sp, #28
 8005a22:	9204      	str	r2, [sp, #16]
 8005a24:	aa06      	add	r2, sp, #24
 8005a26:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a2a:	e9cd 3600 	strd	r3, r6, [sp]
 8005a2e:	4622      	mov	r2, r4
 8005a30:	462b      	mov	r3, r5
 8005a32:	f000 fe6d 	bl	8006710 <_dtoa_r>
 8005a36:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a3a:	4607      	mov	r7, r0
 8005a3c:	d119      	bne.n	8005a72 <__cvt+0x92>
 8005a3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a40:	07db      	lsls	r3, r3, #31
 8005a42:	d50e      	bpl.n	8005a62 <__cvt+0x82>
 8005a44:	eb00 0906 	add.w	r9, r0, r6
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa ffaa 	bl	80009a8 <__aeabi_dcmpeq>
 8005a54:	b108      	cbz	r0, 8005a5a <__cvt+0x7a>
 8005a56:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a5a:	2230      	movs	r2, #48	@ 0x30
 8005a5c:	9b07      	ldr	r3, [sp, #28]
 8005a5e:	454b      	cmp	r3, r9
 8005a60:	d31e      	bcc.n	8005aa0 <__cvt+0xc0>
 8005a62:	4638      	mov	r0, r7
 8005a64:	9b07      	ldr	r3, [sp, #28]
 8005a66:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005a68:	1bdb      	subs	r3, r3, r7
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	b008      	add	sp, #32
 8005a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a76:	eb00 0906 	add.w	r9, r0, r6
 8005a7a:	d1e5      	bne.n	8005a48 <__cvt+0x68>
 8005a7c:	7803      	ldrb	r3, [r0, #0]
 8005a7e:	2b30      	cmp	r3, #48	@ 0x30
 8005a80:	d10a      	bne.n	8005a98 <__cvt+0xb8>
 8005a82:	2200      	movs	r2, #0
 8005a84:	2300      	movs	r3, #0
 8005a86:	4620      	mov	r0, r4
 8005a88:	4629      	mov	r1, r5
 8005a8a:	f7fa ff8d 	bl	80009a8 <__aeabi_dcmpeq>
 8005a8e:	b918      	cbnz	r0, 8005a98 <__cvt+0xb8>
 8005a90:	f1c6 0601 	rsb	r6, r6, #1
 8005a94:	f8ca 6000 	str.w	r6, [sl]
 8005a98:	f8da 3000 	ldr.w	r3, [sl]
 8005a9c:	4499      	add	r9, r3
 8005a9e:	e7d3      	b.n	8005a48 <__cvt+0x68>
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	9107      	str	r1, [sp, #28]
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e7d9      	b.n	8005a5c <__cvt+0x7c>

08005aa8 <__exponent>:
 8005aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aaa:	2900      	cmp	r1, #0
 8005aac:	bfb6      	itet	lt
 8005aae:	232d      	movlt	r3, #45	@ 0x2d
 8005ab0:	232b      	movge	r3, #43	@ 0x2b
 8005ab2:	4249      	neglt	r1, r1
 8005ab4:	2909      	cmp	r1, #9
 8005ab6:	7002      	strb	r2, [r0, #0]
 8005ab8:	7043      	strb	r3, [r0, #1]
 8005aba:	dd29      	ble.n	8005b10 <__exponent+0x68>
 8005abc:	f10d 0307 	add.w	r3, sp, #7
 8005ac0:	461d      	mov	r5, r3
 8005ac2:	270a      	movs	r7, #10
 8005ac4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ac8:	461a      	mov	r2, r3
 8005aca:	fb07 1416 	mls	r4, r7, r6, r1
 8005ace:	3430      	adds	r4, #48	@ 0x30
 8005ad0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	2c63      	cmp	r4, #99	@ 0x63
 8005ad8:	4631      	mov	r1, r6
 8005ada:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ade:	dcf1      	bgt.n	8005ac4 <__exponent+0x1c>
 8005ae0:	3130      	adds	r1, #48	@ 0x30
 8005ae2:	1e94      	subs	r4, r2, #2
 8005ae4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ae8:	4623      	mov	r3, r4
 8005aea:	1c41      	adds	r1, r0, #1
 8005aec:	42ab      	cmp	r3, r5
 8005aee:	d30a      	bcc.n	8005b06 <__exponent+0x5e>
 8005af0:	f10d 0309 	add.w	r3, sp, #9
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	42ac      	cmp	r4, r5
 8005af8:	bf88      	it	hi
 8005afa:	2300      	movhi	r3, #0
 8005afc:	3302      	adds	r3, #2
 8005afe:	4403      	add	r3, r0
 8005b00:	1a18      	subs	r0, r3, r0
 8005b02:	b003      	add	sp, #12
 8005b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b06:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b0a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b0e:	e7ed      	b.n	8005aec <__exponent+0x44>
 8005b10:	2330      	movs	r3, #48	@ 0x30
 8005b12:	3130      	adds	r1, #48	@ 0x30
 8005b14:	7083      	strb	r3, [r0, #2]
 8005b16:	70c1      	strb	r1, [r0, #3]
 8005b18:	1d03      	adds	r3, r0, #4
 8005b1a:	e7f1      	b.n	8005b00 <__exponent+0x58>

08005b1c <_printf_float>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	b091      	sub	sp, #68	@ 0x44
 8005b22:	460c      	mov	r4, r1
 8005b24:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005b28:	4616      	mov	r6, r2
 8005b2a:	461f      	mov	r7, r3
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	f000 fce1 	bl	80064f4 <_localeconv_r>
 8005b32:	6803      	ldr	r3, [r0, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	9308      	str	r3, [sp, #32]
 8005b38:	f7fa fb0a 	bl	8000150 <strlen>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b40:	f8d8 3000 	ldr.w	r3, [r8]
 8005b44:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b46:	3307      	adds	r3, #7
 8005b48:	f023 0307 	bic.w	r3, r3, #7
 8005b4c:	f103 0208 	add.w	r2, r3, #8
 8005b50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b54:	f8d4 b000 	ldr.w	fp, [r4]
 8005b58:	f8c8 2000 	str.w	r2, [r8]
 8005b5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b66:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b76:	4b9c      	ldr	r3, [pc, #624]	@ (8005de8 <_printf_float+0x2cc>)
 8005b78:	f7fa ff48 	bl	8000a0c <__aeabi_dcmpun>
 8005b7c:	bb70      	cbnz	r0, 8005bdc <_printf_float+0xc0>
 8005b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295
 8005b86:	4b98      	ldr	r3, [pc, #608]	@ (8005de8 <_printf_float+0x2cc>)
 8005b88:	f7fa ff22 	bl	80009d0 <__aeabi_dcmple>
 8005b8c:	bb30      	cbnz	r0, 8005bdc <_printf_float+0xc0>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2300      	movs	r3, #0
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	f7fa ff11 	bl	80009bc <__aeabi_dcmplt>
 8005b9a:	b110      	cbz	r0, 8005ba2 <_printf_float+0x86>
 8005b9c:	232d      	movs	r3, #45	@ 0x2d
 8005b9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba2:	4a92      	ldr	r2, [pc, #584]	@ (8005dec <_printf_float+0x2d0>)
 8005ba4:	4b92      	ldr	r3, [pc, #584]	@ (8005df0 <_printf_float+0x2d4>)
 8005ba6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005baa:	bf94      	ite	ls
 8005bac:	4690      	movls	r8, r2
 8005bae:	4698      	movhi	r8, r3
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	f04f 0900 	mov.w	r9, #0
 8005bb6:	6123      	str	r3, [r4, #16]
 8005bb8:	f02b 0304 	bic.w	r3, fp, #4
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	4633      	mov	r3, r6
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	9700      	str	r7, [sp, #0]
 8005bc6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005bc8:	f000 f9d4 	bl	8005f74 <_printf_common>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f040 8090 	bne.w	8005cf2 <_printf_float+0x1d6>
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	b011      	add	sp, #68	@ 0x44
 8005bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bdc:	4642      	mov	r2, r8
 8005bde:	464b      	mov	r3, r9
 8005be0:	4640      	mov	r0, r8
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa ff12 	bl	8000a0c <__aeabi_dcmpun>
 8005be8:	b148      	cbz	r0, 8005bfe <_printf_float+0xe2>
 8005bea:	464b      	mov	r3, r9
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bfb8      	it	lt
 8005bf0:	232d      	movlt	r3, #45	@ 0x2d
 8005bf2:	4a80      	ldr	r2, [pc, #512]	@ (8005df4 <_printf_float+0x2d8>)
 8005bf4:	bfb8      	it	lt
 8005bf6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8005df8 <_printf_float+0x2dc>)
 8005bfc:	e7d3      	b.n	8005ba6 <_printf_float+0x8a>
 8005bfe:	6863      	ldr	r3, [r4, #4]
 8005c00:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	d13f      	bne.n	8005c88 <_printf_float+0x16c>
 8005c08:	2306      	movs	r3, #6
 8005c0a:	6063      	str	r3, [r4, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	9206      	str	r2, [sp, #24]
 8005c16:	aa0e      	add	r2, sp, #56	@ 0x38
 8005c18:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005c1c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005c1e:	9203      	str	r2, [sp, #12]
 8005c20:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005c24:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c28:	6863      	ldr	r3, [r4, #4]
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	464b      	mov	r3, r9
 8005c32:	910a      	str	r1, [sp, #40]	@ 0x28
 8005c34:	f7ff fed4 	bl	80059e0 <__cvt>
 8005c38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c3a:	4680      	mov	r8, r0
 8005c3c:	2947      	cmp	r1, #71	@ 0x47
 8005c3e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005c40:	d128      	bne.n	8005c94 <_printf_float+0x178>
 8005c42:	1cc8      	adds	r0, r1, #3
 8005c44:	db02      	blt.n	8005c4c <_printf_float+0x130>
 8005c46:	6863      	ldr	r3, [r4, #4]
 8005c48:	4299      	cmp	r1, r3
 8005c4a:	dd40      	ble.n	8005cce <_printf_float+0x1b2>
 8005c4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c50:	fa5f fa8a 	uxtb.w	sl, sl
 8005c54:	4652      	mov	r2, sl
 8005c56:	3901      	subs	r1, #1
 8005c58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c5c:	910d      	str	r1, [sp, #52]	@ 0x34
 8005c5e:	f7ff ff23 	bl	8005aa8 <__exponent>
 8005c62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c64:	4681      	mov	r9, r0
 8005c66:	1813      	adds	r3, r2, r0
 8005c68:	2a01      	cmp	r2, #1
 8005c6a:	6123      	str	r3, [r4, #16]
 8005c6c:	dc02      	bgt.n	8005c74 <_printf_float+0x158>
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	07d2      	lsls	r2, r2, #31
 8005c72:	d501      	bpl.n	8005c78 <_printf_float+0x15c>
 8005c74:	3301      	adds	r3, #1
 8005c76:	6123      	str	r3, [r4, #16]
 8005c78:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d09e      	beq.n	8005bbe <_printf_float+0xa2>
 8005c80:	232d      	movs	r3, #45	@ 0x2d
 8005c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c86:	e79a      	b.n	8005bbe <_printf_float+0xa2>
 8005c88:	2947      	cmp	r1, #71	@ 0x47
 8005c8a:	d1bf      	bne.n	8005c0c <_printf_float+0xf0>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1bd      	bne.n	8005c0c <_printf_float+0xf0>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e7ba      	b.n	8005c0a <_printf_float+0xee>
 8005c94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c98:	d9dc      	bls.n	8005c54 <_printf_float+0x138>
 8005c9a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c9e:	d118      	bne.n	8005cd2 <_printf_float+0x1b6>
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	dd0b      	ble.n	8005cbe <_printf_float+0x1a2>
 8005ca6:	6121      	str	r1, [r4, #16]
 8005ca8:	b913      	cbnz	r3, 8005cb0 <_printf_float+0x194>
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	07d0      	lsls	r0, r2, #31
 8005cae:	d502      	bpl.n	8005cb6 <_printf_float+0x19a>
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	440b      	add	r3, r1
 8005cb4:	6123      	str	r3, [r4, #16]
 8005cb6:	f04f 0900 	mov.w	r9, #0
 8005cba:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cbc:	e7dc      	b.n	8005c78 <_printf_float+0x15c>
 8005cbe:	b913      	cbnz	r3, 8005cc6 <_printf_float+0x1aa>
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	07d2      	lsls	r2, r2, #31
 8005cc4:	d501      	bpl.n	8005cca <_printf_float+0x1ae>
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	e7f4      	b.n	8005cb4 <_printf_float+0x198>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7f2      	b.n	8005cb4 <_printf_float+0x198>
 8005cce:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cd4:	4299      	cmp	r1, r3
 8005cd6:	db05      	blt.n	8005ce4 <_printf_float+0x1c8>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	6121      	str	r1, [r4, #16]
 8005cdc:	07d8      	lsls	r0, r3, #31
 8005cde:	d5ea      	bpl.n	8005cb6 <_printf_float+0x19a>
 8005ce0:	1c4b      	adds	r3, r1, #1
 8005ce2:	e7e7      	b.n	8005cb4 <_printf_float+0x198>
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	bfcc      	ite	gt
 8005ce8:	2201      	movgt	r2, #1
 8005cea:	f1c1 0202 	rsble	r2, r1, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	e7e0      	b.n	8005cb4 <_printf_float+0x198>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	055a      	lsls	r2, r3, #21
 8005cf6:	d407      	bmi.n	8005d08 <_printf_float+0x1ec>
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	4642      	mov	r2, r8
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	d12b      	bne.n	8005d5e <_printf_float+0x242>
 8005d06:	e764      	b.n	8005bd2 <_printf_float+0xb6>
 8005d08:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d0c:	f240 80dc 	bls.w	8005ec8 <_printf_float+0x3ac>
 8005d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	f7fa fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d033      	beq.n	8005d88 <_printf_float+0x26c>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	4a35      	ldr	r2, [pc, #212]	@ (8005dfc <_printf_float+0x2e0>)
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af51 	beq.w	8005bd2 <_printf_float+0xb6>
 8005d30:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005d34:	4543      	cmp	r3, r8
 8005d36:	db02      	blt.n	8005d3e <_printf_float+0x222>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	07d8      	lsls	r0, r3, #31
 8005d3c:	d50f      	bpl.n	8005d5e <_printf_float+0x242>
 8005d3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f af42 	beq.w	8005bd2 <_printf_float+0xb6>
 8005d4e:	f04f 0900 	mov.w	r9, #0
 8005d52:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d56:	f104 0a1a 	add.w	sl, r4, #26
 8005d5a:	45c8      	cmp	r8, r9
 8005d5c:	dc09      	bgt.n	8005d72 <_printf_float+0x256>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	079b      	lsls	r3, r3, #30
 8005d62:	f100 8102 	bmi.w	8005f6a <_printf_float+0x44e>
 8005d66:	68e0      	ldr	r0, [r4, #12]
 8005d68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d6a:	4298      	cmp	r0, r3
 8005d6c:	bfb8      	it	lt
 8005d6e:	4618      	movlt	r0, r3
 8005d70:	e731      	b.n	8005bd6 <_printf_float+0xba>
 8005d72:	2301      	movs	r3, #1
 8005d74:	4652      	mov	r2, sl
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f af28 	beq.w	8005bd2 <_printf_float+0xb6>
 8005d82:	f109 0901 	add.w	r9, r9, #1
 8005d86:	e7e8      	b.n	8005d5a <_printf_float+0x23e>
 8005d88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dc38      	bgt.n	8005e00 <_printf_float+0x2e4>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	4a19      	ldr	r2, [pc, #100]	@ (8005dfc <_printf_float+0x2e0>)
 8005d96:	47b8      	blx	r7
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f43f af1a 	beq.w	8005bd2 <_printf_float+0xb6>
 8005d9e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005da2:	ea59 0303 	orrs.w	r3, r9, r3
 8005da6:	d102      	bne.n	8005dae <_printf_float+0x292>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07d9      	lsls	r1, r3, #31
 8005dac:	d5d7      	bpl.n	8005d5e <_printf_float+0x242>
 8005dae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f af0a 	beq.w	8005bd2 <_printf_float+0xb6>
 8005dbe:	f04f 0a00 	mov.w	sl, #0
 8005dc2:	f104 0b1a 	add.w	fp, r4, #26
 8005dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dc8:	425b      	negs	r3, r3
 8005dca:	4553      	cmp	r3, sl
 8005dcc:	dc01      	bgt.n	8005dd2 <_printf_float+0x2b6>
 8005dce:	464b      	mov	r3, r9
 8005dd0:	e793      	b.n	8005cfa <_printf_float+0x1de>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	465a      	mov	r2, fp
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	47b8      	blx	r7
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f43f aef8 	beq.w	8005bd2 <_printf_float+0xb6>
 8005de2:	f10a 0a01 	add.w	sl, sl, #1
 8005de6:	e7ee      	b.n	8005dc6 <_printf_float+0x2aa>
 8005de8:	7fefffff 	.word	0x7fefffff
 8005dec:	08008b0a 	.word	0x08008b0a
 8005df0:	08008b0e 	.word	0x08008b0e
 8005df4:	08008b12 	.word	0x08008b12
 8005df8:	08008b16 	.word	0x08008b16
 8005dfc:	08008b1a 	.word	0x08008b1a
 8005e00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e02:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e06:	4553      	cmp	r3, sl
 8005e08:	bfa8      	it	ge
 8005e0a:	4653      	movge	r3, sl
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	4699      	mov	r9, r3
 8005e10:	dc36      	bgt.n	8005e80 <_printf_float+0x364>
 8005e12:	f04f 0b00 	mov.w	fp, #0
 8005e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e1a:	f104 021a 	add.w	r2, r4, #26
 8005e1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e20:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e22:	eba3 0309 	sub.w	r3, r3, r9
 8005e26:	455b      	cmp	r3, fp
 8005e28:	dc31      	bgt.n	8005e8e <_printf_float+0x372>
 8005e2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e2c:	459a      	cmp	sl, r3
 8005e2e:	dc3a      	bgt.n	8005ea6 <_printf_float+0x38a>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	07da      	lsls	r2, r3, #31
 8005e34:	d437      	bmi.n	8005ea6 <_printf_float+0x38a>
 8005e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e38:	ebaa 0903 	sub.w	r9, sl, r3
 8005e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e3e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e42:	4599      	cmp	r9, r3
 8005e44:	bfa8      	it	ge
 8005e46:	4699      	movge	r9, r3
 8005e48:	f1b9 0f00 	cmp.w	r9, #0
 8005e4c:	dc33      	bgt.n	8005eb6 <_printf_float+0x39a>
 8005e4e:	f04f 0800 	mov.w	r8, #0
 8005e52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e56:	f104 0b1a 	add.w	fp, r4, #26
 8005e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e5c:	ebaa 0303 	sub.w	r3, sl, r3
 8005e60:	eba3 0309 	sub.w	r3, r3, r9
 8005e64:	4543      	cmp	r3, r8
 8005e66:	f77f af7a 	ble.w	8005d5e <_printf_float+0x242>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	465a      	mov	r2, fp
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	f43f aeac 	beq.w	8005bd2 <_printf_float+0xb6>
 8005e7a:	f108 0801 	add.w	r8, r8, #1
 8005e7e:	e7ec      	b.n	8005e5a <_printf_float+0x33e>
 8005e80:	4642      	mov	r2, r8
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d1c2      	bne.n	8005e12 <_printf_float+0x2f6>
 8005e8c:	e6a1      	b.n	8005bd2 <_printf_float+0xb6>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4631      	mov	r1, r6
 8005e92:	4628      	mov	r0, r5
 8005e94:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e96:	47b8      	blx	r7
 8005e98:	3001      	adds	r0, #1
 8005e9a:	f43f ae9a 	beq.w	8005bd2 <_printf_float+0xb6>
 8005e9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ea0:	f10b 0b01 	add.w	fp, fp, #1
 8005ea4:	e7bb      	b.n	8005e1e <_printf_float+0x302>
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d1c0      	bne.n	8005e36 <_printf_float+0x31a>
 8005eb4:	e68d      	b.n	8005bd2 <_printf_float+0xb6>
 8005eb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005eb8:	464b      	mov	r3, r9
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	4442      	add	r2, r8
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d1c3      	bne.n	8005e4e <_printf_float+0x332>
 8005ec6:	e684      	b.n	8005bd2 <_printf_float+0xb6>
 8005ec8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ecc:	f1ba 0f01 	cmp.w	sl, #1
 8005ed0:	dc01      	bgt.n	8005ed6 <_printf_float+0x3ba>
 8005ed2:	07db      	lsls	r3, r3, #31
 8005ed4:	d536      	bpl.n	8005f44 <_printf_float+0x428>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4642      	mov	r2, r8
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	f43f ae76 	beq.w	8005bd2 <_printf_float+0xb6>
 8005ee6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f43f ae6e 	beq.w	8005bd2 <_printf_float+0xb6>
 8005ef6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005efa:	2200      	movs	r2, #0
 8005efc:	2300      	movs	r3, #0
 8005efe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f02:	f7fa fd51 	bl	80009a8 <__aeabi_dcmpeq>
 8005f06:	b9c0      	cbnz	r0, 8005f3a <_printf_float+0x41e>
 8005f08:	4653      	mov	r3, sl
 8005f0a:	f108 0201 	add.w	r2, r8, #1
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	d10c      	bne.n	8005f32 <_printf_float+0x416>
 8005f18:	e65b      	b.n	8005bd2 <_printf_float+0xb6>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	465a      	mov	r2, fp
 8005f1e:	4631      	mov	r1, r6
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f ae54 	beq.w	8005bd2 <_printf_float+0xb6>
 8005f2a:	f108 0801 	add.w	r8, r8, #1
 8005f2e:	45d0      	cmp	r8, sl
 8005f30:	dbf3      	blt.n	8005f1a <_printf_float+0x3fe>
 8005f32:	464b      	mov	r3, r9
 8005f34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f38:	e6e0      	b.n	8005cfc <_printf_float+0x1e0>
 8005f3a:	f04f 0800 	mov.w	r8, #0
 8005f3e:	f104 0b1a 	add.w	fp, r4, #26
 8005f42:	e7f4      	b.n	8005f2e <_printf_float+0x412>
 8005f44:	2301      	movs	r3, #1
 8005f46:	4642      	mov	r2, r8
 8005f48:	e7e1      	b.n	8005f0e <_printf_float+0x3f2>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	464a      	mov	r2, r9
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f ae3c 	beq.w	8005bd2 <_printf_float+0xb6>
 8005f5a:	f108 0801 	add.w	r8, r8, #1
 8005f5e:	68e3      	ldr	r3, [r4, #12]
 8005f60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f62:	1a5b      	subs	r3, r3, r1
 8005f64:	4543      	cmp	r3, r8
 8005f66:	dcf0      	bgt.n	8005f4a <_printf_float+0x42e>
 8005f68:	e6fd      	b.n	8005d66 <_printf_float+0x24a>
 8005f6a:	f04f 0800 	mov.w	r8, #0
 8005f6e:	f104 0919 	add.w	r9, r4, #25
 8005f72:	e7f4      	b.n	8005f5e <_printf_float+0x442>

08005f74 <_printf_common>:
 8005f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	4616      	mov	r6, r2
 8005f7a:	4698      	mov	r8, r3
 8005f7c:	688a      	ldr	r2, [r1, #8]
 8005f7e:	690b      	ldr	r3, [r1, #16]
 8005f80:	4607      	mov	r7, r0
 8005f82:	4293      	cmp	r3, r2
 8005f84:	bfb8      	it	lt
 8005f86:	4613      	movlt	r3, r2
 8005f88:	6033      	str	r3, [r6, #0]
 8005f8a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f8e:	460c      	mov	r4, r1
 8005f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f94:	b10a      	cbz	r2, 8005f9a <_printf_common+0x26>
 8005f96:	3301      	adds	r3, #1
 8005f98:	6033      	str	r3, [r6, #0]
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	0699      	lsls	r1, r3, #26
 8005f9e:	bf42      	ittt	mi
 8005fa0:	6833      	ldrmi	r3, [r6, #0]
 8005fa2:	3302      	addmi	r3, #2
 8005fa4:	6033      	strmi	r3, [r6, #0]
 8005fa6:	6825      	ldr	r5, [r4, #0]
 8005fa8:	f015 0506 	ands.w	r5, r5, #6
 8005fac:	d106      	bne.n	8005fbc <_printf_common+0x48>
 8005fae:	f104 0a19 	add.w	sl, r4, #25
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	6832      	ldr	r2, [r6, #0]
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	42ab      	cmp	r3, r5
 8005fba:	dc2b      	bgt.n	8006014 <_printf_common+0xa0>
 8005fbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fc0:	6822      	ldr	r2, [r4, #0]
 8005fc2:	3b00      	subs	r3, #0
 8005fc4:	bf18      	it	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	0692      	lsls	r2, r2, #26
 8005fca:	d430      	bmi.n	800602e <_printf_common+0xba>
 8005fcc:	4641      	mov	r1, r8
 8005fce:	4638      	mov	r0, r7
 8005fd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fd4:	47c8      	blx	r9
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d023      	beq.n	8006022 <_printf_common+0xae>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	6922      	ldr	r2, [r4, #16]
 8005fde:	f003 0306 	and.w	r3, r3, #6
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	bf14      	ite	ne
 8005fe6:	2500      	movne	r5, #0
 8005fe8:	6833      	ldreq	r3, [r6, #0]
 8005fea:	f04f 0600 	mov.w	r6, #0
 8005fee:	bf08      	it	eq
 8005ff0:	68e5      	ldreq	r5, [r4, #12]
 8005ff2:	f104 041a 	add.w	r4, r4, #26
 8005ff6:	bf08      	it	eq
 8005ff8:	1aed      	subeq	r5, r5, r3
 8005ffa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ffe:	bf08      	it	eq
 8006000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006004:	4293      	cmp	r3, r2
 8006006:	bfc4      	itt	gt
 8006008:	1a9b      	subgt	r3, r3, r2
 800600a:	18ed      	addgt	r5, r5, r3
 800600c:	42b5      	cmp	r5, r6
 800600e:	d11a      	bne.n	8006046 <_printf_common+0xd2>
 8006010:	2000      	movs	r0, #0
 8006012:	e008      	b.n	8006026 <_printf_common+0xb2>
 8006014:	2301      	movs	r3, #1
 8006016:	4652      	mov	r2, sl
 8006018:	4641      	mov	r1, r8
 800601a:	4638      	mov	r0, r7
 800601c:	47c8      	blx	r9
 800601e:	3001      	adds	r0, #1
 8006020:	d103      	bne.n	800602a <_printf_common+0xb6>
 8006022:	f04f 30ff 	mov.w	r0, #4294967295
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	3501      	adds	r5, #1
 800602c:	e7c1      	b.n	8005fb2 <_printf_common+0x3e>
 800602e:	2030      	movs	r0, #48	@ 0x30
 8006030:	18e1      	adds	r1, r4, r3
 8006032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800603c:	4422      	add	r2, r4
 800603e:	3302      	adds	r3, #2
 8006040:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006044:	e7c2      	b.n	8005fcc <_printf_common+0x58>
 8006046:	2301      	movs	r3, #1
 8006048:	4622      	mov	r2, r4
 800604a:	4641      	mov	r1, r8
 800604c:	4638      	mov	r0, r7
 800604e:	47c8      	blx	r9
 8006050:	3001      	adds	r0, #1
 8006052:	d0e6      	beq.n	8006022 <_printf_common+0xae>
 8006054:	3601      	adds	r6, #1
 8006056:	e7d9      	b.n	800600c <_printf_common+0x98>

08006058 <_printf_i>:
 8006058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	7e0f      	ldrb	r7, [r1, #24]
 800605e:	4691      	mov	r9, r2
 8006060:	2f78      	cmp	r7, #120	@ 0x78
 8006062:	4680      	mov	r8, r0
 8006064:	460c      	mov	r4, r1
 8006066:	469a      	mov	sl, r3
 8006068:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800606a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800606e:	d807      	bhi.n	8006080 <_printf_i+0x28>
 8006070:	2f62      	cmp	r7, #98	@ 0x62
 8006072:	d80a      	bhi.n	800608a <_printf_i+0x32>
 8006074:	2f00      	cmp	r7, #0
 8006076:	f000 80d3 	beq.w	8006220 <_printf_i+0x1c8>
 800607a:	2f58      	cmp	r7, #88	@ 0x58
 800607c:	f000 80ba 	beq.w	80061f4 <_printf_i+0x19c>
 8006080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006088:	e03a      	b.n	8006100 <_printf_i+0xa8>
 800608a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800608e:	2b15      	cmp	r3, #21
 8006090:	d8f6      	bhi.n	8006080 <_printf_i+0x28>
 8006092:	a101      	add	r1, pc, #4	@ (adr r1, 8006098 <_printf_i+0x40>)
 8006094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006098:	080060f1 	.word	0x080060f1
 800609c:	08006105 	.word	0x08006105
 80060a0:	08006081 	.word	0x08006081
 80060a4:	08006081 	.word	0x08006081
 80060a8:	08006081 	.word	0x08006081
 80060ac:	08006081 	.word	0x08006081
 80060b0:	08006105 	.word	0x08006105
 80060b4:	08006081 	.word	0x08006081
 80060b8:	08006081 	.word	0x08006081
 80060bc:	08006081 	.word	0x08006081
 80060c0:	08006081 	.word	0x08006081
 80060c4:	08006207 	.word	0x08006207
 80060c8:	0800612f 	.word	0x0800612f
 80060cc:	080061c1 	.word	0x080061c1
 80060d0:	08006081 	.word	0x08006081
 80060d4:	08006081 	.word	0x08006081
 80060d8:	08006229 	.word	0x08006229
 80060dc:	08006081 	.word	0x08006081
 80060e0:	0800612f 	.word	0x0800612f
 80060e4:	08006081 	.word	0x08006081
 80060e8:	08006081 	.word	0x08006081
 80060ec:	080061c9 	.word	0x080061c9
 80060f0:	6833      	ldr	r3, [r6, #0]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6032      	str	r2, [r6, #0]
 80060f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006100:	2301      	movs	r3, #1
 8006102:	e09e      	b.n	8006242 <_printf_i+0x1ea>
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	6820      	ldr	r0, [r4, #0]
 8006108:	1d19      	adds	r1, r3, #4
 800610a:	6031      	str	r1, [r6, #0]
 800610c:	0606      	lsls	r6, r0, #24
 800610e:	d501      	bpl.n	8006114 <_printf_i+0xbc>
 8006110:	681d      	ldr	r5, [r3, #0]
 8006112:	e003      	b.n	800611c <_printf_i+0xc4>
 8006114:	0645      	lsls	r5, r0, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0xb8>
 8006118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800611c:	2d00      	cmp	r5, #0
 800611e:	da03      	bge.n	8006128 <_printf_i+0xd0>
 8006120:	232d      	movs	r3, #45	@ 0x2d
 8006122:	426d      	negs	r5, r5
 8006124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006128:	230a      	movs	r3, #10
 800612a:	4859      	ldr	r0, [pc, #356]	@ (8006290 <_printf_i+0x238>)
 800612c:	e011      	b.n	8006152 <_printf_i+0xfa>
 800612e:	6821      	ldr	r1, [r4, #0]
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	0608      	lsls	r0, r1, #24
 8006134:	f853 5b04 	ldr.w	r5, [r3], #4
 8006138:	d402      	bmi.n	8006140 <_printf_i+0xe8>
 800613a:	0649      	lsls	r1, r1, #25
 800613c:	bf48      	it	mi
 800613e:	b2ad      	uxthmi	r5, r5
 8006140:	2f6f      	cmp	r7, #111	@ 0x6f
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	bf14      	ite	ne
 8006146:	230a      	movne	r3, #10
 8006148:	2308      	moveq	r3, #8
 800614a:	4851      	ldr	r0, [pc, #324]	@ (8006290 <_printf_i+0x238>)
 800614c:	2100      	movs	r1, #0
 800614e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006152:	6866      	ldr	r6, [r4, #4]
 8006154:	2e00      	cmp	r6, #0
 8006156:	bfa8      	it	ge
 8006158:	6821      	ldrge	r1, [r4, #0]
 800615a:	60a6      	str	r6, [r4, #8]
 800615c:	bfa4      	itt	ge
 800615e:	f021 0104 	bicge.w	r1, r1, #4
 8006162:	6021      	strge	r1, [r4, #0]
 8006164:	b90d      	cbnz	r5, 800616a <_printf_i+0x112>
 8006166:	2e00      	cmp	r6, #0
 8006168:	d04b      	beq.n	8006202 <_printf_i+0x1aa>
 800616a:	4616      	mov	r6, r2
 800616c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006170:	fb03 5711 	mls	r7, r3, r1, r5
 8006174:	5dc7      	ldrb	r7, [r0, r7]
 8006176:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800617a:	462f      	mov	r7, r5
 800617c:	42bb      	cmp	r3, r7
 800617e:	460d      	mov	r5, r1
 8006180:	d9f4      	bls.n	800616c <_printf_i+0x114>
 8006182:	2b08      	cmp	r3, #8
 8006184:	d10b      	bne.n	800619e <_printf_i+0x146>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	07df      	lsls	r7, r3, #31
 800618a:	d508      	bpl.n	800619e <_printf_i+0x146>
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	6861      	ldr	r1, [r4, #4]
 8006190:	4299      	cmp	r1, r3
 8006192:	bfde      	ittt	le
 8006194:	2330      	movle	r3, #48	@ 0x30
 8006196:	f806 3c01 	strble.w	r3, [r6, #-1]
 800619a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800619e:	1b92      	subs	r2, r2, r6
 80061a0:	6122      	str	r2, [r4, #16]
 80061a2:	464b      	mov	r3, r9
 80061a4:	4621      	mov	r1, r4
 80061a6:	4640      	mov	r0, r8
 80061a8:	f8cd a000 	str.w	sl, [sp]
 80061ac:	aa03      	add	r2, sp, #12
 80061ae:	f7ff fee1 	bl	8005f74 <_printf_common>
 80061b2:	3001      	adds	r0, #1
 80061b4:	d14a      	bne.n	800624c <_printf_i+0x1f4>
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ba:	b004      	add	sp, #16
 80061bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	f043 0320 	orr.w	r3, r3, #32
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	2778      	movs	r7, #120	@ 0x78
 80061ca:	4832      	ldr	r0, [pc, #200]	@ (8006294 <_printf_i+0x23c>)
 80061cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	6831      	ldr	r1, [r6, #0]
 80061d4:	061f      	lsls	r7, r3, #24
 80061d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80061da:	d402      	bmi.n	80061e2 <_printf_i+0x18a>
 80061dc:	065f      	lsls	r7, r3, #25
 80061de:	bf48      	it	mi
 80061e0:	b2ad      	uxthmi	r5, r5
 80061e2:	6031      	str	r1, [r6, #0]
 80061e4:	07d9      	lsls	r1, r3, #31
 80061e6:	bf44      	itt	mi
 80061e8:	f043 0320 	orrmi.w	r3, r3, #32
 80061ec:	6023      	strmi	r3, [r4, #0]
 80061ee:	b11d      	cbz	r5, 80061f8 <_printf_i+0x1a0>
 80061f0:	2310      	movs	r3, #16
 80061f2:	e7ab      	b.n	800614c <_printf_i+0xf4>
 80061f4:	4826      	ldr	r0, [pc, #152]	@ (8006290 <_printf_i+0x238>)
 80061f6:	e7e9      	b.n	80061cc <_printf_i+0x174>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	f023 0320 	bic.w	r3, r3, #32
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	e7f6      	b.n	80061f0 <_printf_i+0x198>
 8006202:	4616      	mov	r6, r2
 8006204:	e7bd      	b.n	8006182 <_printf_i+0x12a>
 8006206:	6833      	ldr	r3, [r6, #0]
 8006208:	6825      	ldr	r5, [r4, #0]
 800620a:	1d18      	adds	r0, r3, #4
 800620c:	6961      	ldr	r1, [r4, #20]
 800620e:	6030      	str	r0, [r6, #0]
 8006210:	062e      	lsls	r6, r5, #24
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	d501      	bpl.n	800621a <_printf_i+0x1c2>
 8006216:	6019      	str	r1, [r3, #0]
 8006218:	e002      	b.n	8006220 <_printf_i+0x1c8>
 800621a:	0668      	lsls	r0, r5, #25
 800621c:	d5fb      	bpl.n	8006216 <_printf_i+0x1be>
 800621e:	8019      	strh	r1, [r3, #0]
 8006220:	2300      	movs	r3, #0
 8006222:	4616      	mov	r6, r2
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	e7bc      	b.n	80061a2 <_printf_i+0x14a>
 8006228:	6833      	ldr	r3, [r6, #0]
 800622a:	2100      	movs	r1, #0
 800622c:	1d1a      	adds	r2, r3, #4
 800622e:	6032      	str	r2, [r6, #0]
 8006230:	681e      	ldr	r6, [r3, #0]
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	4630      	mov	r0, r6
 8006236:	f000 f9d4 	bl	80065e2 <memchr>
 800623a:	b108      	cbz	r0, 8006240 <_printf_i+0x1e8>
 800623c:	1b80      	subs	r0, r0, r6
 800623e:	6060      	str	r0, [r4, #4]
 8006240:	6863      	ldr	r3, [r4, #4]
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	2300      	movs	r3, #0
 8006246:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800624a:	e7aa      	b.n	80061a2 <_printf_i+0x14a>
 800624c:	4632      	mov	r2, r6
 800624e:	4649      	mov	r1, r9
 8006250:	4640      	mov	r0, r8
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	47d0      	blx	sl
 8006256:	3001      	adds	r0, #1
 8006258:	d0ad      	beq.n	80061b6 <_printf_i+0x15e>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	079b      	lsls	r3, r3, #30
 800625e:	d413      	bmi.n	8006288 <_printf_i+0x230>
 8006260:	68e0      	ldr	r0, [r4, #12]
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	4298      	cmp	r0, r3
 8006266:	bfb8      	it	lt
 8006268:	4618      	movlt	r0, r3
 800626a:	e7a6      	b.n	80061ba <_printf_i+0x162>
 800626c:	2301      	movs	r3, #1
 800626e:	4632      	mov	r2, r6
 8006270:	4649      	mov	r1, r9
 8006272:	4640      	mov	r0, r8
 8006274:	47d0      	blx	sl
 8006276:	3001      	adds	r0, #1
 8006278:	d09d      	beq.n	80061b6 <_printf_i+0x15e>
 800627a:	3501      	adds	r5, #1
 800627c:	68e3      	ldr	r3, [r4, #12]
 800627e:	9903      	ldr	r1, [sp, #12]
 8006280:	1a5b      	subs	r3, r3, r1
 8006282:	42ab      	cmp	r3, r5
 8006284:	dcf2      	bgt.n	800626c <_printf_i+0x214>
 8006286:	e7eb      	b.n	8006260 <_printf_i+0x208>
 8006288:	2500      	movs	r5, #0
 800628a:	f104 0619 	add.w	r6, r4, #25
 800628e:	e7f5      	b.n	800627c <_printf_i+0x224>
 8006290:	08008b1c 	.word	0x08008b1c
 8006294:	08008b2d 	.word	0x08008b2d

08006298 <std>:
 8006298:	2300      	movs	r3, #0
 800629a:	b510      	push	{r4, lr}
 800629c:	4604      	mov	r4, r0
 800629e:	e9c0 3300 	strd	r3, r3, [r0]
 80062a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062a6:	6083      	str	r3, [r0, #8]
 80062a8:	8181      	strh	r1, [r0, #12]
 80062aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80062ac:	81c2      	strh	r2, [r0, #14]
 80062ae:	6183      	str	r3, [r0, #24]
 80062b0:	4619      	mov	r1, r3
 80062b2:	2208      	movs	r2, #8
 80062b4:	305c      	adds	r0, #92	@ 0x5c
 80062b6:	f000 f914 	bl	80064e2 <memset>
 80062ba:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <std+0x58>)
 80062bc:	6224      	str	r4, [r4, #32]
 80062be:	6263      	str	r3, [r4, #36]	@ 0x24
 80062c0:	4b0c      	ldr	r3, [pc, #48]	@ (80062f4 <std+0x5c>)
 80062c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062c4:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <std+0x60>)
 80062c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062c8:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <std+0x64>)
 80062ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <std+0x68>)
 80062ce:	429c      	cmp	r4, r3
 80062d0:	d006      	beq.n	80062e0 <std+0x48>
 80062d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062d6:	4294      	cmp	r4, r2
 80062d8:	d002      	beq.n	80062e0 <std+0x48>
 80062da:	33d0      	adds	r3, #208	@ 0xd0
 80062dc:	429c      	cmp	r4, r3
 80062de:	d105      	bne.n	80062ec <std+0x54>
 80062e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e8:	f000 b978 	b.w	80065dc <__retarget_lock_init_recursive>
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	bf00      	nop
 80062f0:	0800645d 	.word	0x0800645d
 80062f4:	0800647f 	.word	0x0800647f
 80062f8:	080064b7 	.word	0x080064b7
 80062fc:	080064db 	.word	0x080064db
 8006300:	200004e8 	.word	0x200004e8

08006304 <stdio_exit_handler>:
 8006304:	4a02      	ldr	r2, [pc, #8]	@ (8006310 <stdio_exit_handler+0xc>)
 8006306:	4903      	ldr	r1, [pc, #12]	@ (8006314 <stdio_exit_handler+0x10>)
 8006308:	4803      	ldr	r0, [pc, #12]	@ (8006318 <stdio_exit_handler+0x14>)
 800630a:	f000 b869 	b.w	80063e0 <_fwalk_sglue>
 800630e:	bf00      	nop
 8006310:	20000174 	.word	0x20000174
 8006314:	08007f4d 	.word	0x08007f4d
 8006318:	20000184 	.word	0x20000184

0800631c <cleanup_stdio>:
 800631c:	6841      	ldr	r1, [r0, #4]
 800631e:	4b0c      	ldr	r3, [pc, #48]	@ (8006350 <cleanup_stdio+0x34>)
 8006320:	b510      	push	{r4, lr}
 8006322:	4299      	cmp	r1, r3
 8006324:	4604      	mov	r4, r0
 8006326:	d001      	beq.n	800632c <cleanup_stdio+0x10>
 8006328:	f001 fe10 	bl	8007f4c <_fflush_r>
 800632c:	68a1      	ldr	r1, [r4, #8]
 800632e:	4b09      	ldr	r3, [pc, #36]	@ (8006354 <cleanup_stdio+0x38>)
 8006330:	4299      	cmp	r1, r3
 8006332:	d002      	beq.n	800633a <cleanup_stdio+0x1e>
 8006334:	4620      	mov	r0, r4
 8006336:	f001 fe09 	bl	8007f4c <_fflush_r>
 800633a:	68e1      	ldr	r1, [r4, #12]
 800633c:	4b06      	ldr	r3, [pc, #24]	@ (8006358 <cleanup_stdio+0x3c>)
 800633e:	4299      	cmp	r1, r3
 8006340:	d004      	beq.n	800634c <cleanup_stdio+0x30>
 8006342:	4620      	mov	r0, r4
 8006344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006348:	f001 be00 	b.w	8007f4c <_fflush_r>
 800634c:	bd10      	pop	{r4, pc}
 800634e:	bf00      	nop
 8006350:	200004e8 	.word	0x200004e8
 8006354:	20000550 	.word	0x20000550
 8006358:	200005b8 	.word	0x200005b8

0800635c <global_stdio_init.part.0>:
 800635c:	b510      	push	{r4, lr}
 800635e:	4b0b      	ldr	r3, [pc, #44]	@ (800638c <global_stdio_init.part.0+0x30>)
 8006360:	4c0b      	ldr	r4, [pc, #44]	@ (8006390 <global_stdio_init.part.0+0x34>)
 8006362:	4a0c      	ldr	r2, [pc, #48]	@ (8006394 <global_stdio_init.part.0+0x38>)
 8006364:	4620      	mov	r0, r4
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	2104      	movs	r1, #4
 800636a:	2200      	movs	r2, #0
 800636c:	f7ff ff94 	bl	8006298 <std>
 8006370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006374:	2201      	movs	r2, #1
 8006376:	2109      	movs	r1, #9
 8006378:	f7ff ff8e 	bl	8006298 <std>
 800637c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006380:	2202      	movs	r2, #2
 8006382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006386:	2112      	movs	r1, #18
 8006388:	f7ff bf86 	b.w	8006298 <std>
 800638c:	20000620 	.word	0x20000620
 8006390:	200004e8 	.word	0x200004e8
 8006394:	08006305 	.word	0x08006305

08006398 <__sfp_lock_acquire>:
 8006398:	4801      	ldr	r0, [pc, #4]	@ (80063a0 <__sfp_lock_acquire+0x8>)
 800639a:	f000 b920 	b.w	80065de <__retarget_lock_acquire_recursive>
 800639e:	bf00      	nop
 80063a0:	20000629 	.word	0x20000629

080063a4 <__sfp_lock_release>:
 80063a4:	4801      	ldr	r0, [pc, #4]	@ (80063ac <__sfp_lock_release+0x8>)
 80063a6:	f000 b91b 	b.w	80065e0 <__retarget_lock_release_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000629 	.word	0x20000629

080063b0 <__sinit>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	4604      	mov	r4, r0
 80063b4:	f7ff fff0 	bl	8006398 <__sfp_lock_acquire>
 80063b8:	6a23      	ldr	r3, [r4, #32]
 80063ba:	b11b      	cbz	r3, 80063c4 <__sinit+0x14>
 80063bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c0:	f7ff bff0 	b.w	80063a4 <__sfp_lock_release>
 80063c4:	4b04      	ldr	r3, [pc, #16]	@ (80063d8 <__sinit+0x28>)
 80063c6:	6223      	str	r3, [r4, #32]
 80063c8:	4b04      	ldr	r3, [pc, #16]	@ (80063dc <__sinit+0x2c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f5      	bne.n	80063bc <__sinit+0xc>
 80063d0:	f7ff ffc4 	bl	800635c <global_stdio_init.part.0>
 80063d4:	e7f2      	b.n	80063bc <__sinit+0xc>
 80063d6:	bf00      	nop
 80063d8:	0800631d 	.word	0x0800631d
 80063dc:	20000620 	.word	0x20000620

080063e0 <_fwalk_sglue>:
 80063e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	4607      	mov	r7, r0
 80063e6:	4688      	mov	r8, r1
 80063e8:	4614      	mov	r4, r2
 80063ea:	2600      	movs	r6, #0
 80063ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063f0:	f1b9 0901 	subs.w	r9, r9, #1
 80063f4:	d505      	bpl.n	8006402 <_fwalk_sglue+0x22>
 80063f6:	6824      	ldr	r4, [r4, #0]
 80063f8:	2c00      	cmp	r4, #0
 80063fa:	d1f7      	bne.n	80063ec <_fwalk_sglue+0xc>
 80063fc:	4630      	mov	r0, r6
 80063fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d907      	bls.n	8006418 <_fwalk_sglue+0x38>
 8006408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800640c:	3301      	adds	r3, #1
 800640e:	d003      	beq.n	8006418 <_fwalk_sglue+0x38>
 8006410:	4629      	mov	r1, r5
 8006412:	4638      	mov	r0, r7
 8006414:	47c0      	blx	r8
 8006416:	4306      	orrs	r6, r0
 8006418:	3568      	adds	r5, #104	@ 0x68
 800641a:	e7e9      	b.n	80063f0 <_fwalk_sglue+0x10>

0800641c <siprintf>:
 800641c:	b40e      	push	{r1, r2, r3}
 800641e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006422:	b500      	push	{lr}
 8006424:	b09c      	sub	sp, #112	@ 0x70
 8006426:	ab1d      	add	r3, sp, #116	@ 0x74
 8006428:	9002      	str	r0, [sp, #8]
 800642a:	9006      	str	r0, [sp, #24]
 800642c:	9107      	str	r1, [sp, #28]
 800642e:	9104      	str	r1, [sp, #16]
 8006430:	4808      	ldr	r0, [pc, #32]	@ (8006454 <siprintf+0x38>)
 8006432:	4909      	ldr	r1, [pc, #36]	@ (8006458 <siprintf+0x3c>)
 8006434:	f853 2b04 	ldr.w	r2, [r3], #4
 8006438:	9105      	str	r1, [sp, #20]
 800643a:	6800      	ldr	r0, [r0, #0]
 800643c:	a902      	add	r1, sp, #8
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	f001 fc08 	bl	8007c54 <_svfiprintf_r>
 8006444:	2200      	movs	r2, #0
 8006446:	9b02      	ldr	r3, [sp, #8]
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	b01c      	add	sp, #112	@ 0x70
 800644c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006450:	b003      	add	sp, #12
 8006452:	4770      	bx	lr
 8006454:	20000180 	.word	0x20000180
 8006458:	ffff0208 	.word	0xffff0208

0800645c <__sread>:
 800645c:	b510      	push	{r4, lr}
 800645e:	460c      	mov	r4, r1
 8006460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006464:	f000 f86c 	bl	8006540 <_read_r>
 8006468:	2800      	cmp	r0, #0
 800646a:	bfab      	itete	ge
 800646c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800646e:	89a3      	ldrhlt	r3, [r4, #12]
 8006470:	181b      	addge	r3, r3, r0
 8006472:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006476:	bfac      	ite	ge
 8006478:	6563      	strge	r3, [r4, #84]	@ 0x54
 800647a:	81a3      	strhlt	r3, [r4, #12]
 800647c:	bd10      	pop	{r4, pc}

0800647e <__swrite>:
 800647e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006482:	461f      	mov	r7, r3
 8006484:	898b      	ldrh	r3, [r1, #12]
 8006486:	4605      	mov	r5, r0
 8006488:	05db      	lsls	r3, r3, #23
 800648a:	460c      	mov	r4, r1
 800648c:	4616      	mov	r6, r2
 800648e:	d505      	bpl.n	800649c <__swrite+0x1e>
 8006490:	2302      	movs	r3, #2
 8006492:	2200      	movs	r2, #0
 8006494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006498:	f000 f840 	bl	800651c <_lseek_r>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	4632      	mov	r2, r6
 80064a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	4628      	mov	r0, r5
 80064a8:	463b      	mov	r3, r7
 80064aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064b2:	f000 b857 	b.w	8006564 <_write_r>

080064b6 <__sseek>:
 80064b6:	b510      	push	{r4, lr}
 80064b8:	460c      	mov	r4, r1
 80064ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064be:	f000 f82d 	bl	800651c <_lseek_r>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	bf15      	itete	ne
 80064c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064d2:	81a3      	strheq	r3, [r4, #12]
 80064d4:	bf18      	it	ne
 80064d6:	81a3      	strhne	r3, [r4, #12]
 80064d8:	bd10      	pop	{r4, pc}

080064da <__sclose>:
 80064da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064de:	f000 b80d 	b.w	80064fc <_close_r>

080064e2 <memset>:
 80064e2:	4603      	mov	r3, r0
 80064e4:	4402      	add	r2, r0
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d100      	bne.n	80064ec <memset+0xa>
 80064ea:	4770      	bx	lr
 80064ec:	f803 1b01 	strb.w	r1, [r3], #1
 80064f0:	e7f9      	b.n	80064e6 <memset+0x4>
	...

080064f4 <_localeconv_r>:
 80064f4:	4800      	ldr	r0, [pc, #0]	@ (80064f8 <_localeconv_r+0x4>)
 80064f6:	4770      	bx	lr
 80064f8:	200002c0 	.word	0x200002c0

080064fc <_close_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	2300      	movs	r3, #0
 8006500:	4d05      	ldr	r5, [pc, #20]	@ (8006518 <_close_r+0x1c>)
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fb fd0b 	bl	8001f22 <_close>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_close_r+0x1a>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_close_r+0x1a>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	20000624 	.word	0x20000624

0800651c <_lseek_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	2200      	movs	r2, #0
 8006526:	4d05      	ldr	r5, [pc, #20]	@ (800653c <_lseek_r+0x20>)
 8006528:	602a      	str	r2, [r5, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	f7fb fd1d 	bl	8001f6a <_lseek>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_lseek_r+0x1e>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_lseek_r+0x1e>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	20000624 	.word	0x20000624

08006540 <_read_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	2200      	movs	r2, #0
 800654a:	4d05      	ldr	r5, [pc, #20]	@ (8006560 <_read_r+0x20>)
 800654c:	602a      	str	r2, [r5, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f7fb fcae 	bl	8001eb0 <_read>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_read_r+0x1e>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_read_r+0x1e>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	20000624 	.word	0x20000624

08006564 <_write_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	4611      	mov	r1, r2
 800656c:	2200      	movs	r2, #0
 800656e:	4d05      	ldr	r5, [pc, #20]	@ (8006584 <_write_r+0x20>)
 8006570:	602a      	str	r2, [r5, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f7fb fcb9 	bl	8001eea <_write>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_write_r+0x1e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_write_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000624 	.word	0x20000624

08006588 <__errno>:
 8006588:	4b01      	ldr	r3, [pc, #4]	@ (8006590 <__errno+0x8>)
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20000180 	.word	0x20000180

08006594 <__libc_init_array>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	2600      	movs	r6, #0
 8006598:	4d0c      	ldr	r5, [pc, #48]	@ (80065cc <__libc_init_array+0x38>)
 800659a:	4c0d      	ldr	r4, [pc, #52]	@ (80065d0 <__libc_init_array+0x3c>)
 800659c:	1b64      	subs	r4, r4, r5
 800659e:	10a4      	asrs	r4, r4, #2
 80065a0:	42a6      	cmp	r6, r4
 80065a2:	d109      	bne.n	80065b8 <__libc_init_array+0x24>
 80065a4:	f002 fa5a 	bl	8008a5c <_init>
 80065a8:	2600      	movs	r6, #0
 80065aa:	4d0a      	ldr	r5, [pc, #40]	@ (80065d4 <__libc_init_array+0x40>)
 80065ac:	4c0a      	ldr	r4, [pc, #40]	@ (80065d8 <__libc_init_array+0x44>)
 80065ae:	1b64      	subs	r4, r4, r5
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	42a6      	cmp	r6, r4
 80065b4:	d105      	bne.n	80065c2 <__libc_init_array+0x2e>
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
 80065b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065bc:	4798      	blx	r3
 80065be:	3601      	adds	r6, #1
 80065c0:	e7ee      	b.n	80065a0 <__libc_init_array+0xc>
 80065c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c6:	4798      	blx	r3
 80065c8:	3601      	adds	r6, #1
 80065ca:	e7f2      	b.n	80065b2 <__libc_init_array+0x1e>
 80065cc:	08008e80 	.word	0x08008e80
 80065d0:	08008e80 	.word	0x08008e80
 80065d4:	08008e80 	.word	0x08008e80
 80065d8:	08008e84 	.word	0x08008e84

080065dc <__retarget_lock_init_recursive>:
 80065dc:	4770      	bx	lr

080065de <__retarget_lock_acquire_recursive>:
 80065de:	4770      	bx	lr

080065e0 <__retarget_lock_release_recursive>:
 80065e0:	4770      	bx	lr

080065e2 <memchr>:
 80065e2:	4603      	mov	r3, r0
 80065e4:	b510      	push	{r4, lr}
 80065e6:	b2c9      	uxtb	r1, r1
 80065e8:	4402      	add	r2, r0
 80065ea:	4293      	cmp	r3, r2
 80065ec:	4618      	mov	r0, r3
 80065ee:	d101      	bne.n	80065f4 <memchr+0x12>
 80065f0:	2000      	movs	r0, #0
 80065f2:	e003      	b.n	80065fc <memchr+0x1a>
 80065f4:	7804      	ldrb	r4, [r0, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	428c      	cmp	r4, r1
 80065fa:	d1f6      	bne.n	80065ea <memchr+0x8>
 80065fc:	bd10      	pop	{r4, pc}

080065fe <quorem>:
 80065fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006602:	6903      	ldr	r3, [r0, #16]
 8006604:	690c      	ldr	r4, [r1, #16]
 8006606:	4607      	mov	r7, r0
 8006608:	42a3      	cmp	r3, r4
 800660a:	db7e      	blt.n	800670a <quorem+0x10c>
 800660c:	3c01      	subs	r4, #1
 800660e:	00a3      	lsls	r3, r4, #2
 8006610:	f100 0514 	add.w	r5, r0, #20
 8006614:	f101 0814 	add.w	r8, r1, #20
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006628:	3301      	adds	r3, #1
 800662a:	429a      	cmp	r2, r3
 800662c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006630:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006634:	d32e      	bcc.n	8006694 <quorem+0x96>
 8006636:	f04f 0a00 	mov.w	sl, #0
 800663a:	46c4      	mov	ip, r8
 800663c:	46ae      	mov	lr, r5
 800663e:	46d3      	mov	fp, sl
 8006640:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006644:	b298      	uxth	r0, r3
 8006646:	fb06 a000 	mla	r0, r6, r0, sl
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	0c02      	lsrs	r2, r0, #16
 800664e:	fb06 2303 	mla	r3, r6, r3, r2
 8006652:	f8de 2000 	ldr.w	r2, [lr]
 8006656:	b280      	uxth	r0, r0
 8006658:	b292      	uxth	r2, r2
 800665a:	1a12      	subs	r2, r2, r0
 800665c:	445a      	add	r2, fp
 800665e:	f8de 0000 	ldr.w	r0, [lr]
 8006662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006666:	b29b      	uxth	r3, r3
 8006668:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800666c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006670:	b292      	uxth	r2, r2
 8006672:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006676:	45e1      	cmp	r9, ip
 8006678:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800667c:	f84e 2b04 	str.w	r2, [lr], #4
 8006680:	d2de      	bcs.n	8006640 <quorem+0x42>
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	58eb      	ldr	r3, [r5, r3]
 8006686:	b92b      	cbnz	r3, 8006694 <quorem+0x96>
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	3b04      	subs	r3, #4
 800668c:	429d      	cmp	r5, r3
 800668e:	461a      	mov	r2, r3
 8006690:	d32f      	bcc.n	80066f2 <quorem+0xf4>
 8006692:	613c      	str	r4, [r7, #16]
 8006694:	4638      	mov	r0, r7
 8006696:	f001 f979 	bl	800798c <__mcmp>
 800669a:	2800      	cmp	r0, #0
 800669c:	db25      	blt.n	80066ea <quorem+0xec>
 800669e:	4629      	mov	r1, r5
 80066a0:	2000      	movs	r0, #0
 80066a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80066a6:	f8d1 c000 	ldr.w	ip, [r1]
 80066aa:	fa1f fe82 	uxth.w	lr, r2
 80066ae:	fa1f f38c 	uxth.w	r3, ip
 80066b2:	eba3 030e 	sub.w	r3, r3, lr
 80066b6:	4403      	add	r3, r0
 80066b8:	0c12      	lsrs	r2, r2, #16
 80066ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80066be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066c8:	45c1      	cmp	r9, r8
 80066ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066ce:	f841 3b04 	str.w	r3, [r1], #4
 80066d2:	d2e6      	bcs.n	80066a2 <quorem+0xa4>
 80066d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066dc:	b922      	cbnz	r2, 80066e8 <quorem+0xea>
 80066de:	3b04      	subs	r3, #4
 80066e0:	429d      	cmp	r5, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	d30b      	bcc.n	80066fe <quorem+0x100>
 80066e6:	613c      	str	r4, [r7, #16]
 80066e8:	3601      	adds	r6, #1
 80066ea:	4630      	mov	r0, r6
 80066ec:	b003      	add	sp, #12
 80066ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	3b04      	subs	r3, #4
 80066f6:	2a00      	cmp	r2, #0
 80066f8:	d1cb      	bne.n	8006692 <quorem+0x94>
 80066fa:	3c01      	subs	r4, #1
 80066fc:	e7c6      	b.n	800668c <quorem+0x8e>
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	3b04      	subs	r3, #4
 8006702:	2a00      	cmp	r2, #0
 8006704:	d1ef      	bne.n	80066e6 <quorem+0xe8>
 8006706:	3c01      	subs	r4, #1
 8006708:	e7ea      	b.n	80066e0 <quorem+0xe2>
 800670a:	2000      	movs	r0, #0
 800670c:	e7ee      	b.n	80066ec <quorem+0xee>
	...

08006710 <_dtoa_r>:
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	4614      	mov	r4, r2
 8006716:	461d      	mov	r5, r3
 8006718:	69c7      	ldr	r7, [r0, #28]
 800671a:	b097      	sub	sp, #92	@ 0x5c
 800671c:	4683      	mov	fp, r0
 800671e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006722:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006724:	b97f      	cbnz	r7, 8006746 <_dtoa_r+0x36>
 8006726:	2010      	movs	r0, #16
 8006728:	f000 fe02 	bl	8007330 <malloc>
 800672c:	4602      	mov	r2, r0
 800672e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006732:	b920      	cbnz	r0, 800673e <_dtoa_r+0x2e>
 8006734:	21ef      	movs	r1, #239	@ 0xef
 8006736:	4ba8      	ldr	r3, [pc, #672]	@ (80069d8 <_dtoa_r+0x2c8>)
 8006738:	48a8      	ldr	r0, [pc, #672]	@ (80069dc <_dtoa_r+0x2cc>)
 800673a:	f001 fc67 	bl	800800c <__assert_func>
 800673e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006742:	6007      	str	r7, [r0, #0]
 8006744:	60c7      	str	r7, [r0, #12]
 8006746:	f8db 301c 	ldr.w	r3, [fp, #28]
 800674a:	6819      	ldr	r1, [r3, #0]
 800674c:	b159      	cbz	r1, 8006766 <_dtoa_r+0x56>
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	2301      	movs	r3, #1
 8006752:	4093      	lsls	r3, r2
 8006754:	604a      	str	r2, [r1, #4]
 8006756:	608b      	str	r3, [r1, #8]
 8006758:	4658      	mov	r0, fp
 800675a:	f000 fedf 	bl	800751c <_Bfree>
 800675e:	2200      	movs	r2, #0
 8006760:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	1e2b      	subs	r3, r5, #0
 8006768:	bfaf      	iteee	ge
 800676a:	2300      	movge	r3, #0
 800676c:	2201      	movlt	r2, #1
 800676e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006772:	9303      	strlt	r3, [sp, #12]
 8006774:	bfa8      	it	ge
 8006776:	6033      	strge	r3, [r6, #0]
 8006778:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800677c:	4b98      	ldr	r3, [pc, #608]	@ (80069e0 <_dtoa_r+0x2d0>)
 800677e:	bfb8      	it	lt
 8006780:	6032      	strlt	r2, [r6, #0]
 8006782:	ea33 0308 	bics.w	r3, r3, r8
 8006786:	d112      	bne.n	80067ae <_dtoa_r+0x9e>
 8006788:	f242 730f 	movw	r3, #9999	@ 0x270f
 800678c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006794:	4323      	orrs	r3, r4
 8006796:	f000 8550 	beq.w	800723a <_dtoa_r+0xb2a>
 800679a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800679c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80069e4 <_dtoa_r+0x2d4>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8552 	beq.w	800724a <_dtoa_r+0xb3a>
 80067a6:	f10a 0303 	add.w	r3, sl, #3
 80067aa:	f000 bd4c 	b.w	8007246 <_dtoa_r+0xb36>
 80067ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80067b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ba:	2200      	movs	r2, #0
 80067bc:	2300      	movs	r3, #0
 80067be:	f7fa f8f3 	bl	80009a8 <__aeabi_dcmpeq>
 80067c2:	4607      	mov	r7, r0
 80067c4:	b158      	cbz	r0, 80067de <_dtoa_r+0xce>
 80067c6:	2301      	movs	r3, #1
 80067c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80067ce:	b113      	cbz	r3, 80067d6 <_dtoa_r+0xc6>
 80067d0:	4b85      	ldr	r3, [pc, #532]	@ (80069e8 <_dtoa_r+0x2d8>)
 80067d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80069ec <_dtoa_r+0x2dc>
 80067da:	f000 bd36 	b.w	800724a <_dtoa_r+0xb3a>
 80067de:	ab14      	add	r3, sp, #80	@ 0x50
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	ab15      	add	r3, sp, #84	@ 0x54
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	4658      	mov	r0, fp
 80067e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80067ec:	f001 f97e 	bl	8007aec <__d2b>
 80067f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80067f4:	4681      	mov	r9, r0
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	d077      	beq.n	80068ea <_dtoa_r+0x1da>
 80067fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006800:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006808:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800680c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006810:	9712      	str	r7, [sp, #72]	@ 0x48
 8006812:	4619      	mov	r1, r3
 8006814:	2200      	movs	r2, #0
 8006816:	4b76      	ldr	r3, [pc, #472]	@ (80069f0 <_dtoa_r+0x2e0>)
 8006818:	f7f9 fca6 	bl	8000168 <__aeabi_dsub>
 800681c:	a368      	add	r3, pc, #416	@ (adr r3, 80069c0 <_dtoa_r+0x2b0>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 fe59 	bl	80004d8 <__aeabi_dmul>
 8006826:	a368      	add	r3, pc, #416	@ (adr r3, 80069c8 <_dtoa_r+0x2b8>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fc9e 	bl	800016c <__adddf3>
 8006830:	4604      	mov	r4, r0
 8006832:	4630      	mov	r0, r6
 8006834:	460d      	mov	r5, r1
 8006836:	f7f9 fde5 	bl	8000404 <__aeabi_i2d>
 800683a:	a365      	add	r3, pc, #404	@ (adr r3, 80069d0 <_dtoa_r+0x2c0>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fe4a 	bl	80004d8 <__aeabi_dmul>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4620      	mov	r0, r4
 800684a:	4629      	mov	r1, r5
 800684c:	f7f9 fc8e 	bl	800016c <__adddf3>
 8006850:	4604      	mov	r4, r0
 8006852:	460d      	mov	r5, r1
 8006854:	f7fa f8f0 	bl	8000a38 <__aeabi_d2iz>
 8006858:	2200      	movs	r2, #0
 800685a:	4607      	mov	r7, r0
 800685c:	2300      	movs	r3, #0
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7fa f8ab 	bl	80009bc <__aeabi_dcmplt>
 8006866:	b140      	cbz	r0, 800687a <_dtoa_r+0x16a>
 8006868:	4638      	mov	r0, r7
 800686a:	f7f9 fdcb 	bl	8000404 <__aeabi_i2d>
 800686e:	4622      	mov	r2, r4
 8006870:	462b      	mov	r3, r5
 8006872:	f7fa f899 	bl	80009a8 <__aeabi_dcmpeq>
 8006876:	b900      	cbnz	r0, 800687a <_dtoa_r+0x16a>
 8006878:	3f01      	subs	r7, #1
 800687a:	2f16      	cmp	r7, #22
 800687c:	d853      	bhi.n	8006926 <_dtoa_r+0x216>
 800687e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006882:	4b5c      	ldr	r3, [pc, #368]	@ (80069f4 <_dtoa_r+0x2e4>)
 8006884:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7fa f896 	bl	80009bc <__aeabi_dcmplt>
 8006890:	2800      	cmp	r0, #0
 8006892:	d04a      	beq.n	800692a <_dtoa_r+0x21a>
 8006894:	2300      	movs	r3, #0
 8006896:	3f01      	subs	r7, #1
 8006898:	930f      	str	r3, [sp, #60]	@ 0x3c
 800689a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800689c:	1b9b      	subs	r3, r3, r6
 800689e:	1e5a      	subs	r2, r3, #1
 80068a0:	bf46      	itte	mi
 80068a2:	f1c3 0801 	rsbmi	r8, r3, #1
 80068a6:	2300      	movmi	r3, #0
 80068a8:	f04f 0800 	movpl.w	r8, #0
 80068ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80068ae:	bf48      	it	mi
 80068b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80068b2:	2f00      	cmp	r7, #0
 80068b4:	db3b      	blt.n	800692e <_dtoa_r+0x21e>
 80068b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b8:	970e      	str	r7, [sp, #56]	@ 0x38
 80068ba:	443b      	add	r3, r7
 80068bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80068be:	2300      	movs	r3, #0
 80068c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80068c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068c4:	2b09      	cmp	r3, #9
 80068c6:	d866      	bhi.n	8006996 <_dtoa_r+0x286>
 80068c8:	2b05      	cmp	r3, #5
 80068ca:	bfc4      	itt	gt
 80068cc:	3b04      	subgt	r3, #4
 80068ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80068d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068d2:	bfc8      	it	gt
 80068d4:	2400      	movgt	r4, #0
 80068d6:	f1a3 0302 	sub.w	r3, r3, #2
 80068da:	bfd8      	it	le
 80068dc:	2401      	movle	r4, #1
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d864      	bhi.n	80069ac <_dtoa_r+0x29c>
 80068e2:	e8df f003 	tbb	[pc, r3]
 80068e6:	382b      	.short	0x382b
 80068e8:	5636      	.short	0x5636
 80068ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80068ee:	441e      	add	r6, r3
 80068f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	bfc1      	itttt	gt
 80068f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80068fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006900:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006904:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006908:	bfd6      	itet	le
 800690a:	f1c3 0320 	rsble	r3, r3, #32
 800690e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006912:	fa04 f003 	lslle.w	r0, r4, r3
 8006916:	f7f9 fd65 	bl	80003e4 <__aeabi_ui2d>
 800691a:	2201      	movs	r2, #1
 800691c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006920:	3e01      	subs	r6, #1
 8006922:	9212      	str	r2, [sp, #72]	@ 0x48
 8006924:	e775      	b.n	8006812 <_dtoa_r+0x102>
 8006926:	2301      	movs	r3, #1
 8006928:	e7b6      	b.n	8006898 <_dtoa_r+0x188>
 800692a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800692c:	e7b5      	b.n	800689a <_dtoa_r+0x18a>
 800692e:	427b      	negs	r3, r7
 8006930:	930a      	str	r3, [sp, #40]	@ 0x28
 8006932:	2300      	movs	r3, #0
 8006934:	eba8 0807 	sub.w	r8, r8, r7
 8006938:	930e      	str	r3, [sp, #56]	@ 0x38
 800693a:	e7c2      	b.n	80068c2 <_dtoa_r+0x1b2>
 800693c:	2300      	movs	r3, #0
 800693e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006940:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006942:	2b00      	cmp	r3, #0
 8006944:	dc35      	bgt.n	80069b2 <_dtoa_r+0x2a2>
 8006946:	2301      	movs	r3, #1
 8006948:	461a      	mov	r2, r3
 800694a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800694e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006950:	e00b      	b.n	800696a <_dtoa_r+0x25a>
 8006952:	2301      	movs	r3, #1
 8006954:	e7f3      	b.n	800693e <_dtoa_r+0x22e>
 8006956:	2300      	movs	r3, #0
 8006958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800695a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	9308      	str	r3, [sp, #32]
 8006960:	3301      	adds	r3, #1
 8006962:	2b01      	cmp	r3, #1
 8006964:	9307      	str	r3, [sp, #28]
 8006966:	bfb8      	it	lt
 8006968:	2301      	movlt	r3, #1
 800696a:	2100      	movs	r1, #0
 800696c:	2204      	movs	r2, #4
 800696e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006972:	f102 0514 	add.w	r5, r2, #20
 8006976:	429d      	cmp	r5, r3
 8006978:	d91f      	bls.n	80069ba <_dtoa_r+0x2aa>
 800697a:	6041      	str	r1, [r0, #4]
 800697c:	4658      	mov	r0, fp
 800697e:	f000 fd8d 	bl	800749c <_Balloc>
 8006982:	4682      	mov	sl, r0
 8006984:	2800      	cmp	r0, #0
 8006986:	d139      	bne.n	80069fc <_dtoa_r+0x2ec>
 8006988:	4602      	mov	r2, r0
 800698a:	f240 11af 	movw	r1, #431	@ 0x1af
 800698e:	4b1a      	ldr	r3, [pc, #104]	@ (80069f8 <_dtoa_r+0x2e8>)
 8006990:	e6d2      	b.n	8006738 <_dtoa_r+0x28>
 8006992:	2301      	movs	r3, #1
 8006994:	e7e0      	b.n	8006958 <_dtoa_r+0x248>
 8006996:	2401      	movs	r4, #1
 8006998:	2300      	movs	r3, #0
 800699a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800699c:	9320      	str	r3, [sp, #128]	@ 0x80
 800699e:	f04f 33ff 	mov.w	r3, #4294967295
 80069a2:	2200      	movs	r2, #0
 80069a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80069a8:	2312      	movs	r3, #18
 80069aa:	e7d0      	b.n	800694e <_dtoa_r+0x23e>
 80069ac:	2301      	movs	r3, #1
 80069ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069b0:	e7f5      	b.n	800699e <_dtoa_r+0x28e>
 80069b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80069b8:	e7d7      	b.n	800696a <_dtoa_r+0x25a>
 80069ba:	3101      	adds	r1, #1
 80069bc:	0052      	lsls	r2, r2, #1
 80069be:	e7d8      	b.n	8006972 <_dtoa_r+0x262>
 80069c0:	636f4361 	.word	0x636f4361
 80069c4:	3fd287a7 	.word	0x3fd287a7
 80069c8:	8b60c8b3 	.word	0x8b60c8b3
 80069cc:	3fc68a28 	.word	0x3fc68a28
 80069d0:	509f79fb 	.word	0x509f79fb
 80069d4:	3fd34413 	.word	0x3fd34413
 80069d8:	08008b4b 	.word	0x08008b4b
 80069dc:	08008b62 	.word	0x08008b62
 80069e0:	7ff00000 	.word	0x7ff00000
 80069e4:	08008b47 	.word	0x08008b47
 80069e8:	08008b1b 	.word	0x08008b1b
 80069ec:	08008b1a 	.word	0x08008b1a
 80069f0:	3ff80000 	.word	0x3ff80000
 80069f4:	08008c58 	.word	0x08008c58
 80069f8:	08008bba 	.word	0x08008bba
 80069fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	9b07      	ldr	r3, [sp, #28]
 8006a04:	2b0e      	cmp	r3, #14
 8006a06:	f200 80a4 	bhi.w	8006b52 <_dtoa_r+0x442>
 8006a0a:	2c00      	cmp	r4, #0
 8006a0c:	f000 80a1 	beq.w	8006b52 <_dtoa_r+0x442>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	dd33      	ble.n	8006a7c <_dtoa_r+0x36c>
 8006a14:	4b86      	ldr	r3, [pc, #536]	@ (8006c30 <_dtoa_r+0x520>)
 8006a16:	f007 020f 	and.w	r2, r7, #15
 8006a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a1e:	05f8      	lsls	r0, r7, #23
 8006a20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a2c:	d516      	bpl.n	8006a5c <_dtoa_r+0x34c>
 8006a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a32:	4b80      	ldr	r3, [pc, #512]	@ (8006c34 <_dtoa_r+0x524>)
 8006a34:	2603      	movs	r6, #3
 8006a36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a3a:	f7f9 fe77 	bl	800072c <__aeabi_ddiv>
 8006a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a42:	f004 040f 	and.w	r4, r4, #15
 8006a46:	4d7b      	ldr	r5, [pc, #492]	@ (8006c34 <_dtoa_r+0x524>)
 8006a48:	b954      	cbnz	r4, 8006a60 <_dtoa_r+0x350>
 8006a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a52:	f7f9 fe6b 	bl	800072c <__aeabi_ddiv>
 8006a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a5a:	e028      	b.n	8006aae <_dtoa_r+0x39e>
 8006a5c:	2602      	movs	r6, #2
 8006a5e:	e7f2      	b.n	8006a46 <_dtoa_r+0x336>
 8006a60:	07e1      	lsls	r1, r4, #31
 8006a62:	d508      	bpl.n	8006a76 <_dtoa_r+0x366>
 8006a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a6c:	f7f9 fd34 	bl	80004d8 <__aeabi_dmul>
 8006a70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a74:	3601      	adds	r6, #1
 8006a76:	1064      	asrs	r4, r4, #1
 8006a78:	3508      	adds	r5, #8
 8006a7a:	e7e5      	b.n	8006a48 <_dtoa_r+0x338>
 8006a7c:	f000 80d2 	beq.w	8006c24 <_dtoa_r+0x514>
 8006a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a84:	427c      	negs	r4, r7
 8006a86:	4b6a      	ldr	r3, [pc, #424]	@ (8006c30 <_dtoa_r+0x520>)
 8006a88:	f004 020f 	and.w	r2, r4, #15
 8006a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fd20 	bl	80004d8 <__aeabi_dmul>
 8006a98:	2602      	movs	r6, #2
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa0:	4d64      	ldr	r5, [pc, #400]	@ (8006c34 <_dtoa_r+0x524>)
 8006aa2:	1124      	asrs	r4, r4, #4
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	f040 80b2 	bne.w	8006c0e <_dtoa_r+0x4fe>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1d3      	bne.n	8006a56 <_dtoa_r+0x346>
 8006aae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80b7 	beq.w	8006c28 <_dtoa_r+0x518>
 8006aba:	2200      	movs	r2, #0
 8006abc:	4620      	mov	r0, r4
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4b5d      	ldr	r3, [pc, #372]	@ (8006c38 <_dtoa_r+0x528>)
 8006ac2:	f7f9 ff7b 	bl	80009bc <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f000 80ae 	beq.w	8006c28 <_dtoa_r+0x518>
 8006acc:	9b07      	ldr	r3, [sp, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80aa 	beq.w	8006c28 <_dtoa_r+0x518>
 8006ad4:	9b08      	ldr	r3, [sp, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dd37      	ble.n	8006b4a <_dtoa_r+0x43a>
 8006ada:	1e7b      	subs	r3, r7, #1
 8006adc:	4620      	mov	r0, r4
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4b55      	ldr	r3, [pc, #340]	@ (8006c3c <_dtoa_r+0x52c>)
 8006ae6:	f7f9 fcf7 	bl	80004d8 <__aeabi_dmul>
 8006aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aee:	9c08      	ldr	r4, [sp, #32]
 8006af0:	3601      	adds	r6, #1
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7f9 fc86 	bl	8000404 <__aeabi_i2d>
 8006af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006afc:	f7f9 fcec 	bl	80004d8 <__aeabi_dmul>
 8006b00:	2200      	movs	r2, #0
 8006b02:	4b4f      	ldr	r3, [pc, #316]	@ (8006c40 <_dtoa_r+0x530>)
 8006b04:	f7f9 fb32 	bl	800016c <__adddf3>
 8006b08:	4605      	mov	r5, r0
 8006b0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	f040 809a 	bne.w	8006c48 <_dtoa_r+0x538>
 8006b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c44 <_dtoa_r+0x534>)
 8006b1c:	f7f9 fb24 	bl	8000168 <__aeabi_dsub>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b28:	462a      	mov	r2, r5
 8006b2a:	4633      	mov	r3, r6
 8006b2c:	f7f9 ff64 	bl	80009f8 <__aeabi_dcmpgt>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f040 828e 	bne.w	8007052 <_dtoa_r+0x942>
 8006b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b40:	f7f9 ff3c 	bl	80009bc <__aeabi_dcmplt>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f040 8127 	bne.w	8006d98 <_dtoa_r+0x688>
 8006b4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006b52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f2c0 8163 	blt.w	8006e20 <_dtoa_r+0x710>
 8006b5a:	2f0e      	cmp	r7, #14
 8006b5c:	f300 8160 	bgt.w	8006e20 <_dtoa_r+0x710>
 8006b60:	4b33      	ldr	r3, [pc, #204]	@ (8006c30 <_dtoa_r+0x520>)
 8006b62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da03      	bge.n	8006b7c <_dtoa_r+0x46c>
 8006b74:	9b07      	ldr	r3, [sp, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f340 8100 	ble.w	8006d7c <_dtoa_r+0x66c>
 8006b7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b80:	4656      	mov	r6, sl
 8006b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f7f9 fdcf 	bl	800072c <__aeabi_ddiv>
 8006b8e:	f7f9 ff53 	bl	8000a38 <__aeabi_d2iz>
 8006b92:	4680      	mov	r8, r0
 8006b94:	f7f9 fc36 	bl	8000404 <__aeabi_i2d>
 8006b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b9c:	f7f9 fc9c 	bl	80004d8 <__aeabi_dmul>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7f9 fade 	bl	8000168 <__aeabi_dsub>
 8006bac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bb0:	9d07      	ldr	r5, [sp, #28]
 8006bb2:	f806 4b01 	strb.w	r4, [r6], #1
 8006bb6:	eba6 040a 	sub.w	r4, r6, sl
 8006bba:	42a5      	cmp	r5, r4
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	f040 8116 	bne.w	8006df0 <_dtoa_r+0x6e0>
 8006bc4:	f7f9 fad2 	bl	800016c <__adddf3>
 8006bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	f7f9 ff12 	bl	80009f8 <__aeabi_dcmpgt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f040 80f8 	bne.w	8006dca <_dtoa_r+0x6ba>
 8006bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 fee1 	bl	80009a8 <__aeabi_dcmpeq>
 8006be6:	b118      	cbz	r0, 8006bf0 <_dtoa_r+0x4e0>
 8006be8:	f018 0f01 	tst.w	r8, #1
 8006bec:	f040 80ed 	bne.w	8006dca <_dtoa_r+0x6ba>
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	4658      	mov	r0, fp
 8006bf4:	f000 fc92 	bl	800751c <_Bfree>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	7033      	strb	r3, [r6, #0]
 8006bfc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006bfe:	3701      	adds	r7, #1
 8006c00:	601f      	str	r7, [r3, #0]
 8006c02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8320 	beq.w	800724a <_dtoa_r+0xb3a>
 8006c0a:	601e      	str	r6, [r3, #0]
 8006c0c:	e31d      	b.n	800724a <_dtoa_r+0xb3a>
 8006c0e:	07e2      	lsls	r2, r4, #31
 8006c10:	d505      	bpl.n	8006c1e <_dtoa_r+0x50e>
 8006c12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c16:	f7f9 fc5f 	bl	80004d8 <__aeabi_dmul>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	1064      	asrs	r4, r4, #1
 8006c20:	3508      	adds	r5, #8
 8006c22:	e73f      	b.n	8006aa4 <_dtoa_r+0x394>
 8006c24:	2602      	movs	r6, #2
 8006c26:	e742      	b.n	8006aae <_dtoa_r+0x39e>
 8006c28:	9c07      	ldr	r4, [sp, #28]
 8006c2a:	9704      	str	r7, [sp, #16]
 8006c2c:	e761      	b.n	8006af2 <_dtoa_r+0x3e2>
 8006c2e:	bf00      	nop
 8006c30:	08008c58 	.word	0x08008c58
 8006c34:	08008c30 	.word	0x08008c30
 8006c38:	3ff00000 	.word	0x3ff00000
 8006c3c:	40240000 	.word	0x40240000
 8006c40:	401c0000 	.word	0x401c0000
 8006c44:	40140000 	.word	0x40140000
 8006c48:	4b70      	ldr	r3, [pc, #448]	@ (8006e0c <_dtoa_r+0x6fc>)
 8006c4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c54:	4454      	add	r4, sl
 8006c56:	2900      	cmp	r1, #0
 8006c58:	d045      	beq.n	8006ce6 <_dtoa_r+0x5d6>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	496c      	ldr	r1, [pc, #432]	@ (8006e10 <_dtoa_r+0x700>)
 8006c5e:	f7f9 fd65 	bl	800072c <__aeabi_ddiv>
 8006c62:	4633      	mov	r3, r6
 8006c64:	462a      	mov	r2, r5
 8006c66:	f7f9 fa7f 	bl	8000168 <__aeabi_dsub>
 8006c6a:	4656      	mov	r6, sl
 8006c6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c74:	f7f9 fee0 	bl	8000a38 <__aeabi_d2iz>
 8006c78:	4605      	mov	r5, r0
 8006c7a:	f7f9 fbc3 	bl	8000404 <__aeabi_i2d>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c86:	f7f9 fa6f 	bl	8000168 <__aeabi_dsub>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	3530      	adds	r5, #48	@ 0x30
 8006c90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c98:	f806 5b01 	strb.w	r5, [r6], #1
 8006c9c:	f7f9 fe8e 	bl	80009bc <__aeabi_dcmplt>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d163      	bne.n	8006d6c <_dtoa_r+0x65c>
 8006ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ca8:	2000      	movs	r0, #0
 8006caa:	495a      	ldr	r1, [pc, #360]	@ (8006e14 <_dtoa_r+0x704>)
 8006cac:	f7f9 fa5c 	bl	8000168 <__aeabi_dsub>
 8006cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cb4:	f7f9 fe82 	bl	80009bc <__aeabi_dcmplt>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f040 8087 	bne.w	8006dcc <_dtoa_r+0x6bc>
 8006cbe:	42a6      	cmp	r6, r4
 8006cc0:	f43f af43 	beq.w	8006b4a <_dtoa_r+0x43a>
 8006cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4b53      	ldr	r3, [pc, #332]	@ (8006e18 <_dtoa_r+0x708>)
 8006ccc:	f7f9 fc04 	bl	80004d8 <__aeabi_dmul>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cda:	4b4f      	ldr	r3, [pc, #316]	@ (8006e18 <_dtoa_r+0x708>)
 8006cdc:	f7f9 fbfc 	bl	80004d8 <__aeabi_dmul>
 8006ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce4:	e7c4      	b.n	8006c70 <_dtoa_r+0x560>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f7f9 fbf5 	bl	80004d8 <__aeabi_dmul>
 8006cee:	4656      	mov	r6, sl
 8006cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cf4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cfa:	f7f9 fe9d 	bl	8000a38 <__aeabi_d2iz>
 8006cfe:	4605      	mov	r5, r0
 8006d00:	f7f9 fb80 	bl	8000404 <__aeabi_i2d>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d0c:	f7f9 fa2c 	bl	8000168 <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	3530      	adds	r5, #48	@ 0x30
 8006d16:	f806 5b01 	strb.w	r5, [r6], #1
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	d124      	bne.n	8006d70 <_dtoa_r+0x660>
 8006d26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d2a:	4b39      	ldr	r3, [pc, #228]	@ (8006e10 <_dtoa_r+0x700>)
 8006d2c:	f7f9 fa1e 	bl	800016c <__adddf3>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d38:	f7f9 fe5e 	bl	80009f8 <__aeabi_dcmpgt>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d145      	bne.n	8006dcc <_dtoa_r+0x6bc>
 8006d40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d44:	2000      	movs	r0, #0
 8006d46:	4932      	ldr	r1, [pc, #200]	@ (8006e10 <_dtoa_r+0x700>)
 8006d48:	f7f9 fa0e 	bl	8000168 <__aeabi_dsub>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d54:	f7f9 fe32 	bl	80009bc <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f43f aef6 	beq.w	8006b4a <_dtoa_r+0x43a>
 8006d5e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d60:	1e73      	subs	r3, r6, #1
 8006d62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d68:	2b30      	cmp	r3, #48	@ 0x30
 8006d6a:	d0f8      	beq.n	8006d5e <_dtoa_r+0x64e>
 8006d6c:	9f04      	ldr	r7, [sp, #16]
 8006d6e:	e73f      	b.n	8006bf0 <_dtoa_r+0x4e0>
 8006d70:	4b29      	ldr	r3, [pc, #164]	@ (8006e18 <_dtoa_r+0x708>)
 8006d72:	f7f9 fbb1 	bl	80004d8 <__aeabi_dmul>
 8006d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d7a:	e7bc      	b.n	8006cf6 <_dtoa_r+0x5e6>
 8006d7c:	d10c      	bne.n	8006d98 <_dtoa_r+0x688>
 8006d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d82:	2200      	movs	r2, #0
 8006d84:	4b25      	ldr	r3, [pc, #148]	@ (8006e1c <_dtoa_r+0x70c>)
 8006d86:	f7f9 fba7 	bl	80004d8 <__aeabi_dmul>
 8006d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d8e:	f7f9 fe29 	bl	80009e4 <__aeabi_dcmpge>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f000 815b 	beq.w	800704e <_dtoa_r+0x93e>
 8006d98:	2400      	movs	r4, #0
 8006d9a:	4625      	mov	r5, r4
 8006d9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d9e:	4656      	mov	r6, sl
 8006da0:	43db      	mvns	r3, r3
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	2700      	movs	r7, #0
 8006da6:	4621      	mov	r1, r4
 8006da8:	4658      	mov	r0, fp
 8006daa:	f000 fbb7 	bl	800751c <_Bfree>
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	d0dc      	beq.n	8006d6c <_dtoa_r+0x65c>
 8006db2:	b12f      	cbz	r7, 8006dc0 <_dtoa_r+0x6b0>
 8006db4:	42af      	cmp	r7, r5
 8006db6:	d003      	beq.n	8006dc0 <_dtoa_r+0x6b0>
 8006db8:	4639      	mov	r1, r7
 8006dba:	4658      	mov	r0, fp
 8006dbc:	f000 fbae 	bl	800751c <_Bfree>
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4658      	mov	r0, fp
 8006dc4:	f000 fbaa 	bl	800751c <_Bfree>
 8006dc8:	e7d0      	b.n	8006d6c <_dtoa_r+0x65c>
 8006dca:	9704      	str	r7, [sp, #16]
 8006dcc:	4633      	mov	r3, r6
 8006dce:	461e      	mov	r6, r3
 8006dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dd4:	2a39      	cmp	r2, #57	@ 0x39
 8006dd6:	d107      	bne.n	8006de8 <_dtoa_r+0x6d8>
 8006dd8:	459a      	cmp	sl, r3
 8006dda:	d1f8      	bne.n	8006dce <_dtoa_r+0x6be>
 8006ddc:	9a04      	ldr	r2, [sp, #16]
 8006dde:	3201      	adds	r2, #1
 8006de0:	9204      	str	r2, [sp, #16]
 8006de2:	2230      	movs	r2, #48	@ 0x30
 8006de4:	f88a 2000 	strb.w	r2, [sl]
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	3201      	adds	r2, #1
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e7bd      	b.n	8006d6c <_dtoa_r+0x65c>
 8006df0:	2200      	movs	r2, #0
 8006df2:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <_dtoa_r+0x708>)
 8006df4:	f7f9 fb70 	bl	80004d8 <__aeabi_dmul>
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	460d      	mov	r5, r1
 8006e00:	f7f9 fdd2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f43f aebc 	beq.w	8006b82 <_dtoa_r+0x472>
 8006e0a:	e6f1      	b.n	8006bf0 <_dtoa_r+0x4e0>
 8006e0c:	08008c58 	.word	0x08008c58
 8006e10:	3fe00000 	.word	0x3fe00000
 8006e14:	3ff00000 	.word	0x3ff00000
 8006e18:	40240000 	.word	0x40240000
 8006e1c:	40140000 	.word	0x40140000
 8006e20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e22:	2a00      	cmp	r2, #0
 8006e24:	f000 80db 	beq.w	8006fde <_dtoa_r+0x8ce>
 8006e28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e2a:	2a01      	cmp	r2, #1
 8006e2c:	f300 80bf 	bgt.w	8006fae <_dtoa_r+0x89e>
 8006e30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e32:	2a00      	cmp	r2, #0
 8006e34:	f000 80b7 	beq.w	8006fa6 <_dtoa_r+0x896>
 8006e38:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e3c:	4646      	mov	r6, r8
 8006e3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e42:	2101      	movs	r1, #1
 8006e44:	441a      	add	r2, r3
 8006e46:	4658      	mov	r0, fp
 8006e48:	4498      	add	r8, r3
 8006e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e4c:	f000 fc1a 	bl	8007684 <__i2b>
 8006e50:	4605      	mov	r5, r0
 8006e52:	b15e      	cbz	r6, 8006e6c <_dtoa_r+0x75c>
 8006e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dd08      	ble.n	8006e6c <_dtoa_r+0x75c>
 8006e5a:	42b3      	cmp	r3, r6
 8006e5c:	bfa8      	it	ge
 8006e5e:	4633      	movge	r3, r6
 8006e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e62:	eba8 0803 	sub.w	r8, r8, r3
 8006e66:	1af6      	subs	r6, r6, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e6e:	b1f3      	cbz	r3, 8006eae <_dtoa_r+0x79e>
 8006e70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80b7 	beq.w	8006fe6 <_dtoa_r+0x8d6>
 8006e78:	b18c      	cbz	r4, 8006e9e <_dtoa_r+0x78e>
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4658      	mov	r0, fp
 8006e80:	f000 fcbe 	bl	8007800 <__pow5mult>
 8006e84:	464a      	mov	r2, r9
 8006e86:	4601      	mov	r1, r0
 8006e88:	4605      	mov	r5, r0
 8006e8a:	4658      	mov	r0, fp
 8006e8c:	f000 fc10 	bl	80076b0 <__multiply>
 8006e90:	4649      	mov	r1, r9
 8006e92:	9004      	str	r0, [sp, #16]
 8006e94:	4658      	mov	r0, fp
 8006e96:	f000 fb41 	bl	800751c <_Bfree>
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	4699      	mov	r9, r3
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ea0:	1b1a      	subs	r2, r3, r4
 8006ea2:	d004      	beq.n	8006eae <_dtoa_r+0x79e>
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	4658      	mov	r0, fp
 8006ea8:	f000 fcaa 	bl	8007800 <__pow5mult>
 8006eac:	4681      	mov	r9, r0
 8006eae:	2101      	movs	r1, #1
 8006eb0:	4658      	mov	r0, fp
 8006eb2:	f000 fbe7 	bl	8007684 <__i2b>
 8006eb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eb8:	4604      	mov	r4, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 81c9 	beq.w	8007252 <_dtoa_r+0xb42>
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	4658      	mov	r0, fp
 8006ec6:	f000 fc9b 	bl	8007800 <__pow5mult>
 8006eca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ecc:	4604      	mov	r4, r0
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	f300 808f 	bgt.w	8006ff2 <_dtoa_r+0x8e2>
 8006ed4:	9b02      	ldr	r3, [sp, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f040 8087 	bne.w	8006fea <_dtoa_r+0x8da>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 8083 	bne.w	8006fee <_dtoa_r+0x8de>
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006eee:	0d1b      	lsrs	r3, r3, #20
 8006ef0:	051b      	lsls	r3, r3, #20
 8006ef2:	b12b      	cbz	r3, 8006f00 <_dtoa_r+0x7f0>
 8006ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef6:	f108 0801 	add.w	r8, r8, #1
 8006efa:	3301      	adds	r3, #1
 8006efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006efe:	2301      	movs	r3, #1
 8006f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 81aa 	beq.w	800725e <_dtoa_r+0xb4e>
 8006f0a:	6923      	ldr	r3, [r4, #16]
 8006f0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f10:	6918      	ldr	r0, [r3, #16]
 8006f12:	f000 fb6b 	bl	80075ec <__hi0bits>
 8006f16:	f1c0 0020 	rsb	r0, r0, #32
 8006f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f1c:	4418      	add	r0, r3
 8006f1e:	f010 001f 	ands.w	r0, r0, #31
 8006f22:	d071      	beq.n	8007008 <_dtoa_r+0x8f8>
 8006f24:	f1c0 0320 	rsb	r3, r0, #32
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	dd65      	ble.n	8006ff8 <_dtoa_r+0x8e8>
 8006f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f2e:	f1c0 001c 	rsb	r0, r0, #28
 8006f32:	4403      	add	r3, r0
 8006f34:	4480      	add	r8, r0
 8006f36:	4406      	add	r6, r0
 8006f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3a:	f1b8 0f00 	cmp.w	r8, #0
 8006f3e:	dd05      	ble.n	8006f4c <_dtoa_r+0x83c>
 8006f40:	4649      	mov	r1, r9
 8006f42:	4642      	mov	r2, r8
 8006f44:	4658      	mov	r0, fp
 8006f46:	f000 fcb5 	bl	80078b4 <__lshift>
 8006f4a:	4681      	mov	r9, r0
 8006f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dd05      	ble.n	8006f5e <_dtoa_r+0x84e>
 8006f52:	4621      	mov	r1, r4
 8006f54:	461a      	mov	r2, r3
 8006f56:	4658      	mov	r0, fp
 8006f58:	f000 fcac 	bl	80078b4 <__lshift>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d053      	beq.n	800700c <_dtoa_r+0x8fc>
 8006f64:	4621      	mov	r1, r4
 8006f66:	4648      	mov	r0, r9
 8006f68:	f000 fd10 	bl	800798c <__mcmp>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	da4d      	bge.n	800700c <_dtoa_r+0x8fc>
 8006f70:	1e7b      	subs	r3, r7, #1
 8006f72:	4649      	mov	r1, r9
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	220a      	movs	r2, #10
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f000 faf0 	bl	8007560 <__multadd>
 8006f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f82:	4681      	mov	r9, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 816c 	beq.w	8007262 <_dtoa_r+0xb52>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	220a      	movs	r2, #10
 8006f90:	4658      	mov	r0, fp
 8006f92:	f000 fae5 	bl	8007560 <__multadd>
 8006f96:	9b08      	ldr	r3, [sp, #32]
 8006f98:	4605      	mov	r5, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dc61      	bgt.n	8007062 <_dtoa_r+0x952>
 8006f9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	dc3b      	bgt.n	800701c <_dtoa_r+0x90c>
 8006fa4:	e05d      	b.n	8007062 <_dtoa_r+0x952>
 8006fa6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fa8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006fac:	e746      	b.n	8006e3c <_dtoa_r+0x72c>
 8006fae:	9b07      	ldr	r3, [sp, #28]
 8006fb0:	1e5c      	subs	r4, r3, #1
 8006fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	bfbf      	itttt	lt
 8006fb8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006fba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006fbc:	1ae3      	sublt	r3, r4, r3
 8006fbe:	18d2      	addlt	r2, r2, r3
 8006fc0:	bfa8      	it	ge
 8006fc2:	1b1c      	subge	r4, r3, r4
 8006fc4:	9b07      	ldr	r3, [sp, #28]
 8006fc6:	bfbe      	ittt	lt
 8006fc8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006fca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006fcc:	2400      	movlt	r4, #0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bfb5      	itete	lt
 8006fd2:	eba8 0603 	sublt.w	r6, r8, r3
 8006fd6:	4646      	movge	r6, r8
 8006fd8:	2300      	movlt	r3, #0
 8006fda:	9b07      	ldrge	r3, [sp, #28]
 8006fdc:	e730      	b.n	8006e40 <_dtoa_r+0x730>
 8006fde:	4646      	mov	r6, r8
 8006fe0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fe2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006fe4:	e735      	b.n	8006e52 <_dtoa_r+0x742>
 8006fe6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fe8:	e75c      	b.n	8006ea4 <_dtoa_r+0x794>
 8006fea:	2300      	movs	r3, #0
 8006fec:	e788      	b.n	8006f00 <_dtoa_r+0x7f0>
 8006fee:	9b02      	ldr	r3, [sp, #8]
 8006ff0:	e786      	b.n	8006f00 <_dtoa_r+0x7f0>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ff6:	e788      	b.n	8006f0a <_dtoa_r+0x7fa>
 8006ff8:	d09f      	beq.n	8006f3a <_dtoa_r+0x82a>
 8006ffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ffc:	331c      	adds	r3, #28
 8006ffe:	441a      	add	r2, r3
 8007000:	4498      	add	r8, r3
 8007002:	441e      	add	r6, r3
 8007004:	9209      	str	r2, [sp, #36]	@ 0x24
 8007006:	e798      	b.n	8006f3a <_dtoa_r+0x82a>
 8007008:	4603      	mov	r3, r0
 800700a:	e7f6      	b.n	8006ffa <_dtoa_r+0x8ea>
 800700c:	9b07      	ldr	r3, [sp, #28]
 800700e:	9704      	str	r7, [sp, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	dc20      	bgt.n	8007056 <_dtoa_r+0x946>
 8007014:	9308      	str	r3, [sp, #32]
 8007016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007018:	2b02      	cmp	r3, #2
 800701a:	dd1e      	ble.n	800705a <_dtoa_r+0x94a>
 800701c:	9b08      	ldr	r3, [sp, #32]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f47f aebc 	bne.w	8006d9c <_dtoa_r+0x68c>
 8007024:	4621      	mov	r1, r4
 8007026:	2205      	movs	r2, #5
 8007028:	4658      	mov	r0, fp
 800702a:	f000 fa99 	bl	8007560 <__multadd>
 800702e:	4601      	mov	r1, r0
 8007030:	4604      	mov	r4, r0
 8007032:	4648      	mov	r0, r9
 8007034:	f000 fcaa 	bl	800798c <__mcmp>
 8007038:	2800      	cmp	r0, #0
 800703a:	f77f aeaf 	ble.w	8006d9c <_dtoa_r+0x68c>
 800703e:	2331      	movs	r3, #49	@ 0x31
 8007040:	4656      	mov	r6, sl
 8007042:	f806 3b01 	strb.w	r3, [r6], #1
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	3301      	adds	r3, #1
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	e6aa      	b.n	8006da4 <_dtoa_r+0x694>
 800704e:	9c07      	ldr	r4, [sp, #28]
 8007050:	9704      	str	r7, [sp, #16]
 8007052:	4625      	mov	r5, r4
 8007054:	e7f3      	b.n	800703e <_dtoa_r+0x92e>
 8007056:	9b07      	ldr	r3, [sp, #28]
 8007058:	9308      	str	r3, [sp, #32]
 800705a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8104 	beq.w	800726a <_dtoa_r+0xb5a>
 8007062:	2e00      	cmp	r6, #0
 8007064:	dd05      	ble.n	8007072 <_dtoa_r+0x962>
 8007066:	4629      	mov	r1, r5
 8007068:	4632      	mov	r2, r6
 800706a:	4658      	mov	r0, fp
 800706c:	f000 fc22 	bl	80078b4 <__lshift>
 8007070:	4605      	mov	r5, r0
 8007072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007074:	2b00      	cmp	r3, #0
 8007076:	d05a      	beq.n	800712e <_dtoa_r+0xa1e>
 8007078:	4658      	mov	r0, fp
 800707a:	6869      	ldr	r1, [r5, #4]
 800707c:	f000 fa0e 	bl	800749c <_Balloc>
 8007080:	4606      	mov	r6, r0
 8007082:	b928      	cbnz	r0, 8007090 <_dtoa_r+0x980>
 8007084:	4602      	mov	r2, r0
 8007086:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800708a:	4b83      	ldr	r3, [pc, #524]	@ (8007298 <_dtoa_r+0xb88>)
 800708c:	f7ff bb54 	b.w	8006738 <_dtoa_r+0x28>
 8007090:	692a      	ldr	r2, [r5, #16]
 8007092:	f105 010c 	add.w	r1, r5, #12
 8007096:	3202      	adds	r2, #2
 8007098:	0092      	lsls	r2, r2, #2
 800709a:	300c      	adds	r0, #12
 800709c:	f000 ffa8 	bl	8007ff0 <memcpy>
 80070a0:	2201      	movs	r2, #1
 80070a2:	4631      	mov	r1, r6
 80070a4:	4658      	mov	r0, fp
 80070a6:	f000 fc05 	bl	80078b4 <__lshift>
 80070aa:	462f      	mov	r7, r5
 80070ac:	4605      	mov	r5, r0
 80070ae:	f10a 0301 	add.w	r3, sl, #1
 80070b2:	9307      	str	r3, [sp, #28]
 80070b4:	9b08      	ldr	r3, [sp, #32]
 80070b6:	4453      	add	r3, sl
 80070b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ba:	9b02      	ldr	r3, [sp, #8]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c2:	9b07      	ldr	r3, [sp, #28]
 80070c4:	4621      	mov	r1, r4
 80070c6:	3b01      	subs	r3, #1
 80070c8:	4648      	mov	r0, r9
 80070ca:	9302      	str	r3, [sp, #8]
 80070cc:	f7ff fa97 	bl	80065fe <quorem>
 80070d0:	4639      	mov	r1, r7
 80070d2:	9008      	str	r0, [sp, #32]
 80070d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80070d8:	4648      	mov	r0, r9
 80070da:	f000 fc57 	bl	800798c <__mcmp>
 80070de:	462a      	mov	r2, r5
 80070e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80070e2:	4621      	mov	r1, r4
 80070e4:	4658      	mov	r0, fp
 80070e6:	f000 fc6d 	bl	80079c4 <__mdiff>
 80070ea:	68c2      	ldr	r2, [r0, #12]
 80070ec:	4606      	mov	r6, r0
 80070ee:	bb02      	cbnz	r2, 8007132 <_dtoa_r+0xa22>
 80070f0:	4601      	mov	r1, r0
 80070f2:	4648      	mov	r0, r9
 80070f4:	f000 fc4a 	bl	800798c <__mcmp>
 80070f8:	4602      	mov	r2, r0
 80070fa:	4631      	mov	r1, r6
 80070fc:	4658      	mov	r0, fp
 80070fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007100:	f000 fa0c 	bl	800751c <_Bfree>
 8007104:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007106:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007108:	9e07      	ldr	r6, [sp, #28]
 800710a:	ea43 0102 	orr.w	r1, r3, r2
 800710e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007110:	4319      	orrs	r1, r3
 8007112:	d110      	bne.n	8007136 <_dtoa_r+0xa26>
 8007114:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007118:	d029      	beq.n	800716e <_dtoa_r+0xa5e>
 800711a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	dd02      	ble.n	8007126 <_dtoa_r+0xa16>
 8007120:	9b08      	ldr	r3, [sp, #32]
 8007122:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007126:	9b02      	ldr	r3, [sp, #8]
 8007128:	f883 8000 	strb.w	r8, [r3]
 800712c:	e63b      	b.n	8006da6 <_dtoa_r+0x696>
 800712e:	4628      	mov	r0, r5
 8007130:	e7bb      	b.n	80070aa <_dtoa_r+0x99a>
 8007132:	2201      	movs	r2, #1
 8007134:	e7e1      	b.n	80070fa <_dtoa_r+0x9ea>
 8007136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	db04      	blt.n	8007146 <_dtoa_r+0xa36>
 800713c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800713e:	430b      	orrs	r3, r1
 8007140:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007142:	430b      	orrs	r3, r1
 8007144:	d120      	bne.n	8007188 <_dtoa_r+0xa78>
 8007146:	2a00      	cmp	r2, #0
 8007148:	dded      	ble.n	8007126 <_dtoa_r+0xa16>
 800714a:	4649      	mov	r1, r9
 800714c:	2201      	movs	r2, #1
 800714e:	4658      	mov	r0, fp
 8007150:	f000 fbb0 	bl	80078b4 <__lshift>
 8007154:	4621      	mov	r1, r4
 8007156:	4681      	mov	r9, r0
 8007158:	f000 fc18 	bl	800798c <__mcmp>
 800715c:	2800      	cmp	r0, #0
 800715e:	dc03      	bgt.n	8007168 <_dtoa_r+0xa58>
 8007160:	d1e1      	bne.n	8007126 <_dtoa_r+0xa16>
 8007162:	f018 0f01 	tst.w	r8, #1
 8007166:	d0de      	beq.n	8007126 <_dtoa_r+0xa16>
 8007168:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800716c:	d1d8      	bne.n	8007120 <_dtoa_r+0xa10>
 800716e:	2339      	movs	r3, #57	@ 0x39
 8007170:	9a02      	ldr	r2, [sp, #8]
 8007172:	7013      	strb	r3, [r2, #0]
 8007174:	4633      	mov	r3, r6
 8007176:	461e      	mov	r6, r3
 8007178:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800717c:	3b01      	subs	r3, #1
 800717e:	2a39      	cmp	r2, #57	@ 0x39
 8007180:	d052      	beq.n	8007228 <_dtoa_r+0xb18>
 8007182:	3201      	adds	r2, #1
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e60e      	b.n	8006da6 <_dtoa_r+0x696>
 8007188:	2a00      	cmp	r2, #0
 800718a:	dd07      	ble.n	800719c <_dtoa_r+0xa8c>
 800718c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007190:	d0ed      	beq.n	800716e <_dtoa_r+0xa5e>
 8007192:	9a02      	ldr	r2, [sp, #8]
 8007194:	f108 0301 	add.w	r3, r8, #1
 8007198:	7013      	strb	r3, [r2, #0]
 800719a:	e604      	b.n	8006da6 <_dtoa_r+0x696>
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	9a07      	ldr	r2, [sp, #28]
 80071a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80071a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d028      	beq.n	80071fc <_dtoa_r+0xaec>
 80071aa:	4649      	mov	r1, r9
 80071ac:	2300      	movs	r3, #0
 80071ae:	220a      	movs	r2, #10
 80071b0:	4658      	mov	r0, fp
 80071b2:	f000 f9d5 	bl	8007560 <__multadd>
 80071b6:	42af      	cmp	r7, r5
 80071b8:	4681      	mov	r9, r0
 80071ba:	f04f 0300 	mov.w	r3, #0
 80071be:	f04f 020a 	mov.w	r2, #10
 80071c2:	4639      	mov	r1, r7
 80071c4:	4658      	mov	r0, fp
 80071c6:	d107      	bne.n	80071d8 <_dtoa_r+0xac8>
 80071c8:	f000 f9ca 	bl	8007560 <__multadd>
 80071cc:	4607      	mov	r7, r0
 80071ce:	4605      	mov	r5, r0
 80071d0:	9b07      	ldr	r3, [sp, #28]
 80071d2:	3301      	adds	r3, #1
 80071d4:	9307      	str	r3, [sp, #28]
 80071d6:	e774      	b.n	80070c2 <_dtoa_r+0x9b2>
 80071d8:	f000 f9c2 	bl	8007560 <__multadd>
 80071dc:	4629      	mov	r1, r5
 80071de:	4607      	mov	r7, r0
 80071e0:	2300      	movs	r3, #0
 80071e2:	220a      	movs	r2, #10
 80071e4:	4658      	mov	r0, fp
 80071e6:	f000 f9bb 	bl	8007560 <__multadd>
 80071ea:	4605      	mov	r5, r0
 80071ec:	e7f0      	b.n	80071d0 <_dtoa_r+0xac0>
 80071ee:	9b08      	ldr	r3, [sp, #32]
 80071f0:	2700      	movs	r7, #0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfcc      	ite	gt
 80071f6:	461e      	movgt	r6, r3
 80071f8:	2601      	movle	r6, #1
 80071fa:	4456      	add	r6, sl
 80071fc:	4649      	mov	r1, r9
 80071fe:	2201      	movs	r2, #1
 8007200:	4658      	mov	r0, fp
 8007202:	f000 fb57 	bl	80078b4 <__lshift>
 8007206:	4621      	mov	r1, r4
 8007208:	4681      	mov	r9, r0
 800720a:	f000 fbbf 	bl	800798c <__mcmp>
 800720e:	2800      	cmp	r0, #0
 8007210:	dcb0      	bgt.n	8007174 <_dtoa_r+0xa64>
 8007212:	d102      	bne.n	800721a <_dtoa_r+0xb0a>
 8007214:	f018 0f01 	tst.w	r8, #1
 8007218:	d1ac      	bne.n	8007174 <_dtoa_r+0xa64>
 800721a:	4633      	mov	r3, r6
 800721c:	461e      	mov	r6, r3
 800721e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007222:	2a30      	cmp	r2, #48	@ 0x30
 8007224:	d0fa      	beq.n	800721c <_dtoa_r+0xb0c>
 8007226:	e5be      	b.n	8006da6 <_dtoa_r+0x696>
 8007228:	459a      	cmp	sl, r3
 800722a:	d1a4      	bne.n	8007176 <_dtoa_r+0xa66>
 800722c:	9b04      	ldr	r3, [sp, #16]
 800722e:	3301      	adds	r3, #1
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	2331      	movs	r3, #49	@ 0x31
 8007234:	f88a 3000 	strb.w	r3, [sl]
 8007238:	e5b5      	b.n	8006da6 <_dtoa_r+0x696>
 800723a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800723c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800729c <_dtoa_r+0xb8c>
 8007240:	b11b      	cbz	r3, 800724a <_dtoa_r+0xb3a>
 8007242:	f10a 0308 	add.w	r3, sl, #8
 8007246:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	4650      	mov	r0, sl
 800724c:	b017      	add	sp, #92	@ 0x5c
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007252:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007254:	2b01      	cmp	r3, #1
 8007256:	f77f ae3d 	ble.w	8006ed4 <_dtoa_r+0x7c4>
 800725a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800725c:	930a      	str	r3, [sp, #40]	@ 0x28
 800725e:	2001      	movs	r0, #1
 8007260:	e65b      	b.n	8006f1a <_dtoa_r+0x80a>
 8007262:	9b08      	ldr	r3, [sp, #32]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f77f aed6 	ble.w	8007016 <_dtoa_r+0x906>
 800726a:	4656      	mov	r6, sl
 800726c:	4621      	mov	r1, r4
 800726e:	4648      	mov	r0, r9
 8007270:	f7ff f9c5 	bl	80065fe <quorem>
 8007274:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007278:	9b08      	ldr	r3, [sp, #32]
 800727a:	f806 8b01 	strb.w	r8, [r6], #1
 800727e:	eba6 020a 	sub.w	r2, r6, sl
 8007282:	4293      	cmp	r3, r2
 8007284:	ddb3      	ble.n	80071ee <_dtoa_r+0xade>
 8007286:	4649      	mov	r1, r9
 8007288:	2300      	movs	r3, #0
 800728a:	220a      	movs	r2, #10
 800728c:	4658      	mov	r0, fp
 800728e:	f000 f967 	bl	8007560 <__multadd>
 8007292:	4681      	mov	r9, r0
 8007294:	e7ea      	b.n	800726c <_dtoa_r+0xb5c>
 8007296:	bf00      	nop
 8007298:	08008bba 	.word	0x08008bba
 800729c:	08008b3e 	.word	0x08008b3e

080072a0 <_free_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4605      	mov	r5, r0
 80072a4:	2900      	cmp	r1, #0
 80072a6:	d040      	beq.n	800732a <_free_r+0x8a>
 80072a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ac:	1f0c      	subs	r4, r1, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfb8      	it	lt
 80072b2:	18e4      	addlt	r4, r4, r3
 80072b4:	f000 f8e6 	bl	8007484 <__malloc_lock>
 80072b8:	4a1c      	ldr	r2, [pc, #112]	@ (800732c <_free_r+0x8c>)
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	b933      	cbnz	r3, 80072cc <_free_r+0x2c>
 80072be:	6063      	str	r3, [r4, #4]
 80072c0:	6014      	str	r4, [r2, #0]
 80072c2:	4628      	mov	r0, r5
 80072c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c8:	f000 b8e2 	b.w	8007490 <__malloc_unlock>
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	d908      	bls.n	80072e2 <_free_r+0x42>
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	1821      	adds	r1, r4, r0
 80072d4:	428b      	cmp	r3, r1
 80072d6:	bf01      	itttt	eq
 80072d8:	6819      	ldreq	r1, [r3, #0]
 80072da:	685b      	ldreq	r3, [r3, #4]
 80072dc:	1809      	addeq	r1, r1, r0
 80072de:	6021      	streq	r1, [r4, #0]
 80072e0:	e7ed      	b.n	80072be <_free_r+0x1e>
 80072e2:	461a      	mov	r2, r3
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	b10b      	cbz	r3, 80072ec <_free_r+0x4c>
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d9fa      	bls.n	80072e2 <_free_r+0x42>
 80072ec:	6811      	ldr	r1, [r2, #0]
 80072ee:	1850      	adds	r0, r2, r1
 80072f0:	42a0      	cmp	r0, r4
 80072f2:	d10b      	bne.n	800730c <_free_r+0x6c>
 80072f4:	6820      	ldr	r0, [r4, #0]
 80072f6:	4401      	add	r1, r0
 80072f8:	1850      	adds	r0, r2, r1
 80072fa:	4283      	cmp	r3, r0
 80072fc:	6011      	str	r1, [r2, #0]
 80072fe:	d1e0      	bne.n	80072c2 <_free_r+0x22>
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	4408      	add	r0, r1
 8007306:	6010      	str	r0, [r2, #0]
 8007308:	6053      	str	r3, [r2, #4]
 800730a:	e7da      	b.n	80072c2 <_free_r+0x22>
 800730c:	d902      	bls.n	8007314 <_free_r+0x74>
 800730e:	230c      	movs	r3, #12
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	e7d6      	b.n	80072c2 <_free_r+0x22>
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	1821      	adds	r1, r4, r0
 8007318:	428b      	cmp	r3, r1
 800731a:	bf01      	itttt	eq
 800731c:	6819      	ldreq	r1, [r3, #0]
 800731e:	685b      	ldreq	r3, [r3, #4]
 8007320:	1809      	addeq	r1, r1, r0
 8007322:	6021      	streq	r1, [r4, #0]
 8007324:	6063      	str	r3, [r4, #4]
 8007326:	6054      	str	r4, [r2, #4]
 8007328:	e7cb      	b.n	80072c2 <_free_r+0x22>
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	20000630 	.word	0x20000630

08007330 <malloc>:
 8007330:	4b02      	ldr	r3, [pc, #8]	@ (800733c <malloc+0xc>)
 8007332:	4601      	mov	r1, r0
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	f000 b825 	b.w	8007384 <_malloc_r>
 800733a:	bf00      	nop
 800733c:	20000180 	.word	0x20000180

08007340 <sbrk_aligned>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	4e0f      	ldr	r6, [pc, #60]	@ (8007380 <sbrk_aligned+0x40>)
 8007344:	460c      	mov	r4, r1
 8007346:	6831      	ldr	r1, [r6, #0]
 8007348:	4605      	mov	r5, r0
 800734a:	b911      	cbnz	r1, 8007352 <sbrk_aligned+0x12>
 800734c:	f000 fe40 	bl	8007fd0 <_sbrk_r>
 8007350:	6030      	str	r0, [r6, #0]
 8007352:	4621      	mov	r1, r4
 8007354:	4628      	mov	r0, r5
 8007356:	f000 fe3b 	bl	8007fd0 <_sbrk_r>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	d103      	bne.n	8007366 <sbrk_aligned+0x26>
 800735e:	f04f 34ff 	mov.w	r4, #4294967295
 8007362:	4620      	mov	r0, r4
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	1cc4      	adds	r4, r0, #3
 8007368:	f024 0403 	bic.w	r4, r4, #3
 800736c:	42a0      	cmp	r0, r4
 800736e:	d0f8      	beq.n	8007362 <sbrk_aligned+0x22>
 8007370:	1a21      	subs	r1, r4, r0
 8007372:	4628      	mov	r0, r5
 8007374:	f000 fe2c 	bl	8007fd0 <_sbrk_r>
 8007378:	3001      	adds	r0, #1
 800737a:	d1f2      	bne.n	8007362 <sbrk_aligned+0x22>
 800737c:	e7ef      	b.n	800735e <sbrk_aligned+0x1e>
 800737e:	bf00      	nop
 8007380:	2000062c 	.word	0x2000062c

08007384 <_malloc_r>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	1ccd      	adds	r5, r1, #3
 800738a:	f025 0503 	bic.w	r5, r5, #3
 800738e:	3508      	adds	r5, #8
 8007390:	2d0c      	cmp	r5, #12
 8007392:	bf38      	it	cc
 8007394:	250c      	movcc	r5, #12
 8007396:	2d00      	cmp	r5, #0
 8007398:	4606      	mov	r6, r0
 800739a:	db01      	blt.n	80073a0 <_malloc_r+0x1c>
 800739c:	42a9      	cmp	r1, r5
 800739e:	d904      	bls.n	80073aa <_malloc_r+0x26>
 80073a0:	230c      	movs	r3, #12
 80073a2:	6033      	str	r3, [r6, #0]
 80073a4:	2000      	movs	r0, #0
 80073a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007480 <_malloc_r+0xfc>
 80073ae:	f000 f869 	bl	8007484 <__malloc_lock>
 80073b2:	f8d8 3000 	ldr.w	r3, [r8]
 80073b6:	461c      	mov	r4, r3
 80073b8:	bb44      	cbnz	r4, 800740c <_malloc_r+0x88>
 80073ba:	4629      	mov	r1, r5
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff ffbf 	bl	8007340 <sbrk_aligned>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	4604      	mov	r4, r0
 80073c6:	d158      	bne.n	800747a <_malloc_r+0xf6>
 80073c8:	f8d8 4000 	ldr.w	r4, [r8]
 80073cc:	4627      	mov	r7, r4
 80073ce:	2f00      	cmp	r7, #0
 80073d0:	d143      	bne.n	800745a <_malloc_r+0xd6>
 80073d2:	2c00      	cmp	r4, #0
 80073d4:	d04b      	beq.n	800746e <_malloc_r+0xea>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	4639      	mov	r1, r7
 80073da:	4630      	mov	r0, r6
 80073dc:	eb04 0903 	add.w	r9, r4, r3
 80073e0:	f000 fdf6 	bl	8007fd0 <_sbrk_r>
 80073e4:	4581      	cmp	r9, r0
 80073e6:	d142      	bne.n	800746e <_malloc_r+0xea>
 80073e8:	6821      	ldr	r1, [r4, #0]
 80073ea:	4630      	mov	r0, r6
 80073ec:	1a6d      	subs	r5, r5, r1
 80073ee:	4629      	mov	r1, r5
 80073f0:	f7ff ffa6 	bl	8007340 <sbrk_aligned>
 80073f4:	3001      	adds	r0, #1
 80073f6:	d03a      	beq.n	800746e <_malloc_r+0xea>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	442b      	add	r3, r5
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	bb62      	cbnz	r2, 8007460 <_malloc_r+0xdc>
 8007406:	f8c8 7000 	str.w	r7, [r8]
 800740a:	e00f      	b.n	800742c <_malloc_r+0xa8>
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	1b52      	subs	r2, r2, r5
 8007410:	d420      	bmi.n	8007454 <_malloc_r+0xd0>
 8007412:	2a0b      	cmp	r2, #11
 8007414:	d917      	bls.n	8007446 <_malloc_r+0xc2>
 8007416:	1961      	adds	r1, r4, r5
 8007418:	42a3      	cmp	r3, r4
 800741a:	6025      	str	r5, [r4, #0]
 800741c:	bf18      	it	ne
 800741e:	6059      	strne	r1, [r3, #4]
 8007420:	6863      	ldr	r3, [r4, #4]
 8007422:	bf08      	it	eq
 8007424:	f8c8 1000 	streq.w	r1, [r8]
 8007428:	5162      	str	r2, [r4, r5]
 800742a:	604b      	str	r3, [r1, #4]
 800742c:	4630      	mov	r0, r6
 800742e:	f000 f82f 	bl	8007490 <__malloc_unlock>
 8007432:	f104 000b 	add.w	r0, r4, #11
 8007436:	1d23      	adds	r3, r4, #4
 8007438:	f020 0007 	bic.w	r0, r0, #7
 800743c:	1ac2      	subs	r2, r0, r3
 800743e:	bf1c      	itt	ne
 8007440:	1a1b      	subne	r3, r3, r0
 8007442:	50a3      	strne	r3, [r4, r2]
 8007444:	e7af      	b.n	80073a6 <_malloc_r+0x22>
 8007446:	6862      	ldr	r2, [r4, #4]
 8007448:	42a3      	cmp	r3, r4
 800744a:	bf0c      	ite	eq
 800744c:	f8c8 2000 	streq.w	r2, [r8]
 8007450:	605a      	strne	r2, [r3, #4]
 8007452:	e7eb      	b.n	800742c <_malloc_r+0xa8>
 8007454:	4623      	mov	r3, r4
 8007456:	6864      	ldr	r4, [r4, #4]
 8007458:	e7ae      	b.n	80073b8 <_malloc_r+0x34>
 800745a:	463c      	mov	r4, r7
 800745c:	687f      	ldr	r7, [r7, #4]
 800745e:	e7b6      	b.n	80073ce <_malloc_r+0x4a>
 8007460:	461a      	mov	r2, r3
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	42a3      	cmp	r3, r4
 8007466:	d1fb      	bne.n	8007460 <_malloc_r+0xdc>
 8007468:	2300      	movs	r3, #0
 800746a:	6053      	str	r3, [r2, #4]
 800746c:	e7de      	b.n	800742c <_malloc_r+0xa8>
 800746e:	230c      	movs	r3, #12
 8007470:	4630      	mov	r0, r6
 8007472:	6033      	str	r3, [r6, #0]
 8007474:	f000 f80c 	bl	8007490 <__malloc_unlock>
 8007478:	e794      	b.n	80073a4 <_malloc_r+0x20>
 800747a:	6005      	str	r5, [r0, #0]
 800747c:	e7d6      	b.n	800742c <_malloc_r+0xa8>
 800747e:	bf00      	nop
 8007480:	20000630 	.word	0x20000630

08007484 <__malloc_lock>:
 8007484:	4801      	ldr	r0, [pc, #4]	@ (800748c <__malloc_lock+0x8>)
 8007486:	f7ff b8aa 	b.w	80065de <__retarget_lock_acquire_recursive>
 800748a:	bf00      	nop
 800748c:	20000628 	.word	0x20000628

08007490 <__malloc_unlock>:
 8007490:	4801      	ldr	r0, [pc, #4]	@ (8007498 <__malloc_unlock+0x8>)
 8007492:	f7ff b8a5 	b.w	80065e0 <__retarget_lock_release_recursive>
 8007496:	bf00      	nop
 8007498:	20000628 	.word	0x20000628

0800749c <_Balloc>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	69c6      	ldr	r6, [r0, #28]
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
 80074a4:	b976      	cbnz	r6, 80074c4 <_Balloc+0x28>
 80074a6:	2010      	movs	r0, #16
 80074a8:	f7ff ff42 	bl	8007330 <malloc>
 80074ac:	4602      	mov	r2, r0
 80074ae:	61e0      	str	r0, [r4, #28]
 80074b0:	b920      	cbnz	r0, 80074bc <_Balloc+0x20>
 80074b2:	216b      	movs	r1, #107	@ 0x6b
 80074b4:	4b17      	ldr	r3, [pc, #92]	@ (8007514 <_Balloc+0x78>)
 80074b6:	4818      	ldr	r0, [pc, #96]	@ (8007518 <_Balloc+0x7c>)
 80074b8:	f000 fda8 	bl	800800c <__assert_func>
 80074bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c0:	6006      	str	r6, [r0, #0]
 80074c2:	60c6      	str	r6, [r0, #12]
 80074c4:	69e6      	ldr	r6, [r4, #28]
 80074c6:	68f3      	ldr	r3, [r6, #12]
 80074c8:	b183      	cbz	r3, 80074ec <_Balloc+0x50>
 80074ca:	69e3      	ldr	r3, [r4, #28]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074d2:	b9b8      	cbnz	r0, 8007504 <_Balloc+0x68>
 80074d4:	2101      	movs	r1, #1
 80074d6:	fa01 f605 	lsl.w	r6, r1, r5
 80074da:	1d72      	adds	r2, r6, #5
 80074dc:	4620      	mov	r0, r4
 80074de:	0092      	lsls	r2, r2, #2
 80074e0:	f000 fdb2 	bl	8008048 <_calloc_r>
 80074e4:	b160      	cbz	r0, 8007500 <_Balloc+0x64>
 80074e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074ea:	e00e      	b.n	800750a <_Balloc+0x6e>
 80074ec:	2221      	movs	r2, #33	@ 0x21
 80074ee:	2104      	movs	r1, #4
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fda9 	bl	8008048 <_calloc_r>
 80074f6:	69e3      	ldr	r3, [r4, #28]
 80074f8:	60f0      	str	r0, [r6, #12]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e4      	bne.n	80074ca <_Balloc+0x2e>
 8007500:	2000      	movs	r0, #0
 8007502:	bd70      	pop	{r4, r5, r6, pc}
 8007504:	6802      	ldr	r2, [r0, #0]
 8007506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800750a:	2300      	movs	r3, #0
 800750c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007510:	e7f7      	b.n	8007502 <_Balloc+0x66>
 8007512:	bf00      	nop
 8007514:	08008b4b 	.word	0x08008b4b
 8007518:	08008bcb 	.word	0x08008bcb

0800751c <_Bfree>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	69c6      	ldr	r6, [r0, #28]
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b976      	cbnz	r6, 8007544 <_Bfree+0x28>
 8007526:	2010      	movs	r0, #16
 8007528:	f7ff ff02 	bl	8007330 <malloc>
 800752c:	4602      	mov	r2, r0
 800752e:	61e8      	str	r0, [r5, #28]
 8007530:	b920      	cbnz	r0, 800753c <_Bfree+0x20>
 8007532:	218f      	movs	r1, #143	@ 0x8f
 8007534:	4b08      	ldr	r3, [pc, #32]	@ (8007558 <_Bfree+0x3c>)
 8007536:	4809      	ldr	r0, [pc, #36]	@ (800755c <_Bfree+0x40>)
 8007538:	f000 fd68 	bl	800800c <__assert_func>
 800753c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007540:	6006      	str	r6, [r0, #0]
 8007542:	60c6      	str	r6, [r0, #12]
 8007544:	b13c      	cbz	r4, 8007556 <_Bfree+0x3a>
 8007546:	69eb      	ldr	r3, [r5, #28]
 8007548:	6862      	ldr	r2, [r4, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007550:	6021      	str	r1, [r4, #0]
 8007552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	08008b4b 	.word	0x08008b4b
 800755c:	08008bcb 	.word	0x08008bcb

08007560 <__multadd>:
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	4607      	mov	r7, r0
 8007566:	460c      	mov	r4, r1
 8007568:	461e      	mov	r6, r3
 800756a:	2000      	movs	r0, #0
 800756c:	690d      	ldr	r5, [r1, #16]
 800756e:	f101 0c14 	add.w	ip, r1, #20
 8007572:	f8dc 3000 	ldr.w	r3, [ip]
 8007576:	3001      	adds	r0, #1
 8007578:	b299      	uxth	r1, r3
 800757a:	fb02 6101 	mla	r1, r2, r1, r6
 800757e:	0c1e      	lsrs	r6, r3, #16
 8007580:	0c0b      	lsrs	r3, r1, #16
 8007582:	fb02 3306 	mla	r3, r2, r6, r3
 8007586:	b289      	uxth	r1, r1
 8007588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800758c:	4285      	cmp	r5, r0
 800758e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007592:	f84c 1b04 	str.w	r1, [ip], #4
 8007596:	dcec      	bgt.n	8007572 <__multadd+0x12>
 8007598:	b30e      	cbz	r6, 80075de <__multadd+0x7e>
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	42ab      	cmp	r3, r5
 800759e:	dc19      	bgt.n	80075d4 <__multadd+0x74>
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	4638      	mov	r0, r7
 80075a4:	3101      	adds	r1, #1
 80075a6:	f7ff ff79 	bl	800749c <_Balloc>
 80075aa:	4680      	mov	r8, r0
 80075ac:	b928      	cbnz	r0, 80075ba <__multadd+0x5a>
 80075ae:	4602      	mov	r2, r0
 80075b0:	21ba      	movs	r1, #186	@ 0xba
 80075b2:	4b0c      	ldr	r3, [pc, #48]	@ (80075e4 <__multadd+0x84>)
 80075b4:	480c      	ldr	r0, [pc, #48]	@ (80075e8 <__multadd+0x88>)
 80075b6:	f000 fd29 	bl	800800c <__assert_func>
 80075ba:	6922      	ldr	r2, [r4, #16]
 80075bc:	f104 010c 	add.w	r1, r4, #12
 80075c0:	3202      	adds	r2, #2
 80075c2:	0092      	lsls	r2, r2, #2
 80075c4:	300c      	adds	r0, #12
 80075c6:	f000 fd13 	bl	8007ff0 <memcpy>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff ffa5 	bl	800751c <_Bfree>
 80075d2:	4644      	mov	r4, r8
 80075d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075d8:	3501      	adds	r5, #1
 80075da:	615e      	str	r6, [r3, #20]
 80075dc:	6125      	str	r5, [r4, #16]
 80075de:	4620      	mov	r0, r4
 80075e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e4:	08008bba 	.word	0x08008bba
 80075e8:	08008bcb 	.word	0x08008bcb

080075ec <__hi0bits>:
 80075ec:	4603      	mov	r3, r0
 80075ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80075f2:	bf3a      	itte	cc
 80075f4:	0403      	lslcc	r3, r0, #16
 80075f6:	2010      	movcc	r0, #16
 80075f8:	2000      	movcs	r0, #0
 80075fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075fe:	bf3c      	itt	cc
 8007600:	021b      	lslcc	r3, r3, #8
 8007602:	3008      	addcc	r0, #8
 8007604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007608:	bf3c      	itt	cc
 800760a:	011b      	lslcc	r3, r3, #4
 800760c:	3004      	addcc	r0, #4
 800760e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007612:	bf3c      	itt	cc
 8007614:	009b      	lslcc	r3, r3, #2
 8007616:	3002      	addcc	r0, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	db05      	blt.n	8007628 <__hi0bits+0x3c>
 800761c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007620:	f100 0001 	add.w	r0, r0, #1
 8007624:	bf08      	it	eq
 8007626:	2020      	moveq	r0, #32
 8007628:	4770      	bx	lr

0800762a <__lo0bits>:
 800762a:	6803      	ldr	r3, [r0, #0]
 800762c:	4602      	mov	r2, r0
 800762e:	f013 0007 	ands.w	r0, r3, #7
 8007632:	d00b      	beq.n	800764c <__lo0bits+0x22>
 8007634:	07d9      	lsls	r1, r3, #31
 8007636:	d421      	bmi.n	800767c <__lo0bits+0x52>
 8007638:	0798      	lsls	r0, r3, #30
 800763a:	bf49      	itett	mi
 800763c:	085b      	lsrmi	r3, r3, #1
 800763e:	089b      	lsrpl	r3, r3, #2
 8007640:	2001      	movmi	r0, #1
 8007642:	6013      	strmi	r3, [r2, #0]
 8007644:	bf5c      	itt	pl
 8007646:	2002      	movpl	r0, #2
 8007648:	6013      	strpl	r3, [r2, #0]
 800764a:	4770      	bx	lr
 800764c:	b299      	uxth	r1, r3
 800764e:	b909      	cbnz	r1, 8007654 <__lo0bits+0x2a>
 8007650:	2010      	movs	r0, #16
 8007652:	0c1b      	lsrs	r3, r3, #16
 8007654:	b2d9      	uxtb	r1, r3
 8007656:	b909      	cbnz	r1, 800765c <__lo0bits+0x32>
 8007658:	3008      	adds	r0, #8
 800765a:	0a1b      	lsrs	r3, r3, #8
 800765c:	0719      	lsls	r1, r3, #28
 800765e:	bf04      	itt	eq
 8007660:	091b      	lsreq	r3, r3, #4
 8007662:	3004      	addeq	r0, #4
 8007664:	0799      	lsls	r1, r3, #30
 8007666:	bf04      	itt	eq
 8007668:	089b      	lsreq	r3, r3, #2
 800766a:	3002      	addeq	r0, #2
 800766c:	07d9      	lsls	r1, r3, #31
 800766e:	d403      	bmi.n	8007678 <__lo0bits+0x4e>
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	f100 0001 	add.w	r0, r0, #1
 8007676:	d003      	beq.n	8007680 <__lo0bits+0x56>
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	4770      	bx	lr
 800767c:	2000      	movs	r0, #0
 800767e:	4770      	bx	lr
 8007680:	2020      	movs	r0, #32
 8007682:	4770      	bx	lr

08007684 <__i2b>:
 8007684:	b510      	push	{r4, lr}
 8007686:	460c      	mov	r4, r1
 8007688:	2101      	movs	r1, #1
 800768a:	f7ff ff07 	bl	800749c <_Balloc>
 800768e:	4602      	mov	r2, r0
 8007690:	b928      	cbnz	r0, 800769e <__i2b+0x1a>
 8007692:	f240 1145 	movw	r1, #325	@ 0x145
 8007696:	4b04      	ldr	r3, [pc, #16]	@ (80076a8 <__i2b+0x24>)
 8007698:	4804      	ldr	r0, [pc, #16]	@ (80076ac <__i2b+0x28>)
 800769a:	f000 fcb7 	bl	800800c <__assert_func>
 800769e:	2301      	movs	r3, #1
 80076a0:	6144      	str	r4, [r0, #20]
 80076a2:	6103      	str	r3, [r0, #16]
 80076a4:	bd10      	pop	{r4, pc}
 80076a6:	bf00      	nop
 80076a8:	08008bba 	.word	0x08008bba
 80076ac:	08008bcb 	.word	0x08008bcb

080076b0 <__multiply>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	4614      	mov	r4, r2
 80076b6:	690a      	ldr	r2, [r1, #16]
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	460f      	mov	r7, r1
 80076bc:	429a      	cmp	r2, r3
 80076be:	bfa2      	ittt	ge
 80076c0:	4623      	movge	r3, r4
 80076c2:	460c      	movge	r4, r1
 80076c4:	461f      	movge	r7, r3
 80076c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80076ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80076ce:	68a3      	ldr	r3, [r4, #8]
 80076d0:	6861      	ldr	r1, [r4, #4]
 80076d2:	eb0a 0609 	add.w	r6, sl, r9
 80076d6:	42b3      	cmp	r3, r6
 80076d8:	b085      	sub	sp, #20
 80076da:	bfb8      	it	lt
 80076dc:	3101      	addlt	r1, #1
 80076de:	f7ff fedd 	bl	800749c <_Balloc>
 80076e2:	b930      	cbnz	r0, 80076f2 <__multiply+0x42>
 80076e4:	4602      	mov	r2, r0
 80076e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80076ea:	4b43      	ldr	r3, [pc, #268]	@ (80077f8 <__multiply+0x148>)
 80076ec:	4843      	ldr	r0, [pc, #268]	@ (80077fc <__multiply+0x14c>)
 80076ee:	f000 fc8d 	bl	800800c <__assert_func>
 80076f2:	f100 0514 	add.w	r5, r0, #20
 80076f6:	462b      	mov	r3, r5
 80076f8:	2200      	movs	r2, #0
 80076fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076fe:	4543      	cmp	r3, r8
 8007700:	d321      	bcc.n	8007746 <__multiply+0x96>
 8007702:	f107 0114 	add.w	r1, r7, #20
 8007706:	f104 0214 	add.w	r2, r4, #20
 800770a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800770e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007712:	9302      	str	r3, [sp, #8]
 8007714:	1b13      	subs	r3, r2, r4
 8007716:	3b15      	subs	r3, #21
 8007718:	f023 0303 	bic.w	r3, r3, #3
 800771c:	3304      	adds	r3, #4
 800771e:	f104 0715 	add.w	r7, r4, #21
 8007722:	42ba      	cmp	r2, r7
 8007724:	bf38      	it	cc
 8007726:	2304      	movcc	r3, #4
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	9103      	str	r1, [sp, #12]
 800772e:	428b      	cmp	r3, r1
 8007730:	d80c      	bhi.n	800774c <__multiply+0x9c>
 8007732:	2e00      	cmp	r6, #0
 8007734:	dd03      	ble.n	800773e <__multiply+0x8e>
 8007736:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800773a:	2b00      	cmp	r3, #0
 800773c:	d05a      	beq.n	80077f4 <__multiply+0x144>
 800773e:	6106      	str	r6, [r0, #16]
 8007740:	b005      	add	sp, #20
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007746:	f843 2b04 	str.w	r2, [r3], #4
 800774a:	e7d8      	b.n	80076fe <__multiply+0x4e>
 800774c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007750:	f1ba 0f00 	cmp.w	sl, #0
 8007754:	d023      	beq.n	800779e <__multiply+0xee>
 8007756:	46a9      	mov	r9, r5
 8007758:	f04f 0c00 	mov.w	ip, #0
 800775c:	f104 0e14 	add.w	lr, r4, #20
 8007760:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007764:	f8d9 3000 	ldr.w	r3, [r9]
 8007768:	fa1f fb87 	uxth.w	fp, r7
 800776c:	b29b      	uxth	r3, r3
 800776e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007772:	4463      	add	r3, ip
 8007774:	f8d9 c000 	ldr.w	ip, [r9]
 8007778:	0c3f      	lsrs	r7, r7, #16
 800777a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800777e:	fb0a c707 	mla	r7, sl, r7, ip
 8007782:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007786:	b29b      	uxth	r3, r3
 8007788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800778c:	4572      	cmp	r2, lr
 800778e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007792:	f849 3b04 	str.w	r3, [r9], #4
 8007796:	d8e3      	bhi.n	8007760 <__multiply+0xb0>
 8007798:	9b01      	ldr	r3, [sp, #4]
 800779a:	f845 c003 	str.w	ip, [r5, r3]
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	3104      	adds	r1, #4
 80077a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077a6:	f1b9 0f00 	cmp.w	r9, #0
 80077aa:	d021      	beq.n	80077f0 <__multiply+0x140>
 80077ac:	46ae      	mov	lr, r5
 80077ae:	f04f 0a00 	mov.w	sl, #0
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	f104 0c14 	add.w	ip, r4, #20
 80077b8:	f8bc b000 	ldrh.w	fp, [ip]
 80077bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	fb09 770b 	mla	r7, r9, fp, r7
 80077c6:	4457      	add	r7, sl
 80077c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077cc:	f84e 3b04 	str.w	r3, [lr], #4
 80077d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077d8:	f8be 3000 	ldrh.w	r3, [lr]
 80077dc:	4562      	cmp	r2, ip
 80077de:	fb09 330a 	mla	r3, r9, sl, r3
 80077e2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80077e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077ea:	d8e5      	bhi.n	80077b8 <__multiply+0x108>
 80077ec:	9f01      	ldr	r7, [sp, #4]
 80077ee:	51eb      	str	r3, [r5, r7]
 80077f0:	3504      	adds	r5, #4
 80077f2:	e79a      	b.n	800772a <__multiply+0x7a>
 80077f4:	3e01      	subs	r6, #1
 80077f6:	e79c      	b.n	8007732 <__multiply+0x82>
 80077f8:	08008bba 	.word	0x08008bba
 80077fc:	08008bcb 	.word	0x08008bcb

08007800 <__pow5mult>:
 8007800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007804:	4615      	mov	r5, r2
 8007806:	f012 0203 	ands.w	r2, r2, #3
 800780a:	4607      	mov	r7, r0
 800780c:	460e      	mov	r6, r1
 800780e:	d007      	beq.n	8007820 <__pow5mult+0x20>
 8007810:	4c25      	ldr	r4, [pc, #148]	@ (80078a8 <__pow5mult+0xa8>)
 8007812:	3a01      	subs	r2, #1
 8007814:	2300      	movs	r3, #0
 8007816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800781a:	f7ff fea1 	bl	8007560 <__multadd>
 800781e:	4606      	mov	r6, r0
 8007820:	10ad      	asrs	r5, r5, #2
 8007822:	d03d      	beq.n	80078a0 <__pow5mult+0xa0>
 8007824:	69fc      	ldr	r4, [r7, #28]
 8007826:	b97c      	cbnz	r4, 8007848 <__pow5mult+0x48>
 8007828:	2010      	movs	r0, #16
 800782a:	f7ff fd81 	bl	8007330 <malloc>
 800782e:	4602      	mov	r2, r0
 8007830:	61f8      	str	r0, [r7, #28]
 8007832:	b928      	cbnz	r0, 8007840 <__pow5mult+0x40>
 8007834:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007838:	4b1c      	ldr	r3, [pc, #112]	@ (80078ac <__pow5mult+0xac>)
 800783a:	481d      	ldr	r0, [pc, #116]	@ (80078b0 <__pow5mult+0xb0>)
 800783c:	f000 fbe6 	bl	800800c <__assert_func>
 8007840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007844:	6004      	str	r4, [r0, #0]
 8007846:	60c4      	str	r4, [r0, #12]
 8007848:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800784c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007850:	b94c      	cbnz	r4, 8007866 <__pow5mult+0x66>
 8007852:	f240 2171 	movw	r1, #625	@ 0x271
 8007856:	4638      	mov	r0, r7
 8007858:	f7ff ff14 	bl	8007684 <__i2b>
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	f8c8 0008 	str.w	r0, [r8, #8]
 8007864:	6003      	str	r3, [r0, #0]
 8007866:	f04f 0900 	mov.w	r9, #0
 800786a:	07eb      	lsls	r3, r5, #31
 800786c:	d50a      	bpl.n	8007884 <__pow5mult+0x84>
 800786e:	4631      	mov	r1, r6
 8007870:	4622      	mov	r2, r4
 8007872:	4638      	mov	r0, r7
 8007874:	f7ff ff1c 	bl	80076b0 <__multiply>
 8007878:	4680      	mov	r8, r0
 800787a:	4631      	mov	r1, r6
 800787c:	4638      	mov	r0, r7
 800787e:	f7ff fe4d 	bl	800751c <_Bfree>
 8007882:	4646      	mov	r6, r8
 8007884:	106d      	asrs	r5, r5, #1
 8007886:	d00b      	beq.n	80078a0 <__pow5mult+0xa0>
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	b938      	cbnz	r0, 800789c <__pow5mult+0x9c>
 800788c:	4622      	mov	r2, r4
 800788e:	4621      	mov	r1, r4
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ff0d 	bl	80076b0 <__multiply>
 8007896:	6020      	str	r0, [r4, #0]
 8007898:	f8c0 9000 	str.w	r9, [r0]
 800789c:	4604      	mov	r4, r0
 800789e:	e7e4      	b.n	800786a <__pow5mult+0x6a>
 80078a0:	4630      	mov	r0, r6
 80078a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a6:	bf00      	nop
 80078a8:	08008c24 	.word	0x08008c24
 80078ac:	08008b4b 	.word	0x08008b4b
 80078b0:	08008bcb 	.word	0x08008bcb

080078b4 <__lshift>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	4607      	mov	r7, r0
 80078bc:	4691      	mov	r9, r2
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	6849      	ldr	r1, [r1, #4]
 80078c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078cc:	f108 0601 	add.w	r6, r8, #1
 80078d0:	42b3      	cmp	r3, r6
 80078d2:	db0b      	blt.n	80078ec <__lshift+0x38>
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff fde1 	bl	800749c <_Balloc>
 80078da:	4605      	mov	r5, r0
 80078dc:	b948      	cbnz	r0, 80078f2 <__lshift+0x3e>
 80078de:	4602      	mov	r2, r0
 80078e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80078e4:	4b27      	ldr	r3, [pc, #156]	@ (8007984 <__lshift+0xd0>)
 80078e6:	4828      	ldr	r0, [pc, #160]	@ (8007988 <__lshift+0xd4>)
 80078e8:	f000 fb90 	bl	800800c <__assert_func>
 80078ec:	3101      	adds	r1, #1
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	e7ee      	b.n	80078d0 <__lshift+0x1c>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f100 0114 	add.w	r1, r0, #20
 80078f8:	f100 0210 	add.w	r2, r0, #16
 80078fc:	4618      	mov	r0, r3
 80078fe:	4553      	cmp	r3, sl
 8007900:	db33      	blt.n	800796a <__lshift+0xb6>
 8007902:	6920      	ldr	r0, [r4, #16]
 8007904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007908:	f104 0314 	add.w	r3, r4, #20
 800790c:	f019 091f 	ands.w	r9, r9, #31
 8007910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007918:	d02b      	beq.n	8007972 <__lshift+0xbe>
 800791a:	468a      	mov	sl, r1
 800791c:	2200      	movs	r2, #0
 800791e:	f1c9 0e20 	rsb	lr, r9, #32
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	fa00 f009 	lsl.w	r0, r0, r9
 8007928:	4310      	orrs	r0, r2
 800792a:	f84a 0b04 	str.w	r0, [sl], #4
 800792e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007932:	459c      	cmp	ip, r3
 8007934:	fa22 f20e 	lsr.w	r2, r2, lr
 8007938:	d8f3      	bhi.n	8007922 <__lshift+0x6e>
 800793a:	ebac 0304 	sub.w	r3, ip, r4
 800793e:	3b15      	subs	r3, #21
 8007940:	f023 0303 	bic.w	r3, r3, #3
 8007944:	3304      	adds	r3, #4
 8007946:	f104 0015 	add.w	r0, r4, #21
 800794a:	4584      	cmp	ip, r0
 800794c:	bf38      	it	cc
 800794e:	2304      	movcc	r3, #4
 8007950:	50ca      	str	r2, [r1, r3]
 8007952:	b10a      	cbz	r2, 8007958 <__lshift+0xa4>
 8007954:	f108 0602 	add.w	r6, r8, #2
 8007958:	3e01      	subs	r6, #1
 800795a:	4638      	mov	r0, r7
 800795c:	4621      	mov	r1, r4
 800795e:	612e      	str	r6, [r5, #16]
 8007960:	f7ff fddc 	bl	800751c <_Bfree>
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	f842 0f04 	str.w	r0, [r2, #4]!
 800796e:	3301      	adds	r3, #1
 8007970:	e7c5      	b.n	80078fe <__lshift+0x4a>
 8007972:	3904      	subs	r1, #4
 8007974:	f853 2b04 	ldr.w	r2, [r3], #4
 8007978:	459c      	cmp	ip, r3
 800797a:	f841 2f04 	str.w	r2, [r1, #4]!
 800797e:	d8f9      	bhi.n	8007974 <__lshift+0xc0>
 8007980:	e7ea      	b.n	8007958 <__lshift+0xa4>
 8007982:	bf00      	nop
 8007984:	08008bba 	.word	0x08008bba
 8007988:	08008bcb 	.word	0x08008bcb

0800798c <__mcmp>:
 800798c:	4603      	mov	r3, r0
 800798e:	690a      	ldr	r2, [r1, #16]
 8007990:	6900      	ldr	r0, [r0, #16]
 8007992:	b530      	push	{r4, r5, lr}
 8007994:	1a80      	subs	r0, r0, r2
 8007996:	d10e      	bne.n	80079b6 <__mcmp+0x2a>
 8007998:	3314      	adds	r3, #20
 800799a:	3114      	adds	r1, #20
 800799c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079ac:	4295      	cmp	r5, r2
 80079ae:	d003      	beq.n	80079b8 <__mcmp+0x2c>
 80079b0:	d205      	bcs.n	80079be <__mcmp+0x32>
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	bd30      	pop	{r4, r5, pc}
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	d3f3      	bcc.n	80079a4 <__mcmp+0x18>
 80079bc:	e7fb      	b.n	80079b6 <__mcmp+0x2a>
 80079be:	2001      	movs	r0, #1
 80079c0:	e7f9      	b.n	80079b6 <__mcmp+0x2a>
	...

080079c4 <__mdiff>:
 80079c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	4689      	mov	r9, r1
 80079ca:	4606      	mov	r6, r0
 80079cc:	4611      	mov	r1, r2
 80079ce:	4648      	mov	r0, r9
 80079d0:	4614      	mov	r4, r2
 80079d2:	f7ff ffdb 	bl	800798c <__mcmp>
 80079d6:	1e05      	subs	r5, r0, #0
 80079d8:	d112      	bne.n	8007a00 <__mdiff+0x3c>
 80079da:	4629      	mov	r1, r5
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff fd5d 	bl	800749c <_Balloc>
 80079e2:	4602      	mov	r2, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__mdiff+0x2e>
 80079e6:	f240 2137 	movw	r1, #567	@ 0x237
 80079ea:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae4 <__mdiff+0x120>)
 80079ec:	483e      	ldr	r0, [pc, #248]	@ (8007ae8 <__mdiff+0x124>)
 80079ee:	f000 fb0d 	bl	800800c <__assert_func>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f8:	4610      	mov	r0, r2
 80079fa:	b003      	add	sp, #12
 80079fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	bfbc      	itt	lt
 8007a02:	464b      	movlt	r3, r9
 8007a04:	46a1      	movlt	r9, r4
 8007a06:	4630      	mov	r0, r6
 8007a08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a0c:	bfba      	itte	lt
 8007a0e:	461c      	movlt	r4, r3
 8007a10:	2501      	movlt	r5, #1
 8007a12:	2500      	movge	r5, #0
 8007a14:	f7ff fd42 	bl	800749c <_Balloc>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	b918      	cbnz	r0, 8007a24 <__mdiff+0x60>
 8007a1c:	f240 2145 	movw	r1, #581	@ 0x245
 8007a20:	4b30      	ldr	r3, [pc, #192]	@ (8007ae4 <__mdiff+0x120>)
 8007a22:	e7e3      	b.n	80079ec <__mdiff+0x28>
 8007a24:	f100 0b14 	add.w	fp, r0, #20
 8007a28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a2c:	f109 0310 	add.w	r3, r9, #16
 8007a30:	60c5      	str	r5, [r0, #12]
 8007a32:	f04f 0c00 	mov.w	ip, #0
 8007a36:	f109 0514 	add.w	r5, r9, #20
 8007a3a:	46d9      	mov	r9, fp
 8007a3c:	6926      	ldr	r6, [r4, #16]
 8007a3e:	f104 0e14 	add.w	lr, r4, #20
 8007a42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	9b01      	ldr	r3, [sp, #4]
 8007a4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a56:	b281      	uxth	r1, r0
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	fa1f f38a 	uxth.w	r3, sl
 8007a5e:	1a5b      	subs	r3, r3, r1
 8007a60:	0c00      	lsrs	r0, r0, #16
 8007a62:	4463      	add	r3, ip
 8007a64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a72:	4576      	cmp	r6, lr
 8007a74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a78:	f849 3b04 	str.w	r3, [r9], #4
 8007a7c:	d8e6      	bhi.n	8007a4c <__mdiff+0x88>
 8007a7e:	1b33      	subs	r3, r6, r4
 8007a80:	3b15      	subs	r3, #21
 8007a82:	f023 0303 	bic.w	r3, r3, #3
 8007a86:	3415      	adds	r4, #21
 8007a88:	3304      	adds	r3, #4
 8007a8a:	42a6      	cmp	r6, r4
 8007a8c:	bf38      	it	cc
 8007a8e:	2304      	movcc	r3, #4
 8007a90:	441d      	add	r5, r3
 8007a92:	445b      	add	r3, fp
 8007a94:	461e      	mov	r6, r3
 8007a96:	462c      	mov	r4, r5
 8007a98:	4544      	cmp	r4, r8
 8007a9a:	d30e      	bcc.n	8007aba <__mdiff+0xf6>
 8007a9c:	f108 0103 	add.w	r1, r8, #3
 8007aa0:	1b49      	subs	r1, r1, r5
 8007aa2:	f021 0103 	bic.w	r1, r1, #3
 8007aa6:	3d03      	subs	r5, #3
 8007aa8:	45a8      	cmp	r8, r5
 8007aaa:	bf38      	it	cc
 8007aac:	2100      	movcc	r1, #0
 8007aae:	440b      	add	r3, r1
 8007ab0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ab4:	b199      	cbz	r1, 8007ade <__mdiff+0x11a>
 8007ab6:	6117      	str	r7, [r2, #16]
 8007ab8:	e79e      	b.n	80079f8 <__mdiff+0x34>
 8007aba:	46e6      	mov	lr, ip
 8007abc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ac0:	fa1f fc81 	uxth.w	ip, r1
 8007ac4:	44f4      	add	ip, lr
 8007ac6:	0c08      	lsrs	r0, r1, #16
 8007ac8:	4471      	add	r1, lr
 8007aca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ace:	b289      	uxth	r1, r1
 8007ad0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ad4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ad8:	f846 1b04 	str.w	r1, [r6], #4
 8007adc:	e7dc      	b.n	8007a98 <__mdiff+0xd4>
 8007ade:	3f01      	subs	r7, #1
 8007ae0:	e7e6      	b.n	8007ab0 <__mdiff+0xec>
 8007ae2:	bf00      	nop
 8007ae4:	08008bba 	.word	0x08008bba
 8007ae8:	08008bcb 	.word	0x08008bcb

08007aec <__d2b>:
 8007aec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007af0:	2101      	movs	r1, #1
 8007af2:	4690      	mov	r8, r2
 8007af4:	4699      	mov	r9, r3
 8007af6:	9e08      	ldr	r6, [sp, #32]
 8007af8:	f7ff fcd0 	bl	800749c <_Balloc>
 8007afc:	4604      	mov	r4, r0
 8007afe:	b930      	cbnz	r0, 8007b0e <__d2b+0x22>
 8007b00:	4602      	mov	r2, r0
 8007b02:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b06:	4b23      	ldr	r3, [pc, #140]	@ (8007b94 <__d2b+0xa8>)
 8007b08:	4823      	ldr	r0, [pc, #140]	@ (8007b98 <__d2b+0xac>)
 8007b0a:	f000 fa7f 	bl	800800c <__assert_func>
 8007b0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b16:	b10d      	cbz	r5, 8007b1c <__d2b+0x30>
 8007b18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	f1b8 0300 	subs.w	r3, r8, #0
 8007b22:	d024      	beq.n	8007b6e <__d2b+0x82>
 8007b24:	4668      	mov	r0, sp
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	f7ff fd7f 	bl	800762a <__lo0bits>
 8007b2c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b30:	b1d8      	cbz	r0, 8007b6a <__d2b+0x7e>
 8007b32:	f1c0 0320 	rsb	r3, r0, #32
 8007b36:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3a:	430b      	orrs	r3, r1
 8007b3c:	40c2      	lsrs	r2, r0
 8007b3e:	6163      	str	r3, [r4, #20]
 8007b40:	9201      	str	r2, [sp, #4]
 8007b42:	9b01      	ldr	r3, [sp, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf0c      	ite	eq
 8007b48:	2201      	moveq	r2, #1
 8007b4a:	2202      	movne	r2, #2
 8007b4c:	61a3      	str	r3, [r4, #24]
 8007b4e:	6122      	str	r2, [r4, #16]
 8007b50:	b1ad      	cbz	r5, 8007b7e <__d2b+0x92>
 8007b52:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b56:	4405      	add	r5, r0
 8007b58:	6035      	str	r5, [r6, #0]
 8007b5a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	6018      	str	r0, [r3, #0]
 8007b62:	4620      	mov	r0, r4
 8007b64:	b002      	add	sp, #8
 8007b66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007b6a:	6161      	str	r1, [r4, #20]
 8007b6c:	e7e9      	b.n	8007b42 <__d2b+0x56>
 8007b6e:	a801      	add	r0, sp, #4
 8007b70:	f7ff fd5b 	bl	800762a <__lo0bits>
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	6163      	str	r3, [r4, #20]
 8007b7a:	3020      	adds	r0, #32
 8007b7c:	e7e7      	b.n	8007b4e <__d2b+0x62>
 8007b7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b86:	6030      	str	r0, [r6, #0]
 8007b88:	6918      	ldr	r0, [r3, #16]
 8007b8a:	f7ff fd2f 	bl	80075ec <__hi0bits>
 8007b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b92:	e7e4      	b.n	8007b5e <__d2b+0x72>
 8007b94:	08008bba 	.word	0x08008bba
 8007b98:	08008bcb 	.word	0x08008bcb

08007b9c <__ssputs_r>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	461f      	mov	r7, r3
 8007ba2:	688e      	ldr	r6, [r1, #8]
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	42be      	cmp	r6, r7
 8007ba8:	460c      	mov	r4, r1
 8007baa:	4690      	mov	r8, r2
 8007bac:	680b      	ldr	r3, [r1, #0]
 8007bae:	d82d      	bhi.n	8007c0c <__ssputs_r+0x70>
 8007bb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007bb8:	d026      	beq.n	8007c08 <__ssputs_r+0x6c>
 8007bba:	6965      	ldr	r5, [r4, #20]
 8007bbc:	6909      	ldr	r1, [r1, #16]
 8007bbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bc2:	eba3 0901 	sub.w	r9, r3, r1
 8007bc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bca:	1c7b      	adds	r3, r7, #1
 8007bcc:	444b      	add	r3, r9
 8007bce:	106d      	asrs	r5, r5, #1
 8007bd0:	429d      	cmp	r5, r3
 8007bd2:	bf38      	it	cc
 8007bd4:	461d      	movcc	r5, r3
 8007bd6:	0553      	lsls	r3, r2, #21
 8007bd8:	d527      	bpl.n	8007c2a <__ssputs_r+0x8e>
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7ff fbd2 	bl	8007384 <_malloc_r>
 8007be0:	4606      	mov	r6, r0
 8007be2:	b360      	cbz	r0, 8007c3e <__ssputs_r+0xa2>
 8007be4:	464a      	mov	r2, r9
 8007be6:	6921      	ldr	r1, [r4, #16]
 8007be8:	f000 fa02 	bl	8007ff0 <memcpy>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	6126      	str	r6, [r4, #16]
 8007bfa:	444e      	add	r6, r9
 8007bfc:	6026      	str	r6, [r4, #0]
 8007bfe:	463e      	mov	r6, r7
 8007c00:	6165      	str	r5, [r4, #20]
 8007c02:	eba5 0509 	sub.w	r5, r5, r9
 8007c06:	60a5      	str	r5, [r4, #8]
 8007c08:	42be      	cmp	r6, r7
 8007c0a:	d900      	bls.n	8007c0e <__ssputs_r+0x72>
 8007c0c:	463e      	mov	r6, r7
 8007c0e:	4632      	mov	r2, r6
 8007c10:	4641      	mov	r1, r8
 8007c12:	6820      	ldr	r0, [r4, #0]
 8007c14:	f000 f9c2 	bl	8007f9c <memmove>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	1b9b      	subs	r3, r3, r6
 8007c1e:	60a3      	str	r3, [r4, #8]
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	4433      	add	r3, r6
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	f000 fa32 	bl	8008094 <_realloc_r>
 8007c30:	4606      	mov	r6, r0
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d1e0      	bne.n	8007bf8 <__ssputs_r+0x5c>
 8007c36:	4650      	mov	r0, sl
 8007c38:	6921      	ldr	r1, [r4, #16]
 8007c3a:	f7ff fb31 	bl	80072a0 <_free_r>
 8007c3e:	230c      	movs	r3, #12
 8007c40:	f8ca 3000 	str.w	r3, [sl]
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	e7e9      	b.n	8007c26 <__ssputs_r+0x8a>
	...

08007c54 <_svfiprintf_r>:
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	4698      	mov	r8, r3
 8007c5a:	898b      	ldrh	r3, [r1, #12]
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	061b      	lsls	r3, r3, #24
 8007c60:	460d      	mov	r5, r1
 8007c62:	4614      	mov	r4, r2
 8007c64:	b09d      	sub	sp, #116	@ 0x74
 8007c66:	d510      	bpl.n	8007c8a <_svfiprintf_r+0x36>
 8007c68:	690b      	ldr	r3, [r1, #16]
 8007c6a:	b973      	cbnz	r3, 8007c8a <_svfiprintf_r+0x36>
 8007c6c:	2140      	movs	r1, #64	@ 0x40
 8007c6e:	f7ff fb89 	bl	8007384 <_malloc_r>
 8007c72:	6028      	str	r0, [r5, #0]
 8007c74:	6128      	str	r0, [r5, #16]
 8007c76:	b930      	cbnz	r0, 8007c86 <_svfiprintf_r+0x32>
 8007c78:	230c      	movs	r3, #12
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	b01d      	add	sp, #116	@ 0x74
 8007c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c86:	2340      	movs	r3, #64	@ 0x40
 8007c88:	616b      	str	r3, [r5, #20]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c8e:	2320      	movs	r3, #32
 8007c90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c94:	2330      	movs	r3, #48	@ 0x30
 8007c96:	f04f 0901 	mov.w	r9, #1
 8007c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c9e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007e38 <_svfiprintf_r+0x1e4>
 8007ca2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ca6:	4623      	mov	r3, r4
 8007ca8:	469a      	mov	sl, r3
 8007caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cae:	b10a      	cbz	r2, 8007cb4 <_svfiprintf_r+0x60>
 8007cb0:	2a25      	cmp	r2, #37	@ 0x25
 8007cb2:	d1f9      	bne.n	8007ca8 <_svfiprintf_r+0x54>
 8007cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8007cb8:	d00b      	beq.n	8007cd2 <_svfiprintf_r+0x7e>
 8007cba:	465b      	mov	r3, fp
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	f7ff ff6b 	bl	8007b9c <__ssputs_r>
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f000 80a7 	beq.w	8007e1a <_svfiprintf_r+0x1c6>
 8007ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cce:	445a      	add	r2, fp
 8007cd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 809f 	beq.w	8007e1a <_svfiprintf_r+0x1c6>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ce6:	f10a 0a01 	add.w	sl, sl, #1
 8007cea:	9304      	str	r3, [sp, #16]
 8007cec:	9307      	str	r3, [sp, #28]
 8007cee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cf4:	4654      	mov	r4, sl
 8007cf6:	2205      	movs	r2, #5
 8007cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cfc:	484e      	ldr	r0, [pc, #312]	@ (8007e38 <_svfiprintf_r+0x1e4>)
 8007cfe:	f7fe fc70 	bl	80065e2 <memchr>
 8007d02:	9a04      	ldr	r2, [sp, #16]
 8007d04:	b9d8      	cbnz	r0, 8007d3e <_svfiprintf_r+0xea>
 8007d06:	06d0      	lsls	r0, r2, #27
 8007d08:	bf44      	itt	mi
 8007d0a:	2320      	movmi	r3, #32
 8007d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d10:	0711      	lsls	r1, r2, #28
 8007d12:	bf44      	itt	mi
 8007d14:	232b      	movmi	r3, #43	@ 0x2b
 8007d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d20:	d015      	beq.n	8007d4e <_svfiprintf_r+0xfa>
 8007d22:	4654      	mov	r4, sl
 8007d24:	2000      	movs	r0, #0
 8007d26:	f04f 0c0a 	mov.w	ip, #10
 8007d2a:	9a07      	ldr	r2, [sp, #28]
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d32:	3b30      	subs	r3, #48	@ 0x30
 8007d34:	2b09      	cmp	r3, #9
 8007d36:	d94b      	bls.n	8007dd0 <_svfiprintf_r+0x17c>
 8007d38:	b1b0      	cbz	r0, 8007d68 <_svfiprintf_r+0x114>
 8007d3a:	9207      	str	r2, [sp, #28]
 8007d3c:	e014      	b.n	8007d68 <_svfiprintf_r+0x114>
 8007d3e:	eba0 0308 	sub.w	r3, r0, r8
 8007d42:	fa09 f303 	lsl.w	r3, r9, r3
 8007d46:	4313      	orrs	r3, r2
 8007d48:	46a2      	mov	sl, r4
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	e7d2      	b.n	8007cf4 <_svfiprintf_r+0xa0>
 8007d4e:	9b03      	ldr	r3, [sp, #12]
 8007d50:	1d19      	adds	r1, r3, #4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	9103      	str	r1, [sp, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bfbb      	ittet	lt
 8007d5a:	425b      	neglt	r3, r3
 8007d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d60:	9307      	strge	r3, [sp, #28]
 8007d62:	9307      	strlt	r3, [sp, #28]
 8007d64:	bfb8      	it	lt
 8007d66:	9204      	strlt	r2, [sp, #16]
 8007d68:	7823      	ldrb	r3, [r4, #0]
 8007d6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d6c:	d10a      	bne.n	8007d84 <_svfiprintf_r+0x130>
 8007d6e:	7863      	ldrb	r3, [r4, #1]
 8007d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d72:	d132      	bne.n	8007dda <_svfiprintf_r+0x186>
 8007d74:	9b03      	ldr	r3, [sp, #12]
 8007d76:	3402      	adds	r4, #2
 8007d78:	1d1a      	adds	r2, r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	9203      	str	r2, [sp, #12]
 8007d7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d82:	9305      	str	r3, [sp, #20]
 8007d84:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007e3c <_svfiprintf_r+0x1e8>
 8007d88:	2203      	movs	r2, #3
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	7821      	ldrb	r1, [r4, #0]
 8007d8e:	f7fe fc28 	bl	80065e2 <memchr>
 8007d92:	b138      	cbz	r0, 8007da4 <_svfiprintf_r+0x150>
 8007d94:	2240      	movs	r2, #64	@ 0x40
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	eba0 000a 	sub.w	r0, r0, sl
 8007d9c:	4082      	lsls	r2, r0
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	3401      	adds	r4, #1
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da8:	2206      	movs	r2, #6
 8007daa:	4825      	ldr	r0, [pc, #148]	@ (8007e40 <_svfiprintf_r+0x1ec>)
 8007dac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007db0:	f7fe fc17 	bl	80065e2 <memchr>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d036      	beq.n	8007e26 <_svfiprintf_r+0x1d2>
 8007db8:	4b22      	ldr	r3, [pc, #136]	@ (8007e44 <_svfiprintf_r+0x1f0>)
 8007dba:	bb1b      	cbnz	r3, 8007e04 <_svfiprintf_r+0x1b0>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	3307      	adds	r3, #7
 8007dc0:	f023 0307 	bic.w	r3, r3, #7
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	9303      	str	r3, [sp, #12]
 8007dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dca:	4433      	add	r3, r6
 8007dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dce:	e76a      	b.n	8007ca6 <_svfiprintf_r+0x52>
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dd8:	e7a8      	b.n	8007d2c <_svfiprintf_r+0xd8>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f04f 0c0a 	mov.w	ip, #10
 8007de0:	4619      	mov	r1, r3
 8007de2:	3401      	adds	r4, #1
 8007de4:	9305      	str	r3, [sp, #20]
 8007de6:	4620      	mov	r0, r4
 8007de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dec:	3a30      	subs	r2, #48	@ 0x30
 8007dee:	2a09      	cmp	r2, #9
 8007df0:	d903      	bls.n	8007dfa <_svfiprintf_r+0x1a6>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0c6      	beq.n	8007d84 <_svfiprintf_r+0x130>
 8007df6:	9105      	str	r1, [sp, #20]
 8007df8:	e7c4      	b.n	8007d84 <_svfiprintf_r+0x130>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e02:	e7f0      	b.n	8007de6 <_svfiprintf_r+0x192>
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <_svfiprintf_r+0x1f4>)
 8007e0e:	a904      	add	r1, sp, #16
 8007e10:	f7fd fe84 	bl	8005b1c <_printf_float>
 8007e14:	1c42      	adds	r2, r0, #1
 8007e16:	4606      	mov	r6, r0
 8007e18:	d1d6      	bne.n	8007dc8 <_svfiprintf_r+0x174>
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	065b      	lsls	r3, r3, #25
 8007e1e:	f53f af2d 	bmi.w	8007c7c <_svfiprintf_r+0x28>
 8007e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e24:	e72c      	b.n	8007c80 <_svfiprintf_r+0x2c>
 8007e26:	ab03      	add	r3, sp, #12
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	4b06      	ldr	r3, [pc, #24]	@ (8007e48 <_svfiprintf_r+0x1f4>)
 8007e30:	a904      	add	r1, sp, #16
 8007e32:	f7fe f911 	bl	8006058 <_printf_i>
 8007e36:	e7ed      	b.n	8007e14 <_svfiprintf_r+0x1c0>
 8007e38:	08008d20 	.word	0x08008d20
 8007e3c:	08008d26 	.word	0x08008d26
 8007e40:	08008d2a 	.word	0x08008d2a
 8007e44:	08005b1d 	.word	0x08005b1d
 8007e48:	08007b9d 	.word	0x08007b9d

08007e4c <__sflush_r>:
 8007e4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	0716      	lsls	r6, r2, #28
 8007e54:	4605      	mov	r5, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	d454      	bmi.n	8007f04 <__sflush_r+0xb8>
 8007e5a:	684b      	ldr	r3, [r1, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dc02      	bgt.n	8007e66 <__sflush_r+0x1a>
 8007e60:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dd48      	ble.n	8007ef8 <__sflush_r+0xac>
 8007e66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	d045      	beq.n	8007ef8 <__sflush_r+0xac>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e72:	682f      	ldr	r7, [r5, #0]
 8007e74:	6a21      	ldr	r1, [r4, #32]
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	d030      	beq.n	8007edc <__sflush_r+0x90>
 8007e7a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	0759      	lsls	r1, r3, #29
 8007e80:	d505      	bpl.n	8007e8e <__sflush_r+0x42>
 8007e82:	6863      	ldr	r3, [r4, #4]
 8007e84:	1ad2      	subs	r2, r2, r3
 8007e86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e88:	b10b      	cbz	r3, 8007e8e <__sflush_r+0x42>
 8007e8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e8c:	1ad2      	subs	r2, r2, r3
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4628      	mov	r0, r5
 8007e92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e94:	6a21      	ldr	r1, [r4, #32]
 8007e96:	47b0      	blx	r6
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	d106      	bne.n	8007eac <__sflush_r+0x60>
 8007e9e:	6829      	ldr	r1, [r5, #0]
 8007ea0:	291d      	cmp	r1, #29
 8007ea2:	d82b      	bhi.n	8007efc <__sflush_r+0xb0>
 8007ea4:	4a28      	ldr	r2, [pc, #160]	@ (8007f48 <__sflush_r+0xfc>)
 8007ea6:	410a      	asrs	r2, r1
 8007ea8:	07d6      	lsls	r6, r2, #31
 8007eaa:	d427      	bmi.n	8007efc <__sflush_r+0xb0>
 8007eac:	2200      	movs	r2, #0
 8007eae:	6062      	str	r2, [r4, #4]
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	04d9      	lsls	r1, r3, #19
 8007eb4:	6022      	str	r2, [r4, #0]
 8007eb6:	d504      	bpl.n	8007ec2 <__sflush_r+0x76>
 8007eb8:	1c42      	adds	r2, r0, #1
 8007eba:	d101      	bne.n	8007ec0 <__sflush_r+0x74>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b903      	cbnz	r3, 8007ec2 <__sflush_r+0x76>
 8007ec0:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ec2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ec4:	602f      	str	r7, [r5, #0]
 8007ec6:	b1b9      	cbz	r1, 8007ef8 <__sflush_r+0xac>
 8007ec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	d002      	beq.n	8007ed6 <__sflush_r+0x8a>
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f7ff f9e5 	bl	80072a0 <_free_r>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eda:	e00d      	b.n	8007ef8 <__sflush_r+0xac>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b0      	blx	r6
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	1c50      	adds	r0, r2, #1
 8007ee6:	d1c9      	bne.n	8007e7c <__sflush_r+0x30>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0c6      	beq.n	8007e7c <__sflush_r+0x30>
 8007eee:	2b1d      	cmp	r3, #29
 8007ef0:	d001      	beq.n	8007ef6 <__sflush_r+0xaa>
 8007ef2:	2b16      	cmp	r3, #22
 8007ef4:	d11d      	bne.n	8007f32 <__sflush_r+0xe6>
 8007ef6:	602f      	str	r7, [r5, #0]
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e021      	b.n	8007f40 <__sflush_r+0xf4>
 8007efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f00:	b21b      	sxth	r3, r3
 8007f02:	e01a      	b.n	8007f3a <__sflush_r+0xee>
 8007f04:	690f      	ldr	r7, [r1, #16]
 8007f06:	2f00      	cmp	r7, #0
 8007f08:	d0f6      	beq.n	8007ef8 <__sflush_r+0xac>
 8007f0a:	0793      	lsls	r3, r2, #30
 8007f0c:	bf18      	it	ne
 8007f0e:	2300      	movne	r3, #0
 8007f10:	680e      	ldr	r6, [r1, #0]
 8007f12:	bf08      	it	eq
 8007f14:	694b      	ldreq	r3, [r1, #20]
 8007f16:	1bf6      	subs	r6, r6, r7
 8007f18:	600f      	str	r7, [r1, #0]
 8007f1a:	608b      	str	r3, [r1, #8]
 8007f1c:	2e00      	cmp	r6, #0
 8007f1e:	ddeb      	ble.n	8007ef8 <__sflush_r+0xac>
 8007f20:	4633      	mov	r3, r6
 8007f22:	463a      	mov	r2, r7
 8007f24:	4628      	mov	r0, r5
 8007f26:	6a21      	ldr	r1, [r4, #32]
 8007f28:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007f2c:	47e0      	blx	ip
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	dc07      	bgt.n	8007f42 <__sflush_r+0xf6>
 8007f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3e:	81a3      	strh	r3, [r4, #12]
 8007f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f42:	4407      	add	r7, r0
 8007f44:	1a36      	subs	r6, r6, r0
 8007f46:	e7e9      	b.n	8007f1c <__sflush_r+0xd0>
 8007f48:	dfbffffe 	.word	0xdfbffffe

08007f4c <_fflush_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	690b      	ldr	r3, [r1, #16]
 8007f50:	4605      	mov	r5, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	b913      	cbnz	r3, 8007f5c <_fflush_r+0x10>
 8007f56:	2500      	movs	r5, #0
 8007f58:	4628      	mov	r0, r5
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	b118      	cbz	r0, 8007f66 <_fflush_r+0x1a>
 8007f5e:	6a03      	ldr	r3, [r0, #32]
 8007f60:	b90b      	cbnz	r3, 8007f66 <_fflush_r+0x1a>
 8007f62:	f7fe fa25 	bl	80063b0 <__sinit>
 8007f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f3      	beq.n	8007f56 <_fflush_r+0xa>
 8007f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f70:	07d0      	lsls	r0, r2, #31
 8007f72:	d404      	bmi.n	8007f7e <_fflush_r+0x32>
 8007f74:	0599      	lsls	r1, r3, #22
 8007f76:	d402      	bmi.n	8007f7e <_fflush_r+0x32>
 8007f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f7a:	f7fe fb30 	bl	80065de <__retarget_lock_acquire_recursive>
 8007f7e:	4628      	mov	r0, r5
 8007f80:	4621      	mov	r1, r4
 8007f82:	f7ff ff63 	bl	8007e4c <__sflush_r>
 8007f86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f88:	4605      	mov	r5, r0
 8007f8a:	07da      	lsls	r2, r3, #31
 8007f8c:	d4e4      	bmi.n	8007f58 <_fflush_r+0xc>
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	059b      	lsls	r3, r3, #22
 8007f92:	d4e1      	bmi.n	8007f58 <_fflush_r+0xc>
 8007f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f96:	f7fe fb23 	bl	80065e0 <__retarget_lock_release_recursive>
 8007f9a:	e7dd      	b.n	8007f58 <_fflush_r+0xc>

08007f9c <memmove>:
 8007f9c:	4288      	cmp	r0, r1
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	eb01 0402 	add.w	r4, r1, r2
 8007fa4:	d902      	bls.n	8007fac <memmove+0x10>
 8007fa6:	4284      	cmp	r4, r0
 8007fa8:	4623      	mov	r3, r4
 8007faa:	d807      	bhi.n	8007fbc <memmove+0x20>
 8007fac:	1e43      	subs	r3, r0, #1
 8007fae:	42a1      	cmp	r1, r4
 8007fb0:	d008      	beq.n	8007fc4 <memmove+0x28>
 8007fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fba:	e7f8      	b.n	8007fae <memmove+0x12>
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4402      	add	r2, r0
 8007fc0:	428a      	cmp	r2, r1
 8007fc2:	d100      	bne.n	8007fc6 <memmove+0x2a>
 8007fc4:	bd10      	pop	{r4, pc}
 8007fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fce:	e7f7      	b.n	8007fc0 <memmove+0x24>

08007fd0 <_sbrk_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4d05      	ldr	r5, [pc, #20]	@ (8007fec <_sbrk_r+0x1c>)
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	f7f9 ffd2 	bl	8001f84 <_sbrk>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_sbrk_r+0x1a>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_sbrk_r+0x1a>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20000624 	.word	0x20000624

08007ff0 <memcpy>:
 8007ff0:	440a      	add	r2, r1
 8007ff2:	4291      	cmp	r1, r2
 8007ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ff8:	d100      	bne.n	8007ffc <memcpy+0xc>
 8007ffa:	4770      	bx	lr
 8007ffc:	b510      	push	{r4, lr}
 8007ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008002:	4291      	cmp	r1, r2
 8008004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008008:	d1f9      	bne.n	8007ffe <memcpy+0xe>
 800800a:	bd10      	pop	{r4, pc}

0800800c <__assert_func>:
 800800c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800800e:	4614      	mov	r4, r2
 8008010:	461a      	mov	r2, r3
 8008012:	4b09      	ldr	r3, [pc, #36]	@ (8008038 <__assert_func+0x2c>)
 8008014:	4605      	mov	r5, r0
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68d8      	ldr	r0, [r3, #12]
 800801a:	b954      	cbnz	r4, 8008032 <__assert_func+0x26>
 800801c:	4b07      	ldr	r3, [pc, #28]	@ (800803c <__assert_func+0x30>)
 800801e:	461c      	mov	r4, r3
 8008020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008024:	9100      	str	r1, [sp, #0]
 8008026:	462b      	mov	r3, r5
 8008028:	4905      	ldr	r1, [pc, #20]	@ (8008040 <__assert_func+0x34>)
 800802a:	f000 f86f 	bl	800810c <fiprintf>
 800802e:	f000 f87f 	bl	8008130 <abort>
 8008032:	4b04      	ldr	r3, [pc, #16]	@ (8008044 <__assert_func+0x38>)
 8008034:	e7f4      	b.n	8008020 <__assert_func+0x14>
 8008036:	bf00      	nop
 8008038:	20000180 	.word	0x20000180
 800803c:	08008d76 	.word	0x08008d76
 8008040:	08008d48 	.word	0x08008d48
 8008044:	08008d3b 	.word	0x08008d3b

08008048 <_calloc_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	fba1 5402 	umull	r5, r4, r1, r2
 800804e:	b93c      	cbnz	r4, 8008060 <_calloc_r+0x18>
 8008050:	4629      	mov	r1, r5
 8008052:	f7ff f997 	bl	8007384 <_malloc_r>
 8008056:	4606      	mov	r6, r0
 8008058:	b928      	cbnz	r0, 8008066 <_calloc_r+0x1e>
 800805a:	2600      	movs	r6, #0
 800805c:	4630      	mov	r0, r6
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	220c      	movs	r2, #12
 8008062:	6002      	str	r2, [r0, #0]
 8008064:	e7f9      	b.n	800805a <_calloc_r+0x12>
 8008066:	462a      	mov	r2, r5
 8008068:	4621      	mov	r1, r4
 800806a:	f7fe fa3a 	bl	80064e2 <memset>
 800806e:	e7f5      	b.n	800805c <_calloc_r+0x14>

08008070 <__ascii_mbtowc>:
 8008070:	b082      	sub	sp, #8
 8008072:	b901      	cbnz	r1, 8008076 <__ascii_mbtowc+0x6>
 8008074:	a901      	add	r1, sp, #4
 8008076:	b142      	cbz	r2, 800808a <__ascii_mbtowc+0x1a>
 8008078:	b14b      	cbz	r3, 800808e <__ascii_mbtowc+0x1e>
 800807a:	7813      	ldrb	r3, [r2, #0]
 800807c:	600b      	str	r3, [r1, #0]
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	1e10      	subs	r0, r2, #0
 8008082:	bf18      	it	ne
 8008084:	2001      	movne	r0, #1
 8008086:	b002      	add	sp, #8
 8008088:	4770      	bx	lr
 800808a:	4610      	mov	r0, r2
 800808c:	e7fb      	b.n	8008086 <__ascii_mbtowc+0x16>
 800808e:	f06f 0001 	mvn.w	r0, #1
 8008092:	e7f8      	b.n	8008086 <__ascii_mbtowc+0x16>

08008094 <_realloc_r>:
 8008094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008098:	4680      	mov	r8, r0
 800809a:	4615      	mov	r5, r2
 800809c:	460c      	mov	r4, r1
 800809e:	b921      	cbnz	r1, 80080aa <_realloc_r+0x16>
 80080a0:	4611      	mov	r1, r2
 80080a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a6:	f7ff b96d 	b.w	8007384 <_malloc_r>
 80080aa:	b92a      	cbnz	r2, 80080b8 <_realloc_r+0x24>
 80080ac:	f7ff f8f8 	bl	80072a0 <_free_r>
 80080b0:	2400      	movs	r4, #0
 80080b2:	4620      	mov	r0, r4
 80080b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b8:	f000 f841 	bl	800813e <_malloc_usable_size_r>
 80080bc:	4285      	cmp	r5, r0
 80080be:	4606      	mov	r6, r0
 80080c0:	d802      	bhi.n	80080c8 <_realloc_r+0x34>
 80080c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080c6:	d8f4      	bhi.n	80080b2 <_realloc_r+0x1e>
 80080c8:	4629      	mov	r1, r5
 80080ca:	4640      	mov	r0, r8
 80080cc:	f7ff f95a 	bl	8007384 <_malloc_r>
 80080d0:	4607      	mov	r7, r0
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d0ec      	beq.n	80080b0 <_realloc_r+0x1c>
 80080d6:	42b5      	cmp	r5, r6
 80080d8:	462a      	mov	r2, r5
 80080da:	4621      	mov	r1, r4
 80080dc:	bf28      	it	cs
 80080de:	4632      	movcs	r2, r6
 80080e0:	f7ff ff86 	bl	8007ff0 <memcpy>
 80080e4:	4621      	mov	r1, r4
 80080e6:	4640      	mov	r0, r8
 80080e8:	f7ff f8da 	bl	80072a0 <_free_r>
 80080ec:	463c      	mov	r4, r7
 80080ee:	e7e0      	b.n	80080b2 <_realloc_r+0x1e>

080080f0 <__ascii_wctomb>:
 80080f0:	4603      	mov	r3, r0
 80080f2:	4608      	mov	r0, r1
 80080f4:	b141      	cbz	r1, 8008108 <__ascii_wctomb+0x18>
 80080f6:	2aff      	cmp	r2, #255	@ 0xff
 80080f8:	d904      	bls.n	8008104 <__ascii_wctomb+0x14>
 80080fa:	228a      	movs	r2, #138	@ 0x8a
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	4770      	bx	lr
 8008104:	2001      	movs	r0, #1
 8008106:	700a      	strb	r2, [r1, #0]
 8008108:	4770      	bx	lr
	...

0800810c <fiprintf>:
 800810c:	b40e      	push	{r1, r2, r3}
 800810e:	b503      	push	{r0, r1, lr}
 8008110:	4601      	mov	r1, r0
 8008112:	ab03      	add	r3, sp, #12
 8008114:	4805      	ldr	r0, [pc, #20]	@ (800812c <fiprintf+0x20>)
 8008116:	f853 2b04 	ldr.w	r2, [r3], #4
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	f000 f83d 	bl	800819c <_vfiprintf_r>
 8008122:	b002      	add	sp, #8
 8008124:	f85d eb04 	ldr.w	lr, [sp], #4
 8008128:	b003      	add	sp, #12
 800812a:	4770      	bx	lr
 800812c:	20000180 	.word	0x20000180

08008130 <abort>:
 8008130:	2006      	movs	r0, #6
 8008132:	b508      	push	{r3, lr}
 8008134:	f000 fa06 	bl	8008544 <raise>
 8008138:	2001      	movs	r0, #1
 800813a:	f7f9 feae 	bl	8001e9a <_exit>

0800813e <_malloc_usable_size_r>:
 800813e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008142:	1f18      	subs	r0, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	bfbc      	itt	lt
 8008148:	580b      	ldrlt	r3, [r1, r0]
 800814a:	18c0      	addlt	r0, r0, r3
 800814c:	4770      	bx	lr

0800814e <__sfputc_r>:
 800814e:	6893      	ldr	r3, [r2, #8]
 8008150:	b410      	push	{r4}
 8008152:	3b01      	subs	r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	6093      	str	r3, [r2, #8]
 8008158:	da07      	bge.n	800816a <__sfputc_r+0x1c>
 800815a:	6994      	ldr	r4, [r2, #24]
 800815c:	42a3      	cmp	r3, r4
 800815e:	db01      	blt.n	8008164 <__sfputc_r+0x16>
 8008160:	290a      	cmp	r1, #10
 8008162:	d102      	bne.n	800816a <__sfputc_r+0x1c>
 8008164:	bc10      	pop	{r4}
 8008166:	f000 b931 	b.w	80083cc <__swbuf_r>
 800816a:	6813      	ldr	r3, [r2, #0]
 800816c:	1c58      	adds	r0, r3, #1
 800816e:	6010      	str	r0, [r2, #0]
 8008170:	7019      	strb	r1, [r3, #0]
 8008172:	4608      	mov	r0, r1
 8008174:	bc10      	pop	{r4}
 8008176:	4770      	bx	lr

08008178 <__sfputs_r>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	4614      	mov	r4, r2
 8008180:	18d5      	adds	r5, r2, r3
 8008182:	42ac      	cmp	r4, r5
 8008184:	d101      	bne.n	800818a <__sfputs_r+0x12>
 8008186:	2000      	movs	r0, #0
 8008188:	e007      	b.n	800819a <__sfputs_r+0x22>
 800818a:	463a      	mov	r2, r7
 800818c:	4630      	mov	r0, r6
 800818e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008192:	f7ff ffdc 	bl	800814e <__sfputc_r>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d1f3      	bne.n	8008182 <__sfputs_r+0xa>
 800819a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800819c <_vfiprintf_r>:
 800819c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a0:	460d      	mov	r5, r1
 80081a2:	4614      	mov	r4, r2
 80081a4:	4698      	mov	r8, r3
 80081a6:	4606      	mov	r6, r0
 80081a8:	b09d      	sub	sp, #116	@ 0x74
 80081aa:	b118      	cbz	r0, 80081b4 <_vfiprintf_r+0x18>
 80081ac:	6a03      	ldr	r3, [r0, #32]
 80081ae:	b90b      	cbnz	r3, 80081b4 <_vfiprintf_r+0x18>
 80081b0:	f7fe f8fe 	bl	80063b0 <__sinit>
 80081b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081b6:	07d9      	lsls	r1, r3, #31
 80081b8:	d405      	bmi.n	80081c6 <_vfiprintf_r+0x2a>
 80081ba:	89ab      	ldrh	r3, [r5, #12]
 80081bc:	059a      	lsls	r2, r3, #22
 80081be:	d402      	bmi.n	80081c6 <_vfiprintf_r+0x2a>
 80081c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081c2:	f7fe fa0c 	bl	80065de <__retarget_lock_acquire_recursive>
 80081c6:	89ab      	ldrh	r3, [r5, #12]
 80081c8:	071b      	lsls	r3, r3, #28
 80081ca:	d501      	bpl.n	80081d0 <_vfiprintf_r+0x34>
 80081cc:	692b      	ldr	r3, [r5, #16]
 80081ce:	b99b      	cbnz	r3, 80081f8 <_vfiprintf_r+0x5c>
 80081d0:	4629      	mov	r1, r5
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 f938 	bl	8008448 <__swsetup_r>
 80081d8:	b170      	cbz	r0, 80081f8 <_vfiprintf_r+0x5c>
 80081da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081dc:	07dc      	lsls	r4, r3, #31
 80081de:	d504      	bpl.n	80081ea <_vfiprintf_r+0x4e>
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	b01d      	add	sp, #116	@ 0x74
 80081e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ea:	89ab      	ldrh	r3, [r5, #12]
 80081ec:	0598      	lsls	r0, r3, #22
 80081ee:	d4f7      	bmi.n	80081e0 <_vfiprintf_r+0x44>
 80081f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081f2:	f7fe f9f5 	bl	80065e0 <__retarget_lock_release_recursive>
 80081f6:	e7f3      	b.n	80081e0 <_vfiprintf_r+0x44>
 80081f8:	2300      	movs	r3, #0
 80081fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80081fc:	2320      	movs	r3, #32
 80081fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008202:	2330      	movs	r3, #48	@ 0x30
 8008204:	f04f 0901 	mov.w	r9, #1
 8008208:	f8cd 800c 	str.w	r8, [sp, #12]
 800820c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80083b8 <_vfiprintf_r+0x21c>
 8008210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008214:	4623      	mov	r3, r4
 8008216:	469a      	mov	sl, r3
 8008218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800821c:	b10a      	cbz	r2, 8008222 <_vfiprintf_r+0x86>
 800821e:	2a25      	cmp	r2, #37	@ 0x25
 8008220:	d1f9      	bne.n	8008216 <_vfiprintf_r+0x7a>
 8008222:	ebba 0b04 	subs.w	fp, sl, r4
 8008226:	d00b      	beq.n	8008240 <_vfiprintf_r+0xa4>
 8008228:	465b      	mov	r3, fp
 800822a:	4622      	mov	r2, r4
 800822c:	4629      	mov	r1, r5
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff ffa2 	bl	8008178 <__sfputs_r>
 8008234:	3001      	adds	r0, #1
 8008236:	f000 80a7 	beq.w	8008388 <_vfiprintf_r+0x1ec>
 800823a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800823c:	445a      	add	r2, fp
 800823e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008240:	f89a 3000 	ldrb.w	r3, [sl]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 809f 	beq.w	8008388 <_vfiprintf_r+0x1ec>
 800824a:	2300      	movs	r3, #0
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008254:	f10a 0a01 	add.w	sl, sl, #1
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	9307      	str	r3, [sp, #28]
 800825c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008260:	931a      	str	r3, [sp, #104]	@ 0x68
 8008262:	4654      	mov	r4, sl
 8008264:	2205      	movs	r2, #5
 8008266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826a:	4853      	ldr	r0, [pc, #332]	@ (80083b8 <_vfiprintf_r+0x21c>)
 800826c:	f7fe f9b9 	bl	80065e2 <memchr>
 8008270:	9a04      	ldr	r2, [sp, #16]
 8008272:	b9d8      	cbnz	r0, 80082ac <_vfiprintf_r+0x110>
 8008274:	06d1      	lsls	r1, r2, #27
 8008276:	bf44      	itt	mi
 8008278:	2320      	movmi	r3, #32
 800827a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800827e:	0713      	lsls	r3, r2, #28
 8008280:	bf44      	itt	mi
 8008282:	232b      	movmi	r3, #43	@ 0x2b
 8008284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008288:	f89a 3000 	ldrb.w	r3, [sl]
 800828c:	2b2a      	cmp	r3, #42	@ 0x2a
 800828e:	d015      	beq.n	80082bc <_vfiprintf_r+0x120>
 8008290:	4654      	mov	r4, sl
 8008292:	2000      	movs	r0, #0
 8008294:	f04f 0c0a 	mov.w	ip, #10
 8008298:	9a07      	ldr	r2, [sp, #28]
 800829a:	4621      	mov	r1, r4
 800829c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a0:	3b30      	subs	r3, #48	@ 0x30
 80082a2:	2b09      	cmp	r3, #9
 80082a4:	d94b      	bls.n	800833e <_vfiprintf_r+0x1a2>
 80082a6:	b1b0      	cbz	r0, 80082d6 <_vfiprintf_r+0x13a>
 80082a8:	9207      	str	r2, [sp, #28]
 80082aa:	e014      	b.n	80082d6 <_vfiprintf_r+0x13a>
 80082ac:	eba0 0308 	sub.w	r3, r0, r8
 80082b0:	fa09 f303 	lsl.w	r3, r9, r3
 80082b4:	4313      	orrs	r3, r2
 80082b6:	46a2      	mov	sl, r4
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	e7d2      	b.n	8008262 <_vfiprintf_r+0xc6>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	1d19      	adds	r1, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	9103      	str	r1, [sp, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfbb      	ittet	lt
 80082c8:	425b      	neglt	r3, r3
 80082ca:	f042 0202 	orrlt.w	r2, r2, #2
 80082ce:	9307      	strge	r3, [sp, #28]
 80082d0:	9307      	strlt	r3, [sp, #28]
 80082d2:	bfb8      	it	lt
 80082d4:	9204      	strlt	r2, [sp, #16]
 80082d6:	7823      	ldrb	r3, [r4, #0]
 80082d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80082da:	d10a      	bne.n	80082f2 <_vfiprintf_r+0x156>
 80082dc:	7863      	ldrb	r3, [r4, #1]
 80082de:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e0:	d132      	bne.n	8008348 <_vfiprintf_r+0x1ac>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	3402      	adds	r4, #2
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	9203      	str	r2, [sp, #12]
 80082ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082f0:	9305      	str	r3, [sp, #20]
 80082f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80083bc <_vfiprintf_r+0x220>
 80082f6:	2203      	movs	r2, #3
 80082f8:	4650      	mov	r0, sl
 80082fa:	7821      	ldrb	r1, [r4, #0]
 80082fc:	f7fe f971 	bl	80065e2 <memchr>
 8008300:	b138      	cbz	r0, 8008312 <_vfiprintf_r+0x176>
 8008302:	2240      	movs	r2, #64	@ 0x40
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	eba0 000a 	sub.w	r0, r0, sl
 800830a:	4082      	lsls	r2, r0
 800830c:	4313      	orrs	r3, r2
 800830e:	3401      	adds	r4, #1
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008316:	2206      	movs	r2, #6
 8008318:	4829      	ldr	r0, [pc, #164]	@ (80083c0 <_vfiprintf_r+0x224>)
 800831a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800831e:	f7fe f960 	bl	80065e2 <memchr>
 8008322:	2800      	cmp	r0, #0
 8008324:	d03f      	beq.n	80083a6 <_vfiprintf_r+0x20a>
 8008326:	4b27      	ldr	r3, [pc, #156]	@ (80083c4 <_vfiprintf_r+0x228>)
 8008328:	bb1b      	cbnz	r3, 8008372 <_vfiprintf_r+0x1d6>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	3307      	adds	r3, #7
 800832e:	f023 0307 	bic.w	r3, r3, #7
 8008332:	3308      	adds	r3, #8
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008338:	443b      	add	r3, r7
 800833a:	9309      	str	r3, [sp, #36]	@ 0x24
 800833c:	e76a      	b.n	8008214 <_vfiprintf_r+0x78>
 800833e:	460c      	mov	r4, r1
 8008340:	2001      	movs	r0, #1
 8008342:	fb0c 3202 	mla	r2, ip, r2, r3
 8008346:	e7a8      	b.n	800829a <_vfiprintf_r+0xfe>
 8008348:	2300      	movs	r3, #0
 800834a:	f04f 0c0a 	mov.w	ip, #10
 800834e:	4619      	mov	r1, r3
 8008350:	3401      	adds	r4, #1
 8008352:	9305      	str	r3, [sp, #20]
 8008354:	4620      	mov	r0, r4
 8008356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800835a:	3a30      	subs	r2, #48	@ 0x30
 800835c:	2a09      	cmp	r2, #9
 800835e:	d903      	bls.n	8008368 <_vfiprintf_r+0x1cc>
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0c6      	beq.n	80082f2 <_vfiprintf_r+0x156>
 8008364:	9105      	str	r1, [sp, #20]
 8008366:	e7c4      	b.n	80082f2 <_vfiprintf_r+0x156>
 8008368:	4604      	mov	r4, r0
 800836a:	2301      	movs	r3, #1
 800836c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008370:	e7f0      	b.n	8008354 <_vfiprintf_r+0x1b8>
 8008372:	ab03      	add	r3, sp, #12
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	462a      	mov	r2, r5
 8008378:	4630      	mov	r0, r6
 800837a:	4b13      	ldr	r3, [pc, #76]	@ (80083c8 <_vfiprintf_r+0x22c>)
 800837c:	a904      	add	r1, sp, #16
 800837e:	f7fd fbcd 	bl	8005b1c <_printf_float>
 8008382:	4607      	mov	r7, r0
 8008384:	1c78      	adds	r0, r7, #1
 8008386:	d1d6      	bne.n	8008336 <_vfiprintf_r+0x19a>
 8008388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800838a:	07d9      	lsls	r1, r3, #31
 800838c:	d405      	bmi.n	800839a <_vfiprintf_r+0x1fe>
 800838e:	89ab      	ldrh	r3, [r5, #12]
 8008390:	059a      	lsls	r2, r3, #22
 8008392:	d402      	bmi.n	800839a <_vfiprintf_r+0x1fe>
 8008394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008396:	f7fe f923 	bl	80065e0 <__retarget_lock_release_recursive>
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	065b      	lsls	r3, r3, #25
 800839e:	f53f af1f 	bmi.w	80081e0 <_vfiprintf_r+0x44>
 80083a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083a4:	e71e      	b.n	80081e4 <_vfiprintf_r+0x48>
 80083a6:	ab03      	add	r3, sp, #12
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	462a      	mov	r2, r5
 80083ac:	4630      	mov	r0, r6
 80083ae:	4b06      	ldr	r3, [pc, #24]	@ (80083c8 <_vfiprintf_r+0x22c>)
 80083b0:	a904      	add	r1, sp, #16
 80083b2:	f7fd fe51 	bl	8006058 <_printf_i>
 80083b6:	e7e4      	b.n	8008382 <_vfiprintf_r+0x1e6>
 80083b8:	08008d20 	.word	0x08008d20
 80083bc:	08008d26 	.word	0x08008d26
 80083c0:	08008d2a 	.word	0x08008d2a
 80083c4:	08005b1d 	.word	0x08005b1d
 80083c8:	08008179 	.word	0x08008179

080083cc <__swbuf_r>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	460e      	mov	r6, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	4605      	mov	r5, r0
 80083d4:	b118      	cbz	r0, 80083de <__swbuf_r+0x12>
 80083d6:	6a03      	ldr	r3, [r0, #32]
 80083d8:	b90b      	cbnz	r3, 80083de <__swbuf_r+0x12>
 80083da:	f7fd ffe9 	bl	80063b0 <__sinit>
 80083de:	69a3      	ldr	r3, [r4, #24]
 80083e0:	60a3      	str	r3, [r4, #8]
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	071a      	lsls	r2, r3, #28
 80083e6:	d501      	bpl.n	80083ec <__swbuf_r+0x20>
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	b943      	cbnz	r3, 80083fe <__swbuf_r+0x32>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4628      	mov	r0, r5
 80083f0:	f000 f82a 	bl	8008448 <__swsetup_r>
 80083f4:	b118      	cbz	r0, 80083fe <__swbuf_r+0x32>
 80083f6:	f04f 37ff 	mov.w	r7, #4294967295
 80083fa:	4638      	mov	r0, r7
 80083fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	6922      	ldr	r2, [r4, #16]
 8008402:	b2f6      	uxtb	r6, r6
 8008404:	1a98      	subs	r0, r3, r2
 8008406:	6963      	ldr	r3, [r4, #20]
 8008408:	4637      	mov	r7, r6
 800840a:	4283      	cmp	r3, r0
 800840c:	dc05      	bgt.n	800841a <__swbuf_r+0x4e>
 800840e:	4621      	mov	r1, r4
 8008410:	4628      	mov	r0, r5
 8008412:	f7ff fd9b 	bl	8007f4c <_fflush_r>
 8008416:	2800      	cmp	r0, #0
 8008418:	d1ed      	bne.n	80083f6 <__swbuf_r+0x2a>
 800841a:	68a3      	ldr	r3, [r4, #8]
 800841c:	3b01      	subs	r3, #1
 800841e:	60a3      	str	r3, [r4, #8]
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	6022      	str	r2, [r4, #0]
 8008426:	701e      	strb	r6, [r3, #0]
 8008428:	6962      	ldr	r2, [r4, #20]
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	429a      	cmp	r2, r3
 800842e:	d004      	beq.n	800843a <__swbuf_r+0x6e>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	07db      	lsls	r3, r3, #31
 8008434:	d5e1      	bpl.n	80083fa <__swbuf_r+0x2e>
 8008436:	2e0a      	cmp	r6, #10
 8008438:	d1df      	bne.n	80083fa <__swbuf_r+0x2e>
 800843a:	4621      	mov	r1, r4
 800843c:	4628      	mov	r0, r5
 800843e:	f7ff fd85 	bl	8007f4c <_fflush_r>
 8008442:	2800      	cmp	r0, #0
 8008444:	d0d9      	beq.n	80083fa <__swbuf_r+0x2e>
 8008446:	e7d6      	b.n	80083f6 <__swbuf_r+0x2a>

08008448 <__swsetup_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4b29      	ldr	r3, [pc, #164]	@ (80084f0 <__swsetup_r+0xa8>)
 800844c:	4605      	mov	r5, r0
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	460c      	mov	r4, r1
 8008452:	b118      	cbz	r0, 800845c <__swsetup_r+0x14>
 8008454:	6a03      	ldr	r3, [r0, #32]
 8008456:	b90b      	cbnz	r3, 800845c <__swsetup_r+0x14>
 8008458:	f7fd ffaa 	bl	80063b0 <__sinit>
 800845c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008460:	0719      	lsls	r1, r3, #28
 8008462:	d422      	bmi.n	80084aa <__swsetup_r+0x62>
 8008464:	06da      	lsls	r2, r3, #27
 8008466:	d407      	bmi.n	8008478 <__swsetup_r+0x30>
 8008468:	2209      	movs	r2, #9
 800846a:	602a      	str	r2, [r5, #0]
 800846c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	e033      	b.n	80084e0 <__swsetup_r+0x98>
 8008478:	0758      	lsls	r0, r3, #29
 800847a:	d512      	bpl.n	80084a2 <__swsetup_r+0x5a>
 800847c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800847e:	b141      	cbz	r1, 8008492 <__swsetup_r+0x4a>
 8008480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008484:	4299      	cmp	r1, r3
 8008486:	d002      	beq.n	800848e <__swsetup_r+0x46>
 8008488:	4628      	mov	r0, r5
 800848a:	f7fe ff09 	bl	80072a0 <_free_r>
 800848e:	2300      	movs	r3, #0
 8008490:	6363      	str	r3, [r4, #52]	@ 0x34
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008498:	81a3      	strh	r3, [r4, #12]
 800849a:	2300      	movs	r3, #0
 800849c:	6063      	str	r3, [r4, #4]
 800849e:	6923      	ldr	r3, [r4, #16]
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	f043 0308 	orr.w	r3, r3, #8
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	b94b      	cbnz	r3, 80084c2 <__swsetup_r+0x7a>
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084b8:	d003      	beq.n	80084c2 <__swsetup_r+0x7a>
 80084ba:	4621      	mov	r1, r4
 80084bc:	4628      	mov	r0, r5
 80084be:	f000 f882 	bl	80085c6 <__smakebuf_r>
 80084c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c6:	f013 0201 	ands.w	r2, r3, #1
 80084ca:	d00a      	beq.n	80084e2 <__swsetup_r+0x9a>
 80084cc:	2200      	movs	r2, #0
 80084ce:	60a2      	str	r2, [r4, #8]
 80084d0:	6962      	ldr	r2, [r4, #20]
 80084d2:	4252      	negs	r2, r2
 80084d4:	61a2      	str	r2, [r4, #24]
 80084d6:	6922      	ldr	r2, [r4, #16]
 80084d8:	b942      	cbnz	r2, 80084ec <__swsetup_r+0xa4>
 80084da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084de:	d1c5      	bne.n	800846c <__swsetup_r+0x24>
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	0799      	lsls	r1, r3, #30
 80084e4:	bf58      	it	pl
 80084e6:	6962      	ldrpl	r2, [r4, #20]
 80084e8:	60a2      	str	r2, [r4, #8]
 80084ea:	e7f4      	b.n	80084d6 <__swsetup_r+0x8e>
 80084ec:	2000      	movs	r0, #0
 80084ee:	e7f7      	b.n	80084e0 <__swsetup_r+0x98>
 80084f0:	20000180 	.word	0x20000180

080084f4 <_raise_r>:
 80084f4:	291f      	cmp	r1, #31
 80084f6:	b538      	push	{r3, r4, r5, lr}
 80084f8:	4605      	mov	r5, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	d904      	bls.n	8008508 <_raise_r+0x14>
 80084fe:	2316      	movs	r3, #22
 8008500:	6003      	str	r3, [r0, #0]
 8008502:	f04f 30ff 	mov.w	r0, #4294967295
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800850a:	b112      	cbz	r2, 8008512 <_raise_r+0x1e>
 800850c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008510:	b94b      	cbnz	r3, 8008526 <_raise_r+0x32>
 8008512:	4628      	mov	r0, r5
 8008514:	f000 f830 	bl	8008578 <_getpid_r>
 8008518:	4622      	mov	r2, r4
 800851a:	4601      	mov	r1, r0
 800851c:	4628      	mov	r0, r5
 800851e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008522:	f000 b817 	b.w	8008554 <_kill_r>
 8008526:	2b01      	cmp	r3, #1
 8008528:	d00a      	beq.n	8008540 <_raise_r+0x4c>
 800852a:	1c59      	adds	r1, r3, #1
 800852c:	d103      	bne.n	8008536 <_raise_r+0x42>
 800852e:	2316      	movs	r3, #22
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	2001      	movs	r0, #1
 8008534:	e7e7      	b.n	8008506 <_raise_r+0x12>
 8008536:	2100      	movs	r1, #0
 8008538:	4620      	mov	r0, r4
 800853a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800853e:	4798      	blx	r3
 8008540:	2000      	movs	r0, #0
 8008542:	e7e0      	b.n	8008506 <_raise_r+0x12>

08008544 <raise>:
 8008544:	4b02      	ldr	r3, [pc, #8]	@ (8008550 <raise+0xc>)
 8008546:	4601      	mov	r1, r0
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	f7ff bfd3 	b.w	80084f4 <_raise_r>
 800854e:	bf00      	nop
 8008550:	20000180 	.word	0x20000180

08008554 <_kill_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	2300      	movs	r3, #0
 8008558:	4d06      	ldr	r5, [pc, #24]	@ (8008574 <_kill_r+0x20>)
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	4611      	mov	r1, r2
 8008560:	602b      	str	r3, [r5, #0]
 8008562:	f7f9 fc8a 	bl	8001e7a <_kill>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	d102      	bne.n	8008570 <_kill_r+0x1c>
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	b103      	cbz	r3, 8008570 <_kill_r+0x1c>
 800856e:	6023      	str	r3, [r4, #0]
 8008570:	bd38      	pop	{r3, r4, r5, pc}
 8008572:	bf00      	nop
 8008574:	20000624 	.word	0x20000624

08008578 <_getpid_r>:
 8008578:	f7f9 bc78 	b.w	8001e6c <_getpid>

0800857c <__swhatbuf_r>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	460c      	mov	r4, r1
 8008580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008584:	4615      	mov	r5, r2
 8008586:	2900      	cmp	r1, #0
 8008588:	461e      	mov	r6, r3
 800858a:	b096      	sub	sp, #88	@ 0x58
 800858c:	da0c      	bge.n	80085a8 <__swhatbuf_r+0x2c>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	2100      	movs	r1, #0
 8008592:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008596:	bf14      	ite	ne
 8008598:	2340      	movne	r3, #64	@ 0x40
 800859a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800859e:	2000      	movs	r0, #0
 80085a0:	6031      	str	r1, [r6, #0]
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	b016      	add	sp, #88	@ 0x58
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	466a      	mov	r2, sp
 80085aa:	f000 f849 	bl	8008640 <_fstat_r>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	dbed      	blt.n	800858e <__swhatbuf_r+0x12>
 80085b2:	9901      	ldr	r1, [sp, #4]
 80085b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085bc:	4259      	negs	r1, r3
 80085be:	4159      	adcs	r1, r3
 80085c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085c4:	e7eb      	b.n	800859e <__swhatbuf_r+0x22>

080085c6 <__smakebuf_r>:
 80085c6:	898b      	ldrh	r3, [r1, #12]
 80085c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ca:	079d      	lsls	r5, r3, #30
 80085cc:	4606      	mov	r6, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	d507      	bpl.n	80085e2 <__smakebuf_r+0x1c>
 80085d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	6123      	str	r3, [r4, #16]
 80085da:	2301      	movs	r3, #1
 80085dc:	6163      	str	r3, [r4, #20]
 80085de:	b003      	add	sp, #12
 80085e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e2:	466a      	mov	r2, sp
 80085e4:	ab01      	add	r3, sp, #4
 80085e6:	f7ff ffc9 	bl	800857c <__swhatbuf_r>
 80085ea:	9f00      	ldr	r7, [sp, #0]
 80085ec:	4605      	mov	r5, r0
 80085ee:	4639      	mov	r1, r7
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7fe fec7 	bl	8007384 <_malloc_r>
 80085f6:	b948      	cbnz	r0, 800860c <__smakebuf_r+0x46>
 80085f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085fc:	059a      	lsls	r2, r3, #22
 80085fe:	d4ee      	bmi.n	80085de <__smakebuf_r+0x18>
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	f043 0302 	orr.w	r3, r3, #2
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	e7e2      	b.n	80085d2 <__smakebuf_r+0xc>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	6020      	str	r0, [r4, #0]
 800861c:	b15b      	cbz	r3, 8008636 <__smakebuf_r+0x70>
 800861e:	4630      	mov	r0, r6
 8008620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008624:	f000 f81e 	bl	8008664 <_isatty_r>
 8008628:	b128      	cbz	r0, 8008636 <__smakebuf_r+0x70>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f023 0303 	bic.w	r3, r3, #3
 8008630:	f043 0301 	orr.w	r3, r3, #1
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	89a3      	ldrh	r3, [r4, #12]
 8008638:	431d      	orrs	r5, r3
 800863a:	81a5      	strh	r5, [r4, #12]
 800863c:	e7cf      	b.n	80085de <__smakebuf_r+0x18>
	...

08008640 <_fstat_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	2300      	movs	r3, #0
 8008644:	4d06      	ldr	r5, [pc, #24]	@ (8008660 <_fstat_r+0x20>)
 8008646:	4604      	mov	r4, r0
 8008648:	4608      	mov	r0, r1
 800864a:	4611      	mov	r1, r2
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	f7f9 fc73 	bl	8001f38 <_fstat>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d102      	bne.n	800865c <_fstat_r+0x1c>
 8008656:	682b      	ldr	r3, [r5, #0]
 8008658:	b103      	cbz	r3, 800865c <_fstat_r+0x1c>
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	bd38      	pop	{r3, r4, r5, pc}
 800865e:	bf00      	nop
 8008660:	20000624 	.word	0x20000624

08008664 <_isatty_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	2300      	movs	r3, #0
 8008668:	4d05      	ldr	r5, [pc, #20]	@ (8008680 <_isatty_r+0x1c>)
 800866a:	4604      	mov	r4, r0
 800866c:	4608      	mov	r0, r1
 800866e:	602b      	str	r3, [r5, #0]
 8008670:	f7f9 fc71 	bl	8001f56 <_isatty>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	d102      	bne.n	800867e <_isatty_r+0x1a>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	b103      	cbz	r3, 800867e <_isatty_r+0x1a>
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	bd38      	pop	{r3, r4, r5, pc}
 8008680:	20000624 	.word	0x20000624

08008684 <log>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	460d      	mov	r5, r1
 800868a:	f000 f835 	bl	80086f8 <__ieee754_log>
 800868e:	4622      	mov	r2, r4
 8008690:	4606      	mov	r6, r0
 8008692:	460f      	mov	r7, r1
 8008694:	462b      	mov	r3, r5
 8008696:	4620      	mov	r0, r4
 8008698:	4629      	mov	r1, r5
 800869a:	f7f8 f9b7 	bl	8000a0c <__aeabi_dcmpun>
 800869e:	b998      	cbnz	r0, 80086c8 <log+0x44>
 80086a0:	2200      	movs	r2, #0
 80086a2:	2300      	movs	r3, #0
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f8 f9a6 	bl	80009f8 <__aeabi_dcmpgt>
 80086ac:	b960      	cbnz	r0, 80086c8 <log+0x44>
 80086ae:	2200      	movs	r2, #0
 80086b0:	2300      	movs	r3, #0
 80086b2:	4620      	mov	r0, r4
 80086b4:	4629      	mov	r1, r5
 80086b6:	f7f8 f977 	bl	80009a8 <__aeabi_dcmpeq>
 80086ba:	b140      	cbz	r0, 80086ce <log+0x4a>
 80086bc:	f7fd ff64 	bl	8006588 <__errno>
 80086c0:	2322      	movs	r3, #34	@ 0x22
 80086c2:	2600      	movs	r6, #0
 80086c4:	4f06      	ldr	r7, [pc, #24]	@ (80086e0 <log+0x5c>)
 80086c6:	6003      	str	r3, [r0, #0]
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ce:	f7fd ff5b 	bl	8006588 <__errno>
 80086d2:	2321      	movs	r3, #33	@ 0x21
 80086d4:	6003      	str	r3, [r0, #0]
 80086d6:	4803      	ldr	r0, [pc, #12]	@ (80086e4 <log+0x60>)
 80086d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086dc:	f000 b804 	b.w	80086e8 <nan>
 80086e0:	fff00000 	.word	0xfff00000
 80086e4:	08008d76 	.word	0x08008d76

080086e8 <nan>:
 80086e8:	2000      	movs	r0, #0
 80086ea:	4901      	ldr	r1, [pc, #4]	@ (80086f0 <nan+0x8>)
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	7ff80000 	.word	0x7ff80000
 80086f4:	00000000 	.word	0x00000000

080086f8 <__ieee754_log>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	460d      	mov	r5, r1
 8008706:	b087      	sub	sp, #28
 8008708:	da24      	bge.n	8008754 <__ieee754_log+0x5c>
 800870a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800870e:	4304      	orrs	r4, r0
 8008710:	d108      	bne.n	8008724 <__ieee754_log+0x2c>
 8008712:	2200      	movs	r2, #0
 8008714:	2300      	movs	r3, #0
 8008716:	2000      	movs	r0, #0
 8008718:	49cb      	ldr	r1, [pc, #812]	@ (8008a48 <__ieee754_log+0x350>)
 800871a:	f7f8 f807 	bl	800072c <__aeabi_ddiv>
 800871e:	b007      	add	sp, #28
 8008720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008724:	2900      	cmp	r1, #0
 8008726:	da04      	bge.n	8008732 <__ieee754_log+0x3a>
 8008728:	f7f7 fd1e 	bl	8000168 <__aeabi_dsub>
 800872c:	2200      	movs	r2, #0
 800872e:	2300      	movs	r3, #0
 8008730:	e7f3      	b.n	800871a <__ieee754_log+0x22>
 8008732:	2200      	movs	r2, #0
 8008734:	4bc5      	ldr	r3, [pc, #788]	@ (8008a4c <__ieee754_log+0x354>)
 8008736:	f7f7 fecf 	bl	80004d8 <__aeabi_dmul>
 800873a:	460b      	mov	r3, r1
 800873c:	460d      	mov	r5, r1
 800873e:	4602      	mov	r2, r0
 8008740:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8008744:	48c2      	ldr	r0, [pc, #776]	@ (8008a50 <__ieee754_log+0x358>)
 8008746:	4285      	cmp	r5, r0
 8008748:	dd06      	ble.n	8008758 <__ieee754_log+0x60>
 800874a:	4610      	mov	r0, r2
 800874c:	4619      	mov	r1, r3
 800874e:	f7f7 fd0d 	bl	800016c <__adddf3>
 8008752:	e7e4      	b.n	800871e <__ieee754_log+0x26>
 8008754:	2100      	movs	r1, #0
 8008756:	e7f5      	b.n	8008744 <__ieee754_log+0x4c>
 8008758:	152c      	asrs	r4, r5, #20
 800875a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800875e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008762:	440c      	add	r4, r1
 8008764:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8008768:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800876c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8008770:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8008774:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8008778:	ea41 0305 	orr.w	r3, r1, r5
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	2200      	movs	r2, #0
 8008782:	4bb4      	ldr	r3, [pc, #720]	@ (8008a54 <__ieee754_log+0x35c>)
 8008784:	f7f7 fcf0 	bl	8000168 <__aeabi_dsub>
 8008788:	1cab      	adds	r3, r5, #2
 800878a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800878e:	2b02      	cmp	r3, #2
 8008790:	4682      	mov	sl, r0
 8008792:	468b      	mov	fp, r1
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800879c:	dc53      	bgt.n	8008846 <__ieee754_log+0x14e>
 800879e:	2300      	movs	r3, #0
 80087a0:	f7f8 f902 	bl	80009a8 <__aeabi_dcmpeq>
 80087a4:	b1d0      	cbz	r0, 80087dc <__ieee754_log+0xe4>
 80087a6:	2c00      	cmp	r4, #0
 80087a8:	f000 8120 	beq.w	80089ec <__ieee754_log+0x2f4>
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7f7 fe29 	bl	8000404 <__aeabi_i2d>
 80087b2:	a391      	add	r3, pc, #580	@ (adr r3, 80089f8 <__ieee754_log+0x300>)
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	4606      	mov	r6, r0
 80087ba:	460f      	mov	r7, r1
 80087bc:	f7f7 fe8c 	bl	80004d8 <__aeabi_dmul>
 80087c0:	a38f      	add	r3, pc, #572	@ (adr r3, 8008a00 <__ieee754_log+0x308>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	4604      	mov	r4, r0
 80087c8:	460d      	mov	r5, r1
 80087ca:	4630      	mov	r0, r6
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7f7 fe83 	bl	80004d8 <__aeabi_dmul>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4620      	mov	r0, r4
 80087d8:	4629      	mov	r1, r5
 80087da:	e7b8      	b.n	800874e <__ieee754_log+0x56>
 80087dc:	a38a      	add	r3, pc, #552	@ (adr r3, 8008a08 <__ieee754_log+0x310>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	4650      	mov	r0, sl
 80087e4:	4659      	mov	r1, fp
 80087e6:	f7f7 fe77 	bl	80004d8 <__aeabi_dmul>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	2000      	movs	r0, #0
 80087f0:	4999      	ldr	r1, [pc, #612]	@ (8008a58 <__ieee754_log+0x360>)
 80087f2:	f7f7 fcb9 	bl	8000168 <__aeabi_dsub>
 80087f6:	4652      	mov	r2, sl
 80087f8:	4606      	mov	r6, r0
 80087fa:	460f      	mov	r7, r1
 80087fc:	465b      	mov	r3, fp
 80087fe:	4650      	mov	r0, sl
 8008800:	4659      	mov	r1, fp
 8008802:	f7f7 fe69 	bl	80004d8 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4630      	mov	r0, r6
 800880c:	4639      	mov	r1, r7
 800880e:	f7f7 fe63 	bl	80004d8 <__aeabi_dmul>
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	b914      	cbnz	r4, 800881e <__ieee754_log+0x126>
 8008818:	4632      	mov	r2, r6
 800881a:	463b      	mov	r3, r7
 800881c:	e0a0      	b.n	8008960 <__ieee754_log+0x268>
 800881e:	4620      	mov	r0, r4
 8008820:	f7f7 fdf0 	bl	8000404 <__aeabi_i2d>
 8008824:	a374      	add	r3, pc, #464	@ (adr r3, 80089f8 <__ieee754_log+0x300>)
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	4680      	mov	r8, r0
 800882c:	4689      	mov	r9, r1
 800882e:	f7f7 fe53 	bl	80004d8 <__aeabi_dmul>
 8008832:	a373      	add	r3, pc, #460	@ (adr r3, 8008a00 <__ieee754_log+0x308>)
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	4640      	mov	r0, r8
 800883e:	4649      	mov	r1, r9
 8008840:	f7f7 fe4a 	bl	80004d8 <__aeabi_dmul>
 8008844:	e0a5      	b.n	8008992 <__ieee754_log+0x29a>
 8008846:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800884a:	f7f7 fc8f 	bl	800016c <__adddf3>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4650      	mov	r0, sl
 8008854:	4659      	mov	r1, fp
 8008856:	f7f7 ff69 	bl	800072c <__aeabi_ddiv>
 800885a:	e9cd 0100 	strd	r0, r1, [sp]
 800885e:	4620      	mov	r0, r4
 8008860:	f7f7 fdd0 	bl	8000404 <__aeabi_i2d>
 8008864:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800886c:	4610      	mov	r0, r2
 800886e:	4619      	mov	r1, r3
 8008870:	f7f7 fe32 	bl	80004d8 <__aeabi_dmul>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800887c:	f7f7 fe2c 	bl	80004d8 <__aeabi_dmul>
 8008880:	a363      	add	r3, pc, #396	@ (adr r3, 8008a10 <__ieee754_log+0x318>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	4680      	mov	r8, r0
 8008888:	4689      	mov	r9, r1
 800888a:	f7f7 fe25 	bl	80004d8 <__aeabi_dmul>
 800888e:	a362      	add	r3, pc, #392	@ (adr r3, 8008a18 <__ieee754_log+0x320>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f7f7 fc6a 	bl	800016c <__adddf3>
 8008898:	4642      	mov	r2, r8
 800889a:	464b      	mov	r3, r9
 800889c:	f7f7 fe1c 	bl	80004d8 <__aeabi_dmul>
 80088a0:	a35f      	add	r3, pc, #380	@ (adr r3, 8008a20 <__ieee754_log+0x328>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fc61 	bl	800016c <__adddf3>
 80088aa:	4642      	mov	r2, r8
 80088ac:	464b      	mov	r3, r9
 80088ae:	f7f7 fe13 	bl	80004d8 <__aeabi_dmul>
 80088b2:	a35d      	add	r3, pc, #372	@ (adr r3, 8008a28 <__ieee754_log+0x330>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f7f7 fc58 	bl	800016c <__adddf3>
 80088bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c0:	f7f7 fe0a 	bl	80004d8 <__aeabi_dmul>
 80088c4:	a35a      	add	r3, pc, #360	@ (adr r3, 8008a30 <__ieee754_log+0x338>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088ce:	4640      	mov	r0, r8
 80088d0:	4649      	mov	r1, r9
 80088d2:	f7f7 fe01 	bl	80004d8 <__aeabi_dmul>
 80088d6:	a358      	add	r3, pc, #352	@ (adr r3, 8008a38 <__ieee754_log+0x340>)
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f7f7 fc46 	bl	800016c <__adddf3>
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	f7f7 fdf8 	bl	80004d8 <__aeabi_dmul>
 80088e8:	a355      	add	r3, pc, #340	@ (adr r3, 8008a40 <__ieee754_log+0x348>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f7f7 fc3d 	bl	800016c <__adddf3>
 80088f2:	4642      	mov	r2, r8
 80088f4:	464b      	mov	r3, r9
 80088f6:	f7f7 fdef 	bl	80004d8 <__aeabi_dmul>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008902:	f7f7 fc33 	bl	800016c <__adddf3>
 8008906:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800890a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800890e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8008912:	3551      	adds	r5, #81	@ 0x51
 8008914:	4335      	orrs	r5, r6
 8008916:	2d00      	cmp	r5, #0
 8008918:	4680      	mov	r8, r0
 800891a:	4689      	mov	r9, r1
 800891c:	dd48      	ble.n	80089b0 <__ieee754_log+0x2b8>
 800891e:	2200      	movs	r2, #0
 8008920:	4b4d      	ldr	r3, [pc, #308]	@ (8008a58 <__ieee754_log+0x360>)
 8008922:	4650      	mov	r0, sl
 8008924:	4659      	mov	r1, fp
 8008926:	f7f7 fdd7 	bl	80004d8 <__aeabi_dmul>
 800892a:	4652      	mov	r2, sl
 800892c:	465b      	mov	r3, fp
 800892e:	f7f7 fdd3 	bl	80004d8 <__aeabi_dmul>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4606      	mov	r6, r0
 8008938:	460f      	mov	r7, r1
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	f7f7 fc15 	bl	800016c <__adddf3>
 8008942:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008946:	f7f7 fdc7 	bl	80004d8 <__aeabi_dmul>
 800894a:	4680      	mov	r8, r0
 800894c:	4689      	mov	r9, r1
 800894e:	b964      	cbnz	r4, 800896a <__ieee754_log+0x272>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4630      	mov	r0, r6
 8008956:	4639      	mov	r1, r7
 8008958:	f7f7 fc06 	bl	8000168 <__aeabi_dsub>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4650      	mov	r0, sl
 8008962:	4659      	mov	r1, fp
 8008964:	f7f7 fc00 	bl	8000168 <__aeabi_dsub>
 8008968:	e6d9      	b.n	800871e <__ieee754_log+0x26>
 800896a:	a323      	add	r3, pc, #140	@ (adr r3, 80089f8 <__ieee754_log+0x300>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008974:	f7f7 fdb0 	bl	80004d8 <__aeabi_dmul>
 8008978:	a321      	add	r3, pc, #132	@ (adr r3, 8008a00 <__ieee754_log+0x308>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	4604      	mov	r4, r0
 8008980:	460d      	mov	r5, r1
 8008982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008986:	f7f7 fda7 	bl	80004d8 <__aeabi_dmul>
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	f7f7 fbed 	bl	800016c <__adddf3>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	f7f7 fbe5 	bl	8000168 <__aeabi_dsub>
 800899e:	4652      	mov	r2, sl
 80089a0:	465b      	mov	r3, fp
 80089a2:	f7f7 fbe1 	bl	8000168 <__aeabi_dsub>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4620      	mov	r0, r4
 80089ac:	4629      	mov	r1, r5
 80089ae:	e7d9      	b.n	8008964 <__ieee754_log+0x26c>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4650      	mov	r0, sl
 80089b6:	4659      	mov	r1, fp
 80089b8:	f7f7 fbd6 	bl	8000168 <__aeabi_dsub>
 80089bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c0:	f7f7 fd8a 	bl	80004d8 <__aeabi_dmul>
 80089c4:	4606      	mov	r6, r0
 80089c6:	460f      	mov	r7, r1
 80089c8:	2c00      	cmp	r4, #0
 80089ca:	f43f af25 	beq.w	8008818 <__ieee754_log+0x120>
 80089ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80089f8 <__ieee754_log+0x300>)
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d8:	f7f7 fd7e 	bl	80004d8 <__aeabi_dmul>
 80089dc:	a308      	add	r3, pc, #32	@ (adr r3, 8008a00 <__ieee754_log+0x308>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	4604      	mov	r4, r0
 80089e4:	460d      	mov	r5, r1
 80089e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ea:	e729      	b.n	8008840 <__ieee754_log+0x148>
 80089ec:	2000      	movs	r0, #0
 80089ee:	2100      	movs	r1, #0
 80089f0:	e695      	b.n	800871e <__ieee754_log+0x26>
 80089f2:	bf00      	nop
 80089f4:	f3af 8000 	nop.w
 80089f8:	fee00000 	.word	0xfee00000
 80089fc:	3fe62e42 	.word	0x3fe62e42
 8008a00:	35793c76 	.word	0x35793c76
 8008a04:	3dea39ef 	.word	0x3dea39ef
 8008a08:	55555555 	.word	0x55555555
 8008a0c:	3fd55555 	.word	0x3fd55555
 8008a10:	df3e5244 	.word	0xdf3e5244
 8008a14:	3fc2f112 	.word	0x3fc2f112
 8008a18:	96cb03de 	.word	0x96cb03de
 8008a1c:	3fc74664 	.word	0x3fc74664
 8008a20:	94229359 	.word	0x94229359
 8008a24:	3fd24924 	.word	0x3fd24924
 8008a28:	55555593 	.word	0x55555593
 8008a2c:	3fe55555 	.word	0x3fe55555
 8008a30:	d078c69f 	.word	0xd078c69f
 8008a34:	3fc39a09 	.word	0x3fc39a09
 8008a38:	1d8e78af 	.word	0x1d8e78af
 8008a3c:	3fcc71c5 	.word	0x3fcc71c5
 8008a40:	9997fa04 	.word	0x9997fa04
 8008a44:	3fd99999 	.word	0x3fd99999
 8008a48:	c3500000 	.word	0xc3500000
 8008a4c:	43500000 	.word	0x43500000
 8008a50:	7fefffff 	.word	0x7fefffff
 8008a54:	3ff00000 	.word	0x3ff00000
 8008a58:	3fe00000 	.word	0x3fe00000

08008a5c <_init>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	bf00      	nop
 8008a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a62:	bc08      	pop	{r3}
 8008a64:	469e      	mov	lr, r3
 8008a66:	4770      	bx	lr

08008a68 <_fini>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr
